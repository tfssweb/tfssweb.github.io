{"meta":{"title":"颓废书生","subtitle":null,"description":null,"author":"Tfss","url":"https://tfssweb.github.io","root":"/"},"pages":[{"title":"","date":"2019-09-11T02:10:12.436Z","updated":"2019-09-03T03:15:13.990Z","comments":true,"path":"404.html","permalink":"https://tfssweb.github.io/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2019-09-11T02:10:12.441Z","updated":"2019-09-03T03:15:14.069Z","comments":true,"path":"categories/index.html","permalink":"https://tfssweb.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-09-11T02:10:12.375Z","updated":"2019-09-03T03:15:14.070Z","comments":true,"path":"friends/index.html","permalink":"https://tfssweb.github.io/friends/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-09-11T02:10:12.432Z","updated":"2019-09-03T03:15:14.177Z","comments":true,"path":"tags/index.html","permalink":"https://tfssweb.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mybatis常用配置","slug":"Mybatis常用配置","date":"2019-09-01T14:10:01.000Z","updated":"2019-09-11T06:27:26.456Z","comments":true,"path":"2019/09/01/Mybatis常用配置/","link":"","permalink":"https://tfssweb.github.io/2019/09/01/Mybatis常用配置/","excerpt":"mybatis常用配置","text":"mybatis常用配置 分页1234567依赖&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.12&lt;/version&gt;&lt;/dependency&gt; 1234567application.yml配置pagehelper: helper-dialect: mysql reasonable: true support-methods-arguments: true params: count=countsql 12345java操作PageHelper.startPage(pageNum,pageSize);List list = service.getList();PageInfo&lt;SecuritySyslog&gt; pageInfo = new PageInfo&lt;&gt;(list); 打印sql、mysql字段下划线转驼峰123456mybatis: mapper-locations: classpath:mapper/**/*.xml type-aliases-package: com.tfss.model.* configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl map-underscore-to-camel-case: true 时区1234spring: jackson: time-zone: Asia/Shanghai date-format: yyyy-MM-dd HH:mm:ss 数据库访问类123456789101112131415161718192021222324252627package com.tfss.common;/** * @Author Created by tfss * @Blog https://tfssweb.github.io/ * @公众号 颓废书生 * @Description 全局枚举类 */public interface CommonConstants &#123; /** * 编码 */ String UTF8 = &quot;UTF-8&quot;; /** * 成功标记 */ Integer SUCCESS = 0; /** * 失败标记 */ Integer FAIL = 1;&#125; 123456789101112131415161718192021222324252627package com.tfss.common;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Service;/** * @Author Created by tfss * @Blog https://tfssweb.github.io/ * @公众号 颓废书生 * @Description 数据访问工具类 */@Servicepublic class DataAccessManager implements ApplicationContextAware &#123; private static ApplicationContext appContext; @Override public void setApplicationContext(ApplicationContext context) throws BeansException &#123; appContext = context; &#125; public static &lt;T&gt; T getMapper(Class&lt;T&gt; clazz) &#123; return (T) appContext.getBean(clazz); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.tfss.common;import lombok.*;import lombok.experimental.Accessors;import java.io.Serializable;/** * @Author Created by tfss * @Blog https://tfssweb.github.io/ * @公众号 颓废书生 * @Description 响应信息主体 */@Builder@ToString@Accessors(chain = true)@AllArgsConstructorpublic class R&lt;T&gt; implements Serializable &#123; private static final long serialVersionUID = 1L; @Getter @Setter private int code = CommonConstants.SUCCESS; @Getter @Setter private String msg = &quot;success&quot;; @Getter @Setter private T data; public R() &#123; super(); &#125; public R(T data) &#123; super(); this.data = data; &#125; public R(T data, String msg) &#123; super(); this.data = data; this.msg = msg; &#125; public R(Throwable e) &#123; super(); this.msg = e.getMessage(); this.code = CommonConstants.FAIL; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://tfssweb.github.io/tags/mybatis/"},{"name":"pagehelper","slug":"pagehelper","permalink":"https://tfssweb.github.io/tags/pagehelper/"},{"name":"分页","slug":"分页","permalink":"https://tfssweb.github.io/tags/分页/"}]},{"title":"Spring GateWay集成Swagger2","slug":"Spring GateWay集成Swagger2","date":"2019-07-16T14:00:00.000Z","updated":"2019-09-03T03:15:14.026Z","comments":true,"path":"2019/07/16/Spring GateWay集成Swagger2/","link":"","permalink":"https://tfssweb.github.io/2019/07/16/Spring GateWay集成Swagger2/","excerpt":"在GateWay项目下，创建config包，将下面两个类添加进去即可；","text":"在GateWay项目下，创建config包，将下面两个类添加进去即可； 12345678910111213141516&lt;properties&gt; &lt;swagger.version&gt;2.9.2&lt;/swagger.version&gt; &lt;/properties&gt;&lt;!-- swagger --&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;$&#123;swagger.version&#125;&lt;/version&gt; &lt;/dependency&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647SwaggerHandler.javaimport org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import reactor.core.publisher.Mono;import springfox.documentation.swagger.web.*;import java.util.Optional;@RestController@RequestMapping(&quot;/swagger-resources&quot;)public class SwaggerHandler &#123; @Autowired(required = false) private SecurityConfiguration securityConfiguration; @Autowired(required = false) private UiConfiguration uiConfiguration; private final SwaggerResourcesProvider swaggerResources; @Autowired public SwaggerHandler(SwaggerResourcesProvider swaggerResources) &#123; this.swaggerResources = swaggerResources; &#125; @GetMapping(&quot;/configuration/security&quot;) public Mono&lt;ResponseEntity&lt;SecurityConfiguration&gt;&gt; securityConfiguration() &#123; return Mono.just(new ResponseEntity&lt;&gt;( Optional.ofNullable(securityConfiguration).orElse(SecurityConfigurationBuilder.builder().build()), HttpStatus.OK)); &#125; @GetMapping(&quot;/configuration/ui&quot;) public Mono&lt;ResponseEntity&lt;UiConfiguration&gt;&gt; uiConfiguration() &#123; return Mono.just(new ResponseEntity&lt;&gt;( Optional.ofNullable(uiConfiguration).orElse(UiConfigurationBuilder.builder().build()), HttpStatus.OK)); &#125; @GetMapping(&quot;&quot;) public Mono&lt;ResponseEntity&gt; swaggerResources() &#123; return Mono.just((new ResponseEntity&lt;&gt;(swaggerResources.get(), HttpStatus.OK))); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243SwaggerProvider.javaimport org.springframework.cloud.gateway.discovery.DiscoveryClientRouteDefinitionLocator;import org.springframework.context.annotation.Primary;import org.springframework.stereotype.Component;import springfox.documentation.swagger.web.SwaggerResource;import springfox.documentation.swagger.web.SwaggerResourcesProvider;import java.util.ArrayList;import java.util.List;@Component@Primarypublic class SwaggerProvider implements SwaggerResourcesProvider &#123; public static final String API_URI = &quot;/v2/api-docs&quot;; public static final String EUREKA_SUB_PRIX = &quot;CompositeDiscoveryClient_&quot;; private final DiscoveryClientRouteDefinitionLocator routeLocator; public SwaggerProvider(DiscoveryClientRouteDefinitionLocator routeLocator) &#123; this.routeLocator = routeLocator; &#125; @Override public List&lt;SwaggerResource&gt; get() &#123; List&lt;SwaggerResource&gt; resources = new ArrayList&lt;&gt;(); // List&lt;String&gt; routes = new ArrayList&lt;&gt;(); //从DiscoveryClientRouteDefinitionLocator 中取出routes，构造成swaggerResource routeLocator.getRouteDefinitions().subscribe(routeDefinition -&gt; &#123; resources.add(swaggerResource(routeDefinition.getId().substring(EUREKA_SUB_PRIX.length()),routeDefinition.getPredicates().get(0).getArgs().get(&quot;pattern&quot;).replace(&quot;/**&quot;, API_URI))); &#125;); return resources; &#125; private SwaggerResource swaggerResource(String name, String location) &#123; SwaggerResource swaggerResource = new SwaggerResource(); swaggerResource.setName(name); swaggerResource.setLocation(location); swaggerResource.setSwaggerVersion(&quot;2.0&quot;); return swaggerResource; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://tfssweb.github.io/tags/springboot/"},{"name":"swagger","slug":"swagger","permalink":"https://tfssweb.github.io/tags/swagger/"}]},{"title":"Spring Cloud集成ELK","slug":"Spring Cloud集成ELK(Elasticsearch,Logstash,Kibana)","date":"2019-07-15T15:20:52.000Z","updated":"2019-09-03T03:15:14.025Z","comments":true,"path":"2019/07/15/Spring Cloud集成ELK(Elasticsearch,Logstash,Kibana)/","link":"","permalink":"https://tfssweb.github.io/2019/07/15/Spring Cloud集成ELK(Elasticsearch,Logstash,Kibana)/","excerpt":"","text":"引入依赖1234567891011&lt;!-- logback --&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt; &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt; &lt;version&gt;5.2&lt;/version&gt; &lt;/dependency&gt; 配置application.yml12LOGSTASH_HOST: xxx.xxx.xxx.xxxLOGSTASH_PORT: xxxx 添加配置文件logback-spring.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!--该日志将日志级别不同的log信息保存到不同的文件中 --&gt;&lt;configuration&gt;&lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;&lt;!--引入在application.properties文件中的变量--&gt;&lt;property resource=&quot;application.yml&quot;&gt;&lt;/property&gt;&lt;springProperty scope=&quot;context&quot; name=&quot;springAppName&quot; source=&quot;spring.application.name&quot; /&gt;&lt;!-- 日志在工程中的输出位置 --&gt;&lt;property name=&quot;LOG_FILE&quot; value=&quot;$&#123;BUILD_FOLDER:-build&#125;/$&#123;springAppName&#125;&quot; /&gt;&lt;!-- 控制台的日志输出样式 --&gt;&lt;property name=&quot;CONSOLE_LOG_PATTERN&quot; value=&quot;%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot; /&gt;&lt;!-- 控制台输出 --&gt;&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &lt;level&gt;INFO&lt;/level&gt; &lt;/filter&gt; &lt;!-- 日志输出编码 --&gt; &lt;encoder&gt; &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/pattern&gt; &lt;charset&gt;utf8&lt;/charset&gt; &lt;/encoder&gt;&lt;/appender&gt;&lt;!-- 为logstash输出的JSON格式的Appender --&gt;&lt;appender name=&quot;logstash&quot; class=&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt; &lt;destination&gt;$&#123;LOGSTASH_HOST&#125;:$&#123;LOGSTASH_PORT&#125;&lt;/destination&gt; &lt;!-- 日志输出编码 --&gt; &lt;encoder class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt; &lt;providers&gt; &lt;timestamp&gt; &lt;timeZone&gt;UTC&lt;/timeZone&gt; &lt;/timestamp&gt; &lt;pattern&gt; &lt;pattern&gt; &#123; &quot;severity&quot;: &quot;%level&quot;, &quot;service&quot;: &quot;$&#123;springAppName:-&#125;&quot;, &quot;trace&quot;: &quot;%X&#123;X-B3-TraceId:-&#125;&quot;, &quot;span&quot;: &quot;%X&#123;X-B3-SpanId:-&#125;&quot;, &quot;exportable&quot;: &quot;%X&#123;X-Span-Export:-&#125;&quot;, &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;, &quot;thread&quot;: &quot;%thread&quot;, &quot;class&quot;: &quot;%logger&#123;40&#125;&quot;, &quot;rest&quot;: &quot;%message&quot; &#125; &lt;/pattern&gt; &lt;/pattern&gt; &lt;/providers&gt; &lt;/encoder&gt;&lt;/appender&gt;&lt;!-- 日志输出级别 --&gt;&lt;root level=&quot;INFO&quot;&gt; &lt;appender-ref ref=&quot;console&quot; /&gt; &lt;appender-ref ref=&quot;logstash&quot; /&gt;&lt;/root&gt;&lt;/configuration&gt; 截图","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"elk","slug":"elk","permalink":"https://tfssweb.github.io/tags/elk/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"https://tfssweb.github.io/tags/elasticsearch/"},{"name":"logstash","slug":"logstash","permalink":"https://tfssweb.github.io/tags/logstash/"},{"name":"kibana","slug":"kibana","permalink":"https://tfssweb.github.io/tags/kibana/"}]},{"title":"jasypt 的加密解决方案","slug":"jasypt 的加密解决方案","date":"2019-07-11T15:23:06.000Z","updated":"2019-09-03T03:15:14.033Z","comments":true,"path":"2019/07/11/jasypt 的加密解决方案/","link":"","permalink":"https://tfssweb.github.io/2019/07/11/jasypt 的加密解决方案/","excerpt":"123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt; &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.17&lt;/version&gt;&lt;/dependency&gt;","text":"123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt; &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.17&lt;/version&gt;&lt;/dependency&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.tfss.demo;import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;public class Demo &#123; // 密钥 private static final String KEY = &quot;tfss&quot;; public static void main(String[] args) &#123; String ciphertext1 = encrypt(&quot;tfss&quot;); // Wu11fsC0gpgSET5aU8GXUA== String ciphertext2 = decrypt(&quot;zua3lqWfpB7QWndHkOqTWQ==&quot;); // ESXlHsVk2YM7mGcHy2ccGg== System.out.println(ciphertext1); System.out.println(ciphertext2);// String text1 = decrypt(&quot;i3cDFhs26sa2Ucrfz2hnQw==&quot;);// String text2 = decrypt(ciphertext2);// System.out.println(text1); // abcdefg// System.out.println(text2); // abcdefg &#125; /** * 加密 * @param text 明文 * @return 密文 */ public static String encrypt(String text) &#123; StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor(); encryptor.setPassword(KEY); return encryptor.encrypt(text); &#125; /** * 解密 * @param ciphertext 密文 * @return 明文 */ public static String decrypt(String ciphertext) &#123; StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor(); encryptor.setPassword(KEY); return encryptor.decrypt(ciphertext); &#125;&#125; 配置： 123jasypt: encryptor: password: tfss #根密码 配置文件中使用密文 12345spring: datasource: password: ENC(密文)xxx: ENC(密文)","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://tfssweb.github.io/tags/maven/"},{"name":"加密，jasypt","slug":"加密，jasypt","permalink":"https://tfssweb.github.io/tags/加密，jasypt/"}]},{"title":"Hutool常用API","slug":"Hutool常用API","date":"2019-07-09T14:09:05.000Z","updated":"2019-09-11T09:30:33.535Z","comments":true,"path":"2019/07/09/Hutool常用API/","link":"","permalink":"https://tfssweb.github.io/2019/07/09/Hutool常用API/","excerpt":"Hutool常用API 1234567891011&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;hutool.version&gt;4.5.17&lt;/hutool.version&gt;&lt;/properties&gt;&lt;!--hutool--&gt;&lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;&lt;/dependency&gt;","text":"Hutool常用API 1234567891011&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;hutool.version&gt;4.5.17&lt;/hutool.version&gt;&lt;/properties&gt;&lt;!--hutool--&gt;&lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;&lt;/dependency&gt; 日期操作字符串转日期12String dateStr = &quot;2017-03-01 22:33:23&quot;;Date date = DateUtil.parse(dateStr); 获取当天的起始与结束时间12345//一天的开始，结果：2017-03-01 00:00:00Date beginOfDay = DateUtil.beginOfDay(date);//一天的结束，结果：2017-03-01 23:59:59Date endOfDay = DateUtil.endOfDay(date); 日期时间偏移123456789101112131415161718192021222324String dateStr = &quot;2017-03-01 22:33:23&quot;;Date date = DateUtil.parse(dateStr);//结果：2017-03-03 22:33:23Date newDate = DateUtil.offset(date, DateField.DAY_OF_MONTH, 2);//常用偏移，结果：2017-03-04 22:33:23DateTime newDate2 = DateUtil.offsetDay(date, 3);//常用偏移，结果：2017-03-01 19:33:23DateTime newDate3 = DateUtil.offsetHour(date, -3);//昨天DateUtil.yesterday()//明天DateUtil.tomorrow()//上周DateUtil.lastWeek()//下周DateUtil.nextWeek()//上个月DateUtil.lastMonth()//下个月DateUtil.nextMonth() 获取当前时间12345678910//当前时间Date date = DateUtil.date();//当前时间Date date2 = DateUtil.date(Calendar.getInstance());//当前时间Date date3 = DateUtil.date(System.currentTimeMillis());//当前时间字符串，格式：yyyy-MM-dd HH:mm:ssString now = DateUtil.now();//当前日期字符串，格式：yyyy-MM-ddString today= DateUtil.today();","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"hutool","slug":"hutool","permalink":"https://tfssweb.github.io/tags/hutool/"}]},{"title":"SpringCloud常用配置","slug":"SpringCloud配置","date":"2019-06-09T14:11:23.000Z","updated":"2019-09-03T03:15:14.027Z","comments":true,"path":"2019/06/09/SpringCloud配置/","link":"","permalink":"https://tfssweb.github.io/2019/06/09/SpringCloud配置/","excerpt":"","text":"Gateway网关123456789101112131415161718192021spring: cloud: gateway: discovery: locator: # 表明gateway开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务 # 如：http://localhost:8003/cloud-demo/path enabled: true # 因为服务注册的时候，向注册中心注册时将服务名转成大写的了 lower-case-service-id: true # 自定义路由，配置了一个Path 的predict,将以/demo/**开头的请求都会转发到uri为lb://CLOUD-DEMO的地址上，并用StripPrefix的filter 在转发之前将/demo去掉 # 同时将spring.cloud.gateway.discovery.locator.enabled改为false，如果不改的话，之前的http://localhost:8003/cloud-demo/path这样的请求地址也能正常访问，因为这时为每个服务创建了2个router # 如：http://localhost:8003/demo/path routes: - id: cloud-demo # CLOUD-AUTH为需要路由的微服务名 uri: lb://CLOUD-DEMO predicates: - Path=/demo/** filters: - StripPrefix=1 客户端配置超时12345678910111213141516feign: hystrix: enabled: true##设置hystrix超时时间(毫秒),设置调用者等待命令执行的超时限制，超过此时间，HystrixCommand被标记为TIMEOUT，并执行回退逻辑,默认1shystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 600000#请求处理的超时时间ribbon.ReadTimeout: 120000#请求连接的超时时间ribbon.ConnectTimeout: 30000 spring monitor 健康检查1234567891011121314151617&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;eureka.instance.health-check-url-path=/actuator/healthmanagement: endpoints: web: exposure: include: &quot;*&quot; health: sensitive=false: false endpoint: health: show-details: ALWAYS 常用配置1234#表示eureka client发送心跳给server端的频率，默认为30秒eureka.instance.lease-renewal-interval-in-seconds=10#表示eureka client间隔多久去拉取服务注册信息，默认为30秒eureka.client.registry-fetch-interval-seconds=10","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://tfssweb.github.io/tags/spring/"}]},{"title":"Excel多个Sheet拆分成多个Excel文件","slug":"Excel多个Sheet拆分成多个Excel","date":"2019-05-30T14:11:23.000Z","updated":"2019-09-03T03:15:14.003Z","comments":true,"path":"2019/05/30/Excel多个Sheet拆分成多个Excel/","link":"","permalink":"https://tfssweb.github.io/2019/05/30/Excel多个Sheet拆分成多个Excel/","excerpt":"右键任意一个工作表标签，在弹出的下拉列表中选择“查看代码”，","text":"右键任意一个工作表标签，在弹出的下拉列表中选择“查看代码”， 点击菜单插入-模块 在弹出的模块对话框中 输入以下代码： 1234567891011Private Sub 分拆工作表()Dim sht As WorksheetDim MyBook As WorkbookSet MyBook = ActiveWorkbookFor Each sht In MyBook.Sheetssht.CopyActiveWorkbook.SaveAs Filename:=MyBook.Path &amp; &quot;\\&quot; &amp; sht.Name, FileFormat:=xlNormal &apos;将工作簿另存为EXCEL默认格式ActiveWorkbook.CloseNextMsgBox &quot;文件已经被分拆完毕!&quot;End Sub 单击运行-运行子过程|窗体 几秒过后 弹出提示窗口“文件已被拆分完毕”","categories":[{"name":"小技巧","slug":"小技巧","permalink":"https://tfssweb.github.io/categories/小技巧/"}],"tags":[{"name":"excel","slug":"excel","permalink":"https://tfssweb.github.io/tags/excel/"},{"name":"sheet","slug":"sheet","permalink":"https://tfssweb.github.io/tags/sheet/"}]},{"title":"解决cors跨域问题","slug":"解决cors跨域问题","date":"2019-05-01T15:06:00.000Z","updated":"2019-09-03T03:15:14.065Z","comments":true,"path":"2019/05/01/解决cors跨域问题/","link":"","permalink":"https://tfssweb.github.io/2019/05/01/解决cors跨域问题/","excerpt":"123456789101112131415/** * 解决cors跨域问题 * */@Configurationpublic class CorsConfig extends WebMvcConfigurerAdapter &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping(&quot;/**&quot;) .allowedOrigins(&quot;*&quot;) .allowCredentials(true) .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot;) .maxAge(3600); &#125;&#125;","text":"123456789101112131415/** * 解决cors跨域问题 * */@Configurationpublic class CorsConfig extends WebMvcConfigurerAdapter &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping(&quot;/**&quot;) .allowedOrigins(&quot;*&quot;) .allowCredentials(true) .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot;) .maxAge(3600); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"vue","slug":"vue","permalink":"https://tfssweb.github.io/tags/vue/"}]},{"title":"Python坐标转换","slug":"Python坐标转换","date":"2019-04-14T15:30:00.000Z","updated":"2019-09-03T03:15:14.021Z","comments":true,"path":"2019/04/14/Python坐标转换/","link":"","permalink":"https://tfssweb.github.io/2019/04/14/Python坐标转换/","excerpt":"Python坐标转换","text":"Python坐标转换 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162# -*- coding: utf-8 -*-import jsonimport requestsimport math# key = &apos;your key here&apos; # 这里填写你的百度开放平台的keyx_pi = 3.14159265358979324 * 3000.0 / 180.0pi = 3.1415926535897932384626 # πa = 6378245.0 # 长半轴ee = 0.00669342162296594323 # 扁率# def geocode(address):# &quot;&quot;&quot;# 利用百度geocoding服务解析地址获取位置坐标# :param address:需要解析的地址# :return:# &quot;&quot;&quot;# geocoding = &#123;&apos;s&apos;: &apos;rsv3&apos;,# &apos;key&apos;: key,# &apos;city&apos;: &apos;全国&apos;,# &apos;address&apos;: address&#125;# res = requests.get(# &quot;http://restapi.amap.com/v3/geocode/geo&quot;, params=geocoding)# if res.status_code == 200:# json = res.json()# status = json.get(&apos;status&apos;)# count = json.get(&apos;count&apos;)# if status == &apos;1&apos; and int(count) &gt;= 1:# geocodes = json.get(&apos;geocodes&apos;)[0]# lng = float(geocodes.get(&apos;location&apos;).split(&apos;,&apos;)[0])# lat = float(geocodes.get(&apos;location&apos;).split(&apos;,&apos;)[1])# return [lng, lat]# else:# return None# else:# return Nonedef gcj02tobd09(lng, lat): &quot;&quot;&quot; 火星坐标系(GCJ-02)转百度坐标系(BD-09) 谷歌、高德——&gt;百度 :param lng:火星坐标经度 :param lat:火星坐标纬度 :return: &quot;&quot;&quot; z = math.sqrt(lng * lng + lat * lat) + 0.00002 * math.sin(lat * x_pi) theta = math.atan2(lat, lng) + 0.000003 * math.cos(lng * x_pi) bd_lng = z * math.cos(theta) + 0.0065 bd_lat = z * math.sin(theta) + 0.006 return [bd_lng, bd_lat]def bd09togcj02(bd_lon, bd_lat): &quot;&quot;&quot; 百度坐标系(BD-09)转火星坐标系(GCJ-02) 百度——&gt;谷歌、高德 :param bd_lat:百度坐标纬度 :param bd_lon:百度坐标经度 :return:转换后的坐标列表形式 &quot;&quot;&quot; x = bd_lon - 0.0065 y = bd_lat - 0.006 z = math.sqrt(x * x + y * y) - 0.00002 * math.sin(y * x_pi) theta = math.atan2(y, x) - 0.000003 * math.cos(x * x_pi) gg_lng = z * math.cos(theta) gg_lat = z * math.sin(theta) return [gg_lng, gg_lat]def wgs84togcj02(lng, lat): &quot;&quot;&quot; WGS84转GCJ02(火星坐标系) :param lng:WGS84坐标系的经度 :param lat:WGS84坐标系的纬度 :return: &quot;&quot;&quot; if out_of_china(lng, lat): # 判断是否在国内 return lng, lat dlat = transformlat(lng - 105.0, lat - 35.0) dlng = transformlng(lng - 105.0, lat - 35.0) radlat = lat / 180.0 * pi magic = math.sin(radlat) magic = 1 - ee * magic * magic sqrtmagic = math.sqrt(magic) dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi) dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi) mglat = lat + dlat mglng = lng + dlng return [mglng, mglat]def gcj02towgs84(lng, lat): &quot;&quot;&quot; GCJ02(火星坐标系)转GPS84 :param lng:火星坐标系的经度 :param lat:火星坐标系纬度 :return: &quot;&quot;&quot; if out_of_china(lng, lat): return lng, lat dlat = transformlat(lng - 105.0, lat - 35.0) dlng = transformlng(lng - 105.0, lat - 35.0) radlat = lat / 180.0 * pi magic = math.sin(radlat) magic = 1 - ee * magic * magic sqrtmagic = math.sqrt(magic) dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi) dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi) mglat = lat + dlat mglng = lng + dlng return [lng * 2 - mglng, lat * 2 - mglat]def transformlat(lng, lat): ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \\ 0.1 * lng * lat + 0.2 * math.sqrt(math.fabs(lng)) ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 * math.sin(2.0 * lng * pi)) * 2.0 / 3.0 ret += (20.0 * math.sin(lat * pi) + 40.0 * math.sin(lat / 3.0 * pi)) * 2.0 / 3.0 ret += (160.0 * math.sin(lat / 12.0 * pi) + 320 * math.sin(lat * pi / 30.0)) * 2.0 / 3.0 return retdef transformlng(lng, lat): ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \\ 0.1 * lng * lat + 0.1 * math.sqrt(math.fabs(lng)) ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 * math.sin(2.0 * lng * pi)) * 2.0 / 3.0 ret += (20.0 * math.sin(lng * pi) + 40.0 * math.sin(lng / 3.0 * pi)) * 2.0 / 3.0 ret += (150.0 * math.sin(lng / 12.0 * pi) + 300.0 * math.sin(lng / 30.0 * pi)) * 2.0 / 3.0 return retdef out_of_china(lng, lat): &quot;&quot;&quot; 判断是否在国内，不在国内不做偏移 :param lng: :param lat: :return: &quot;&quot;&quot; if lng &lt; 72.004 or lng &gt; 137.8347: return True if lat &lt; 0.8293 or lat &gt; 55.8271: return True return Falseif __name__ == &apos;__main__&apos;: lng = 128.543 lat = 37.065 result1 = gcj02tobd09(lng, lat) result2 = bd09togcj02(lng, lat) result3 = wgs84togcj02(lng, lat) result4 = gcj02towgs84(lng, lat) # result5 = geocode(&apos;北京市朝阳区朝阳公园&apos;) print(result1, result2, result3, result4)","categories":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/tags/python/"},{"name":"坐标","slug":"坐标","permalink":"https://tfssweb.github.io/tags/坐标/"},{"name":"经纬度","slug":"经纬度","permalink":"https://tfssweb.github.io/tags/经纬度/"}]},{"title":"随机返回请求头","slug":"随机返回请求头","date":"2019-03-05T13:14:13.000Z","updated":"2019-09-03T03:15:14.068Z","comments":true,"path":"2019/03/05/随机返回请求头/","link":"","permalink":"https://tfssweb.github.io/2019/03/05/随机返回请求头/","excerpt":"接口类爬虫步骤","text":"接口类爬虫步骤 1234567891011121314151617181920212223242526272829#!/usr/bin/env python3# -*- coding: utf-8 -*-import random# 返回一个随机的请求头 headersdef getHeaders(): user_agent_list = [ \\ &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot; \\ &quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1&quot;, \\ &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3&quot;, \\ &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;, \\ &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot; ] UserAgent = random.choice(user_agent_list) headers = &#123;&apos;User-Agent&apos;: UserAgent, &apos;Content-Type&apos;: &apos;application/json&apos;&#125; return headers","categories":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://tfssweb.github.io/tags/爬虫/"},{"name":"headers","slug":"headers","permalink":"https://tfssweb.github.io/tags/headers/"}]},{"title":"接口类Python爬虫步骤","slug":"接口类爬虫步骤","date":"2019-03-02T14:14:13.000Z","updated":"2019-09-03T03:15:14.059Z","comments":true,"path":"2019/03/02/接口类爬虫步骤/","link":"","permalink":"https://tfssweb.github.io/2019/03/02/接口类爬虫步骤/","excerpt":"接口类Python爬虫步骤","text":"接口类Python爬虫步骤 123456789101112131415161718192021222324252627282930313233#!/usr/bin/env python3# -*- coding: utf-8 -*-import requestsimport json# 1-创建Sessionsession = requests.session()# 2-获取接口链接url_login = &quot;http://xxx.xxx.xxx.xxx:xxxx/login&quot;# 3-构造参数，转化为json参数tmp = &#123;&quot;username&quot;: username, &quot;password&quot;: password&#125;payload = json.dumps(tmp, ensure_ascii=False)# 4-获取请求ip（使用代理随机选择proxy）proxy = random.choice(proxy_list)proxies = &#123; &apos;http&apos;: &apos;http://&apos; + proxy, &apos;https&apos;: &apos;https://&apos; + proxy,&#125;# 5-获取请求头（使用代理随机请求头）headers = utils_http.getHeaders()# 6-发送请求response = session.request(&quot;POST&quot;, url_login, proxies=proxies, timeout=5, data=payload, headers=headers)# 7-打印结果，并获取cookie、状态码print(response.txt)cookie = session.cookies.get_dict()status_code = response.status_code","categories":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://tfssweb.github.io/tags/爬虫/"}]},{"title":"Java8中的流","slug":"Java8中的流","date":"2019-03-01T15:30:00.000Z","updated":"2019-09-03T03:15:14.007Z","comments":true,"path":"2019/03/01/Java8中的流/","link":"","permalink":"https://tfssweb.github.io/2019/03/01/Java8中的流/","excerpt":"什么是流？流是Java8引入的全新概念，它用来处理集合中的数据，暂且可以把它理解为一种高级集合。 众所周知，集合操作非常麻烦，若要对集合进行筛选、投影，需要写大量的代码，而流是以声明的形式操作集合，它就像SQL语句，我们只需告诉流需要对集合进行什么操作，它就会自动进行操作，并将执行结果交给你，无需我们自己手写代码。 因此，流的集合操作对我们来说是透明的，我们只需向流下达命令，它就会自动把我们想要的结果给我们。由于操作过程完全由Java处理，因此它可以根据当前硬件环境选择最优的方法处理，我们也无需编写复杂又容易出错的多线程代码了。","text":"什么是流？流是Java8引入的全新概念，它用来处理集合中的数据，暂且可以把它理解为一种高级集合。 众所周知，集合操作非常麻烦，若要对集合进行筛选、投影，需要写大量的代码，而流是以声明的形式操作集合，它就像SQL语句，我们只需告诉流需要对集合进行什么操作，它就会自动进行操作，并将执行结果交给你，无需我们自己手写代码。 因此，流的集合操作对我们来说是透明的，我们只需向流下达命令，它就会自动把我们想要的结果给我们。由于操作过程完全由Java处理，因此它可以根据当前硬件环境选择最优的方法处理，我们也无需编写复杂又容易出错的多线程代码了。 流的特点1.只能遍历一次 我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。 一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。2.采用内部迭代方式 若要对集合进行处理，则需我们手写处理代码，这就叫做外部迭代。 而要对流进行处理，我们只需告诉流我们需要什么结果，处理过程由流自行完成，这就称为内部迭代。 流的操作种类流的操作分为两种，分别为中间操作和终端操作。 1.中间操作 当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为“中间操作”。 中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。2.终端操作 当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终端操作。 终端操作将返回一个执行结果，这就是你想要的数据。 流的操作过程使用流一共需要三步： 准备一个数据源1.执行中间操作 中间操作可以有多个，它们可以串连起来形成流水线。2.执行终端操作 执行终端操作后本次流结束，你将获得一个执行结果。 使用流创建流在使用流之前，首先需要拥有一个数据源，并通过StreamAPI提供的一些方法获取该数据源的流对象。数据源可以有多种形式： 集合 这种数据源较为常用，通过stream()方法即可获取流对象： 12List&lt;Person&gt; list = new ArrayList&lt;Person&gt;();Stream&lt;Person&gt; stream = list.stream(); 数组 通过Arrays类提供的静态函数stream()获取数组的流对象： 12String[] names = &#123;&quot;chaimm&quot;,&quot;peter&quot;,&quot;john&quot;&#125;;Stream&lt;String&gt; stream = Arrays.stream(names); 值 直接将几个值变成流对象： 1Stream&lt;String&gt; stream = Stream.of(&quot;chaimm&quot;,&quot;peter&quot;,&quot;john&quot;); 文件 1234try(Stream lines = Files.lines(Paths.get(“文件路径名”),Charset.defaultCharset()))&#123; //可对lines做一些操作&#125;catch(IOException e)&#123;&#125; iterator 创建无限流 123Stream.iterate(0, n -&gt; n + 2) .limit(10) .forEach(System.out::println); PS：Java7简化了IO操作，把打开IO操作放在try后的括号中即可省略关闭IO的代码。 筛选 filterfilter 函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。 如，筛选出所有学生： 123List&lt;Person&gt; result = list.stream() .filter(Person::isStudent) .collect(toList()); 去重distinct去掉重复的结果： 123List&lt;Person&gt; result = list.stream() .distinct() .collect(toList()); 截取截取流的前N个元素： 123List&lt;Person&gt; result = list.stream() .limit(3) .collect(toList()); 跳过1234List&lt;Person&gt; result = list.stream() .skip(3) .collect(toList());` 映射对流中的每个元素执行一个函数，使得元素转换成另一种类型输出。流会将每一个元素输送给map函数，并执行map中的Lambda表达式，最后将执行结果存入一个新的流中。 如，获取每个人的姓名(实则是将Perosn类型转换成String类型)： 123List&lt;Person&gt; result = list.stream() .map(Person::getName) .collect(toList()); 合并多个流例：列出List中各不相同的单词，List集合如下： 1234List&lt;String&gt; list = new ArrayList&lt;String&gt;();list.add(&quot;I am a boy&quot;);list.add(&quot;I love the girl&quot;);list.add(&quot;But the girl loves another girl&quot;); 思路如下： 首先将list变成流： 1list.stream(); 按空格分词： 12list.stream() .map(line-&gt;line.split(&quot; &quot;)); 分完词之后，每个元素变成了一个String[]数组。 将每个 String[] 变成流： 123list.stream() .map(line-&gt;line.split(&quot; &quot;)) .map(Arrays::stream) 此时一个大流里面包含了一个个小流，我们需要将这些小流合并成一个流。 将小流合并成一个大流：用 flatMap 替换刚才的 map 123list.stream() .map(line-&gt;line.split(&quot; &quot;)) .flatMap(Arrays::stream) 去重 12345list.stream() .map(line-&gt;line.split(&quot; &quot;)) .flatMap(Arrays::stream) .distinct() .collect(toList()); 是否匹配任一元素：anyMatchanyMatch用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。 如，判断list中是否有学生： 12boolean result = list.stream() .anyMatch(Person::isStudent); 是否匹配所有元素：allMatchallMatch用于判断流中的所有元素是否都满足指定条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为boolean类型。 如，判断是否所有人都是学生： 12boolean result = list.stream() .allMatch(Person::isStudent); 是否未匹配所有元素：noneMatchnoneMatch与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件： 12boolean result = list.stream() .noneMatch(Person::isStudent); 获取任一元素findAnyfindAny能够从流中随便选一个元素出来，它返回一个Optional类型的元素。 1Optional&lt;Person&gt; person = list.stream().findAny(); 获取第一个元素findFirst1Optional&lt;Person&gt; person = list.stream().findFirst(); 归约归约是将集合中的所有元素经过指定运算，折叠成一个元素输出，如：求最值、平均数等，这些操作都是将一个集合的元素折叠成一个元素输出。 在流中，reduce函数能实现归约。 reduce函数接收两个参数： 1.初始值2.进行归约操作的Lambda表达式元素求和：自定义Lambda表达式实现求和 例：计算所有人的年龄总和 1int age = list.stream().reduce(0, (person1,person2)-&gt;person1.getAge()+person2.getAge()); 1.reduce的第一个参数表示初试值为0；2.reduce的第二个参数为需要进行的归约操作，它接收一个拥有两个参数的Lambda表达式，reduce会把流中的元素两两输给Lambda表达式，最后将计算出累加之和。元素求和：使用Integer.sum函数求和 上面的方法中我们自己定义了Lambda表达式实现求和运算，如果当前流的元素为数值类型，那么可以使用Integer提供了sum函数代替自定义的Lambda表达式，如： 1int age = list.stream().reduce(0, Integer::sum); Integer类还提供了 min、max 等一系列数值操作，当流中元素为数值类型时可以直接使用。 数值流的使用采用reduce进行数值操作会涉及到基本数值类型和引用数值类型之间的装箱、拆箱操作，因此效率较低。 当流操作为纯数值操作时，使用数值流能获得较高的效率。 将普通流转换成数值流 StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。 如，将Person中的age转换成数值流： 1IntStream stream = list.stream().mapToInt(Person::getAge); 数值计算 每种数值流都提供了数值计算函数，如max、min、sum等。如，找出最大的年龄： 123OptionalInt maxAge = list.stream() .mapToInt(Person::getAge) .max(); 由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"stream","slug":"stream","permalink":"https://tfssweb.github.io/tags/stream/"}]},{"title":"更改Docker自定义网络的默认子网","slug":"更改Docker自定义网络的默认子网","date":"2019-02-09T15:19:05.000Z","updated":"2019-09-16T02:19:17.513Z","comments":true,"path":"2019/02/09/更改Docker自定义网络的默认子网/","link":"","permalink":"https://tfssweb.github.io/2019/02/09/更改Docker自定义网络的默认子网/","excerpt":"1vi /etc/docker/daemon.json","text":"1vi /etc/docker/daemon.json 添加行： 123456&#123; \"default-address-pools\": [ &#123;\"base\":\"10.10.0.0/16\",\"size\":24&#125; ]&#125; 重启dockerd： 1service docker restart 检查结果,它也适用于docker-compose: 12docker network create foodocker network inspect foo | grep Subnet 输出 1\"Subnet\": \"10.10.1.0/24\" ​ 你的“bip”：“10.10.1.0/24”仅适用于bridge0.这意味着任何没有–network运行的容器都将使用此默认网络.","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"子网","slug":"子网","permalink":"https://tfssweb.github.io/tags/子网/"}]},{"title":"Hutool工具类","slug":"Hutool工具类","date":"2019-01-21T15:06:00.000Z","updated":"2019-09-11T09:30:11.705Z","comments":true,"path":"2019/01/21/Hutool工具类/","link":"","permalink":"https://tfssweb.github.io/2019/01/21/Hutool工具类/","excerpt":"统一工具类的意义Hutool帮助我们简化每一行代码，减少每一个方法，然代码可读性、容错性更高。完整文档地址： https://hutool.cn/docs/index.html#/ ,避免每个开发乱引入造成辣鸡代码。 强制使用hutool工具类","text":"统一工具类的意义Hutool帮助我们简化每一行代码，减少每一个方法，然代码可读性、容错性更高。完整文档地址： https://hutool.cn/docs/index.html#/ ,避免每个开发乱引入造成辣鸡代码。 强制使用hutool工具类 hutool 提供类哪些功能一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件： hutool-aop JDK动态代理封装，提供非IOC下的切面支持 hutool-bloomFilter 布隆过滤，提供一些Hash算法的布隆过滤 hutool-cache 缓存 hutool-core 核心，包括Bean操作、日期、各种Util等 hutool-cron 定时任务模块，提供类Crontab表达式的定时任务 hutool-crypto 加密解密模块 hutool-db JDBC封装后的数据操作，基于ActiveRecord思想 hutool-dfa 基于DFA模型的多关键字查找 hutool-extra 扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码等） hutool-http 基于HttpUrlConnection的Http客户端封装 hutool-log 自动识别日志实现的日志门面 hutool-script 脚本执行封装，例如Javascript hutool-setting 功能更强大的Setting配置文件和Properties封装 hutool-system 系统参数调用封装（JVM信息等） hutool-json JSON实现 hutool-captcha 图片验证码实现 hutool-poi 针对POI中Excel的封装可以根据需求对每个模块单独引入，也可以通过引入hutool-all方式引入所有模块。 1234567891011&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;hutool.version&gt;4.5.17&lt;/hutool.version&gt;&lt;/properties&gt;&lt;!--hutool--&gt;&lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;$&#123;hutool.version&#125;&lt;/version&gt;&lt;/dependency&gt; 示例比如记录日志时候，从request获取参数的字符串 1HttpUtil.toParams(request.getParameterMap()) 获取当前时间 12//当前时间，格式 yyyy-MM-dd HH:mm:ssDateUtil.now()","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"hutool","slug":"hutool","permalink":"https://tfssweb.github.io/tags/hutool/"},{"name":"utils","slug":"utils","permalink":"https://tfssweb.github.io/tags/utils/"}]},{"title":"常用Dockerfile","slug":"常用Dockerfile","date":"2019-01-07T15:12:23.000Z","updated":"2019-09-03T03:15:14.052Z","comments":true,"path":"2019/01/07/常用Dockerfile/","link":"","permalink":"https://tfssweb.github.io/2019/01/07/常用Dockerfile/","excerpt":"常用Dockerfile","text":"常用Dockerfile SpringBoot123456789101112131415FROM anapsix/alpine-java:8_server-jre_unlimitedMAINTAINER tfss &lt;1255791430@qq.com&gt;RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN mkdir -p /xxxWORKDIR /xxxEXPOSE 28089ADD ./target/xxx.jar ./CMD java -Djava.security.egd=file:/dev/./urandom -jar xxx.jar 123456789101112version: &apos;3&apos;services: xxx: build: context: . dockerfile: Dockerfile restart: always ports: - 28089:28089 container_name: xxx hostname: xxx image: xxx vue1234567891011121314FROM node:10.10.0-alpine as build-stageRUN npm config set registry https://registry.npm.taobao.orgWORKDIR /appCOPY xxx/package*.json ./RUN npm installCOPY xxx .RUN npm run buildFROM nginx:1.15.3-alpine as production-stageMAINTAINER tfss &lt;1255791430@qq.com&gt;COPY nginx.conf /etc/nginx/nginx.confCOPY --from=build-stage /app/dist/ /usr/share/nginx/html/ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; proxy_read_timeout 3600s; root /usr/share/nginx/html; index index.html index.htm; # proxy_set_header X-real-ip $remote_addr; try_files $uri $uri/ /index.html; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125;","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"springboot","slug":"springboot","permalink":"https://tfssweb.github.io/tags/springboot/"},{"name":"vue","slug":"vue","permalink":"https://tfssweb.github.io/tags/vue/"}]},{"title":"Python将Json转Excel","slug":"Python将Json转Excel","date":"2018-12-11T13:02:12.000Z","updated":"2019-09-21T07:15:16.390Z","comments":true,"path":"2018/12/11/Python将Json转Excel/","link":"","permalink":"https://tfssweb.github.io/2018/12/11/Python将Json转Excel/","excerpt":"Python将Json转Excel","text":"Python将Json转Excel 脚本12345678910111213141516171819202122232425262728293031323334353637import jsonimport xlwtfrom xlwt import Workbook# 实例化一个Workbook()对象(即excel文件)wbk = xlwt.Workbook()# 新建一个名为Sheet1的excel sheet。此处的cell_overwrite_ok =True是为了能对同一个单元格重复操作。sheet = wbk.add_sheet('Sheet1',cell_overwrite_ok=True)book = Workbook(encoding='utf-8')sheet1 = book.add_sheet('Sheet 1')with open('douyin.json', 'r', encoding='utf-8') as file: p = json.load(file)datas = p[\"data\"]# 文件头for i, key in enumerate(['uid', '店名', '抖音号', '地址', '签名', '是否绑定手机号', '个人手机号', '出生日期']): sheet1.write(0, i, key)# 文件内容for idx, data in enumerate(datas): print(\"---------------&gt;\", data[\"user_info\"]['uid'], data[\"user_info\"]['nickname'], data[\"user_info\"]['short_id'],data[\"user_info\"]['enterprise_verify_reason'],data[\"user_info\"]['signature']) sheet1.write(idx+1, 0, data[\"user_info\"]['uid']) sheet1.write(idx+1, 1, data[\"user_info\"]['short_id']) sheet1.write(idx+1, 2, data[\"user_info\"]['enterprise_verify_reason']) sheet1.write(idx+1, 3, data[\"user_info\"]['signature']) sheet1.write(idx+1, 4, data[\"user_info\"]['nickname']) sheet1.write(idx+1, 5, data[\"user_info\"]['is_phone_binded']) sheet1.write(idx+1, 6, data[\"user_info\"]['bind_phone']) sheet1.write(idx+1, 7, data[\"user_info\"]['birthday'])book.save('simpleExcel.xls') douyin.jsondataType\": \"search\", \"appCode\": \"dyUserSearch\", \"version\": \"1.0\", \"retcode\": \"0000\", \"hasNext\": true, \"page\": \"2\", \"data\": [ &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAAk8gDNi_Q1YlD6zthCWuXHrzlo94XFVEJMOxzW5SkkI0\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 2, \"twitter_id\": \"\", \"favoriting_count\": 1755, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"207377702\", \"enterprise_verify_reason\": \"杭州市江干区奕菲服饰店\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p9-dy.byteimg.com/img/mosaic-legacy/283d00004bb9768fc0da5~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/283d00004bb9768fc0da5~168x168.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/283d00004bb9768fc0da5~168x168.webp\" ], \"width\": 720, \"uri\": \"283d00004bb9768fc0da5\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 1, \"is_block\": false, \"signature\": \"感谢大家关注，搭配私信哦\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"86539783588\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"奕菲童装\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/obj/553700317bbd723b23e2\", \"https://p1-dy.byteimg.com/obj/553700317bbd723b23e2\", \"https://p3-dy.byteimg.com/obj/553700317bbd723b23e2\" ], \"width\": 720, \"uri\": \"553700317bbd723b23e2\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/100x100/283d00004bb9768fc0da5.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/283d00004bb9768fc0da5.jpeg\", \"https://p3-dy.byteimg.com/aweme/100x100/283d00004bb9768fc0da5.jpeg\" ], \"width\": 720, \"uri\": \"283d00004bb9768fc0da5\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"283d00004bb9768fc0da5\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 342739, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"207377702\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 210, \"share_qrcode_uri\": \"553700317bbd723b23e2\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1988-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/720x720/283d00004bb9768fc0da5.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/283d00004bb9768fc0da5.jpeg\", \"https://p3-dy.byteimg.com/aweme/720x720/283d00004bb9768fc0da5.jpeg\" ], \"width\": 720, \"uri\": \"283d00004bb9768fc0da5\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 89259, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/1080x1080/283d00004bb9768fc0da5.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/283d00004bb9768fc0da5.jpeg\", \"https://p3-dy.byteimg.com/aweme/1080x1080/283d00004bb9768fc0da5.jpeg\" ], \"width\": 720, \"uri\": \"283d00004bb9768fc0da5\", \"height\": 720 &#125;, \"aweme_count\": 379, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p9-dy.byteimg.com/img/mosaic-legacy/283d00004bb9768fc0da5~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/283d00004bb9768fc0da5~300x300.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/283d00004bb9768fc0da5~300x300.webp\" ], \"width\": 720, \"uri\": \"283d00004bb9768fc0da5\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAAa4LdoOKtHwYQgK-QfuW_FNUMtFDgOVuhcmBFuD8Ct8I\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 8, \"twitter_id\": \"\", \"favoriting_count\": 2666, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"334823500\", \"enterprise_verify_reason\": \"\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p1-dy.byteimg.com/img/mosaic-legacy/2d4bd00001eaa01d52860~168x168.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/2d4bd00001eaa01d52860~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/2d4bd00001eaa01d52860~168x168.webp\" ], \"width\": 720, \"uri\": \"2d4bd00001eaa01d52860\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 2, \"is_block\": false, \"signature\": \"每天更新，谢谢关注哦\", \"story_open\": false, \"with_fusion_shop_entry\": true, \"secret\": 0, \"uid\": \"62817693520\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"豆豆家童装\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/obj/5fdf000458442a1367a9\", \"https://p1-dy.byteimg.com/obj/5fdf000458442a1367a9\", \"https://p3-dy.byteimg.com/obj/5fdf000458442a1367a9\" ], \"width\": 720, \"uri\": \"5fdf000458442a1367a9\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/100x100/2d4bd00001eaa01d52860.jpeg\", \"https://p3-dy.byteimg.com/aweme/100x100/2d4bd00001eaa01d52860.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/2d4bd00001eaa01d52860.jpeg\" ], \"width\": 720, \"uri\": \"2d4bd00001eaa01d52860\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"2d4bd00001eaa01d52860\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 0, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 875493, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"334823500\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 1183, \"share_qrcode_uri\": \"5fdf000458442a1367a9\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1989-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/720x720/2d4bd00001eaa01d52860.jpeg\", \"https://p3-dy.byteimg.com/aweme/720x720/2d4bd00001eaa01d52860.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/2d4bd00001eaa01d52860.jpeg\" ], \"width\": 720, \"uri\": \"2d4bd00001eaa01d52860\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 151158, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/1080x1080/2d4bd00001eaa01d52860.jpeg\", \"https://p3-dy.byteimg.com/aweme/1080x1080/2d4bd00001eaa01d52860.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/2d4bd00001eaa01d52860.jpeg\" ], \"width\": 720, \"uri\": \"2d4bd00001eaa01d52860\", \"height\": 720 &#125;, \"aweme_count\": 80, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p1-dy.byteimg.com/img/mosaic-legacy/2d4bd00001eaa01d52860~300x300.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/2d4bd00001eaa01d52860~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/2d4bd00001eaa01d52860~300x300.webp\" ], \"width\": 720, \"uri\": \"2d4bd00001eaa01d52860\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 3, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAArkhmaouVG1NKE6Jm89Ambp5UHvq6WIh3rp-owSPu97g\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 0, \"twitter_id\": \"\", \"favoriting_count\": 116, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"2217914777\", \"enterprise_verify_reason\": \"广州市喔也服饰有限公司\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p1-dy.byteimg.com/img/mosaic-legacy/1e1a1000431751465fa57~168x168.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/1e1a1000431751465fa57~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/1e1a1000431751465fa57~168x168.webp\" ], \"width\": 720, \"uri\": \"1e1a1000431751465fa57\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 0, \"is_block\": false, \"signature\": \"每天爱你三千遍\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"105159231977\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"喔也童装\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/1cb790005c95f687456f7\", \"https://p9-dy.byteimg.com/obj/1cb790005c95f687456f7\", \"https://p1-dy.byteimg.com/obj/1cb790005c95f687456f7\" ], \"width\": 720, \"uri\": \"1cb790005c95f687456f7\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/100x100/1e1a1000431751465fa57.jpeg\", \"https://p3-dy.byteimg.com/aweme/100x100/1e1a1000431751465fa57.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/1e1a1000431751465fa57.jpeg\" ], \"width\": 720, \"uri\": \"1e1a1000431751465fa57\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"1e1a1000431751465fa57\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 453955, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"2217914777\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 7, \"share_qrcode_uri\": \"1cb790005c95f687456f7\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/720x720/1e1a1000431751465fa57.jpeg\", \"https://p3-dy.byteimg.com/aweme/720x720/1e1a1000431751465fa57.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/1e1a1000431751465fa57.jpeg\" ], \"width\": 720, \"uri\": \"1e1a1000431751465fa57\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 129293, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/1080x1080/1e1a1000431751465fa57.jpeg\", \"https://p3-dy.byteimg.com/aweme/1080x1080/1e1a1000431751465fa57.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/1e1a1000431751465fa57.jpeg\" ], \"width\": 720, \"uri\": \"1e1a1000431751465fa57\", \"height\": 720 &#125;, \"aweme_count\": 36, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p1-dy.byteimg.com/img/mosaic-legacy/1e1a1000431751465fa57~300x300.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/1e1a1000431751465fa57~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/1e1a1000431751465fa57~300x300.webp\" ], \"width\": 720, \"uri\": \"1e1a1000431751465fa57\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAAKq1wxfasPWPOt_WJvSFR3Ssq6mKcP4t-FEqBpkc9QkI\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 2, \"twitter_id\": \"\", \"favoriting_count\": 193, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"1808102005\", \"enterprise_verify_reason\": \"兰群童装官方账号\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/fbe60000557dca6f4928~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/fbe60000557dca6f4928~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/fbe60000557dca6f4928~168x168.webp\" ], \"width\": 720, \"uri\": \"fbe60000557dca6f4928\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 1, \"is_block\": false, \"signature\": \"专注童装，原创设计\", \"story_open\": false, \"with_fusion_shop_entry\": true, \"secret\": 0, \"uid\": \"97056216207\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"兰群童装\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/obj/f9db000ba7a8e94d47e8\", \"https://p1-dy.byteimg.com/obj/f9db000ba7a8e94d47e8\", \"https://p3-dy.byteimg.com/obj/f9db000ba7a8e94d47e8\" ], \"width\": 720, \"uri\": \"f9db000ba7a8e94d47e8\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/100x100/fbe60000557dca6f4928.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/fbe60000557dca6f4928.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/fbe60000557dca6f4928.jpeg\" ], \"width\": 720, \"uri\": \"fbe60000557dca6f4928\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"fbe60000557dca6f4928\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 526726, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"1808102005\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 19, \"share_qrcode_uri\": \"f9db000ba7a8e94d47e8\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1995-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/720x720/fbe60000557dca6f4928.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/fbe60000557dca6f4928.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/fbe60000557dca6f4928.jpeg\" ], \"width\": 720, \"uri\": \"fbe60000557dca6f4928\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 150192, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/1080x1080/fbe60000557dca6f4928.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/fbe60000557dca6f4928.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/fbe60000557dca6f4928.jpeg\" ], \"width\": 720, \"uri\": \"fbe60000557dca6f4928\", \"height\": 720 &#125;, \"aweme_count\": 92, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/fbe60000557dca6f4928~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/fbe60000557dca6f4928~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/fbe60000557dca6f4928~300x300.webp\" ], \"width\": 720, \"uri\": \"fbe60000557dca6f4928\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAAR2vFk4kT8n6sI9lYPQs3IbCv5lqnwbf0fdavWzFwRsfMi67JebDuB-mwjedmzie3\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 2, \"twitter_id\": \"\", \"favoriting_count\": 4805, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"2314166522\", \"enterprise_verify_reason\": \"萌萌童装店官方账号\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/26ee300049de3fa24b262~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/26ee300049de3fa24b262~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/26ee300049de3fa24b262~168x168.webp\" ], \"width\": 720, \"uri\": \"26ee300049de3fa24b262\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 2, \"is_block\": false, \"signature\": \"\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"3935841712875220\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"萌萌童装店\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/obj/283190000fd71a27c1a94\", \"https://p3-dy.byteimg.com/obj/283190000fd71a27c1a94\", \"https://p9-dy.byteimg.com/obj/283190000fd71a27c1a94\" ], \"width\": 720, \"uri\": \"283190000fd71a27c1a94\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/100x100/26ee300049de3fa24b262.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/26ee300049de3fa24b262.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/26ee300049de3fa24b262.jpeg\" ], \"width\": 720, \"uri\": \"26ee300049de3fa24b262\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"26ee300049de3fa24b262\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 36825, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"dylzp33td47c\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 718, \"share_qrcode_uri\": \"283190000fd71a27c1a94\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1990-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/720x720/26ee300049de3fa24b262.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/26ee300049de3fa24b262.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/26ee300049de3fa24b262.jpeg\" ], \"width\": 720, \"uri\": \"26ee300049de3fa24b262\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 35609, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/1080x1080/26ee300049de3fa24b262.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/26ee300049de3fa24b262.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/26ee300049de3fa24b262.jpeg\" ], \"width\": 720, \"uri\": \"26ee300049de3fa24b262\", \"height\": 720 &#125;, \"aweme_count\": 137, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/26ee300049de3fa24b262~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/26ee300049de3fa24b262~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/26ee300049de3fa24b262~300x300.webp\" ], \"width\": 720, \"uri\": \"26ee300049de3fa24b262\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAABfm80S6EKhu2gH6NsOSDQYJZbdMJGxjX2DIpruw8Ni4\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 0, \"twitter_id\": \"\", \"favoriting_count\": 283, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"618186446\", \"enterprise_verify_reason\": \"\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p9-dy.byteimg.com/img/mosaic-legacy/285d70000ac95fc91ec27~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/285d70000ac95fc91ec27~168x168.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/285d70000ac95fc91ec27~168x168.webp\" ], \"width\": 720, \"uri\": \"285d70000ac95fc91ec27\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 2, \"is_block\": false, \"signature\": \"支持全年调换货，零库存\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"92386641390\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"童装批发\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/7292000eab84aeeca6b3\", \"https://p9-dy.byteimg.com/obj/7292000eab84aeeca6b3\", \"https://p1-dy.byteimg.com/obj/7292000eab84aeeca6b3\" ], \"width\": 720, \"uri\": \"7292000eab84aeeca6b3\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/100x100/285d70000ac95fc91ec27.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/285d70000ac95fc91ec27.jpeg\", \"https://p3-dy.byteimg.com/aweme/100x100/285d70000ac95fc91ec27.jpeg\" ], \"width\": 720, \"uri\": \"285d70000ac95fc91ec27\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"285d70000ac95fc91ec27\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 0, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 939, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"618186446\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 216, \"share_qrcode_uri\": \"7292000eab84aeeca6b3\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/720x720/285d70000ac95fc91ec27.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/285d70000ac95fc91ec27.jpeg\", \"https://p3-dy.byteimg.com/aweme/720x720/285d70000ac95fc91ec27.jpeg\" ], \"width\": 720, \"uri\": \"285d70000ac95fc91ec27\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 20623, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/1080x1080/285d70000ac95fc91ec27.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/285d70000ac95fc91ec27.jpeg\", \"https://p3-dy.byteimg.com/aweme/1080x1080/285d70000ac95fc91ec27.jpeg\" ], \"width\": 720, \"uri\": \"285d70000ac95fc91ec27\", \"height\": 720 &#125;, \"aweme_count\": 179, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p9-dy.byteimg.com/img/mosaic-legacy/285d70000ac95fc91ec27~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/285d70000ac95fc91ec27~300x300.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/285d70000ac95fc91ec27~300x300.webp\" ], \"width\": 720, \"uri\": \"285d70000ac95fc91ec27\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAA6mEssQiK9TG3TwLm0H1HDFdW7oscVLWoQbJdNzxtxc4\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 2, \"twitter_id\": \"\", \"favoriting_count\": 250, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"1968490136\", \"enterprise_verify_reason\": \"晶晶货源童装店官方账号\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p1-dy.byteimg.com/img/mosaic-legacy/fdfa0000004953782b70~168x168.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/fdfa0000004953782b70~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/fdfa0000004953782b70~168x168.webp\" ], \"width\": 720, \"uri\": \"fdfa0000004953782b70\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 2, \"is_block\": false, \"signature\": \"爱跑档口的小可爱😊\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"107670156220\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"晶晶童装店\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/obj/fd900001ee04772ef0af\", \"https://p3-dy.byteimg.com/obj/fd900001ee04772ef0af\", \"https://p9-dy.byteimg.com/obj/fd900001ee04772ef0af\" ], \"width\": 720, \"uri\": \"fd900001ee04772ef0af\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/100x100/fdfa0000004953782b70.jpeg\", \"https://p3-dy.byteimg.com/aweme/100x100/fdfa0000004953782b70.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/fdfa0000004953782b70.jpeg\" ], \"width\": 720, \"uri\": \"fdfa0000004953782b70\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"fdfa0000004953782b70\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 122537, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"dym4ivicknfh\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 4, \"share_qrcode_uri\": \"fd900001ee04772ef0af\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1995-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/720x720/fdfa0000004953782b70.jpeg\", \"https://p3-dy.byteimg.com/aweme/720x720/fdfa0000004953782b70.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/fdfa0000004953782b70.jpeg\" ], \"width\": 720, \"uri\": \"fdfa0000004953782b70\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 68847, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/aweme/1080x1080/fdfa0000004953782b70.jpeg\", \"https://p3-dy.byteimg.com/aweme/1080x1080/fdfa0000004953782b70.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/fdfa0000004953782b70.jpeg\" ], \"width\": 720, \"uri\": \"fdfa0000004953782b70\", \"height\": 720 &#125;, \"aweme_count\": 520, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p1-dy.byteimg.com/img/mosaic-legacy/fdfa0000004953782b70~300x300.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/fdfa0000004953782b70~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/fdfa0000004953782b70~300x300.webp\" ], \"width\": 720, \"uri\": \"fdfa0000004953782b70\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAAV3CxZokDbhgdnX_FuxLEZFnU6Y8p18EpHrC5XnzW10Q\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 5, \"twitter_id\": \"\", \"favoriting_count\": 963, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"128412756\", \"enterprise_verify_reason\": \"\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/18b2400028dd311591649~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/18b2400028dd311591649~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/18b2400028dd311591649~168x168.webp\" ], \"width\": 720, \"uri\": \"18b2400028dd311591649\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 2, \"is_block\": false, \"signature\": \"努力到无能为力……拼搏到感动自己\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"73464989023\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"童装\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/49ee0016a885acaa0fb1\", \"https://p9-dy.byteimg.com/obj/49ee0016a885acaa0fb1\", \"https://p1-dy.byteimg.com/obj/49ee0016a885acaa0fb1\" ], \"width\": 720, \"uri\": \"49ee0016a885acaa0fb1\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/100x100/18b2400028dd311591649.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/18b2400028dd311591649.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/18b2400028dd311591649.jpeg\" ], \"width\": 720, \"uri\": \"18b2400028dd311591649\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"18b2400028dd311591649\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 0, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 2215, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"128412756\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 404, \"share_qrcode_uri\": \"49ee0016a885acaa0fb1\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1990-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/720x720/18b2400028dd311591649.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/18b2400028dd311591649.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/18b2400028dd311591649.jpeg\" ], \"width\": 720, \"uri\": \"18b2400028dd311591649\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 1395, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/1080x1080/18b2400028dd311591649.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/18b2400028dd311591649.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/18b2400028dd311591649.jpeg\" ], \"width\": 720, \"uri\": \"18b2400028dd311591649\", \"height\": 720 &#125;, \"aweme_count\": 249, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/18b2400028dd311591649~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/18b2400028dd311591649~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/18b2400028dd311591649~300x300.webp\" ], \"width\": 720, \"uri\": \"18b2400028dd311591649\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAANny66GJih4v8N2qzrj7WI6VoE6LfVnqieBU59-ycR-A\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 8, \"twitter_id\": \"\", \"favoriting_count\": 7269, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"1504184293\", \"enterprise_verify_reason\": \"繁璎珞童装店官方账号\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/26d5300009b1c9576deaf~168x168.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/26d5300009b1c9576deaf~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/26d5300009b1c9576deaf~168x168.webp\" ], \"width\": 720, \"uri\": \"26d5300009b1c9576deaf\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 0, \"is_block\": false, \"signature\": \"喜欢童装吗 不耽误带娃，在家做\\n不要相信除了作者以外的评论私信回复，以防受骗，本人只有一个抖音号，如果等不及我回复可以看主页\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"96744779196\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"璎珞童装店\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/be13000d44614fff22b1\", \"https://p9-dy.byteimg.com/obj/be13000d44614fff22b1\", \"https://p1-dy.byteimg.com/obj/be13000d44614fff22b1\" ], \"width\": 720, \"uri\": \"be13000d44614fff22b1\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/100x100/26d5300009b1c9576deaf.jpeg\", \"https://p9-dy.byteimg.com/aweme/100x100/26d5300009b1c9576deaf.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/26d5300009b1c9576deaf.jpeg\" ], \"width\": 720, \"uri\": \"26d5300009b1c9576deaf\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"26d5300009b1c9576deaf\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 67719, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"M1692119576\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 616, \"share_qrcode_uri\": \"be13000d44614fff22b1\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"1993-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/720x720/26d5300009b1c9576deaf.jpeg\", \"https://p9-dy.byteimg.com/aweme/720x720/26d5300009b1c9576deaf.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/26d5300009b1c9576deaf.jpeg\" ], \"width\": 720, \"uri\": \"26d5300009b1c9576deaf\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 24827, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/aweme/1080x1080/26d5300009b1c9576deaf.jpeg\", \"https://p9-dy.byteimg.com/aweme/1080x1080/26d5300009b1c9576deaf.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/26d5300009b1c9576deaf.jpeg\" ], \"width\": 720, \"uri\": \"26d5300009b1c9576deaf\", \"height\": 720 &#125;, \"aweme_count\": 595, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p3-dy.byteimg.com/img/mosaic-legacy/26d5300009b1c9576deaf~300x300.webp\", \"http://p9-dy.byteimg.com/img/mosaic-legacy/26d5300009b1c9576deaf~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/26d5300009b1c9576deaf~300x300.webp\" ], \"width\": 720, \"uri\": \"26d5300009b1c9576deaf\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125;, &#123; \"user_info\": &#123; \"weibo_url\": \"\", \"shield_follow_notice\": 0, \"sec_uid\": \"MS4wLjABAAAAdckUzRlG2Xbv4-FFssd2UmTZqJvLtMuaz4dF-7jbPfs\", \"comment_filter_status\": 0, \"school_type\": 0, \"follow_status\": 0, \"hide_location\": false, \"account_region\": \"\", \"has_orders\": false, \"has_youtube_token\": false, \"twitter_name\": \"\", \"constellation\": 10, \"twitter_id\": \"\", \"favoriting_count\": 11, \"is_phone_binded\": false, \"shield_comment_notice\": 0, \"with_commerce_entry\": false, \"user_canceled\": false, \"download_prompt_ts\": 0, \"short_id\": \"1647005791\", \"enterprise_verify_reason\": \"满衣童装官方账号\", \"video_icon\": &#123; \"url_list\": [], \"width\": 720, \"uri\": \"\", \"height\": 720 &#125;, \"sync_to_toutiao\": 0, \"avatar_168x168\": &#123; \"url_list\": [ \"http://p9-dy.byteimg.com/img/mosaic-legacy/fa660005f917db4b577d~168x168.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/fa660005f917db4b577d~168x168.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/fa660005f917db4b577d~168x168.webp\" ], \"width\": 720, \"uri\": \"fa660005f917db4b577d\", \"height\": 720 &#125;, \"status\": 1, \"hide_search\": false, \"gender\": 1, \"is_block\": false, \"signature\": \"🍺两分钟吃完？！\", \"story_open\": false, \"with_fusion_shop_entry\": false, \"secret\": 0, \"uid\": \"94381190944\", \"google_account\": \"\", \"has_unread_story\": false, \"has_insights\": false, \"nickname\": \"满衣童装\", \"has_facebook_token\": false, \"comment_setting\": 0, \"is_star\": false, \"fb_expire_time\": 0, \"unique_id_modify_time\": 1568859769, \"is_ad_fake\": false, \"youtube_channel_id\": \"\", \"share_info\": &#123; \"share_title_myself\": \"\", \"share_title_other\": \"\", \"share_qrcode_url\": &#123; \"url_list\": [ \"https://p3-dy.byteimg.com/obj/db9400009f59ac774f05\", \"https://p9-dy.byteimg.com/obj/db9400009f59ac774f05\", \"https://p1-dy.byteimg.com/obj/db9400009f59ac774f05\" ], \"width\": 720, \"uri\": \"db9400009f59ac774f05\", \"height\": 720 &#125;, \"share_title\": \"\", \"share_url\": \"\", \"share_desc\": \"\", \"share_weibo_desc\": \"\" &#125;, \"is_discipline_member\": false, \"avatar_thumb\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/100x100/fa660005f917db4b577d.jpeg\", \"https://p1-dy.byteimg.com/aweme/100x100/fa660005f917db4b577d.jpeg\", \"https://p3-dy.byteimg.com/aweme/100x100/fa660005f917db4b577d.jpeg\" ], \"width\": 720, \"uri\": \"fa660005f917db4b577d\", \"height\": 720 &#125;, \"school_name\": \"\", \"is_verified\": true, \"special_lock\": 1, \"verify_info\": \"\", \"reflow_page_uid\": 0, \"has_twitter_token\": false, \"avatar_uri\": \"fa660005f917db4b577d\", \"ins_id\": \"\", \"accept_private_policy\": false, \"original_musician\": &#123; \"music_count\": 0, \"digg_count\": 0, \"music_used_count\": 0 &#125;, \"prevent_download\": false, \"apple_account\": 0, \"download_setting\": -1, \"commerce_user_level\": 1, \"language\": \"zh-Hans\", \"is_binded_weibo\": false, \"school_poi_id\": \"\", \"total_favorited\": 248992, \"authority_status\": 0, \"neiguang_shield\": 0, \"live_verify\": 0, \"live_agreement\": 0, \"unique_id\": \"1647005791\", \"create_time\": 0, \"tw_expire_time\": 0, \"user_period\": 0, \"follower_status\": 0, \"user_mode\": 0, \"following_count\": 151, \"share_qrcode_uri\": \"db9400009f59ac774f05\", \"bind_phone\": \"\", \"region\": \"CN\", \"geofencing\": [], \"birthday\": \"2009-01-01\", \"room_id\": 0, \"avatar_medium\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/720x720/fa660005f917db4b577d.jpeg\", \"https://p1-dy.byteimg.com/aweme/720x720/fa660005f917db4b577d.jpeg\", \"https://p3-dy.byteimg.com/aweme/720x720/fa660005f917db4b577d.jpeg\" ], \"width\": 720, \"uri\": \"fa660005f917db4b577d\", \"height\": 720 &#125;, \"live_agreement_time\": 0, \"duet_setting\": 0, \"cv_level\": \"\", \"is_gov_media_vip\": false, \"live_commerce\": false, \"weibo_schema\": \"\", \"follower_count\": 65152, \"story_count\": 0, \"avatar_larger\": &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/aweme/1080x1080/fa660005f917db4b577d.jpeg\", \"https://p1-dy.byteimg.com/aweme/1080x1080/fa660005f917db4b577d.jpeg\", \"https://p3-dy.byteimg.com/aweme/1080x1080/fa660005f917db4b577d.jpeg\" ], \"width\": 720, \"uri\": \"fa660005f917db4b577d\", \"height\": 720 &#125;, \"aweme_count\": 67, \"avatar_300x300\": &#123; \"url_list\": [ \"http://p9-dy.byteimg.com/img/mosaic-legacy/fa660005f917db4b577d~300x300.webp\", \"http://p1-dy.byteimg.com/img/mosaic-legacy/fa660005f917db4b577d~300x300.webp\", \"http://p3-dy.byteimg.com/img/mosaic-legacy/fa660005f917db4b577d~300x300.webp\" ], \"width\": 720, \"uri\": \"fa660005f917db4b577d\", \"height\": 720 &#125;, \"show_image_bubble\": false, \"has_email\": false, \"cover_url\": [ &#123; \"url_list\": [ \"https://p9-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p1-dy.byteimg.com/obj/c8510002be9a3a61aad2\", \"https://p3-dy.byteimg.com/obj/c8510002be9a3a61aad2\" ], \"width\": 720, \"uri\": \"c8510002be9a3a61aad2\", \"height\": 720 &#125; ], \"weibo_verify\": \"\", \"youtube_channel_title\": \"\", \"verification_type\": 1, \"user_rate\": 1, \"with_dou_entry\": false, \"need_recommend\": 0, \"shield_digg_notice\": 0, \"location\": \"\", \"custom_verify\": \"\", \"weibo_name\": \"\", \"reflow_page_gid\": 0, \"react_setting\": 0 &#125; &#125; ]&#125;","categories":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/categories/python/"}],"tags":[{"name":"excel","slug":"excel","permalink":"https://tfssweb.github.io/tags/excel/"},{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/tags/python/"},{"name":"json","slug":"json","permalink":"https://tfssweb.github.io/tags/json/"}]},{"title":"常用compose汇总","slug":"常用compose汇总","date":"2018-11-27T14:10:23.000Z","updated":"2019-09-25T06:56:45.207Z","comments":true,"path":"2018/11/27/常用compose汇总/","link":"","permalink":"https://tfssweb.github.io/2018/11/27/常用compose汇总/","excerpt":"常用的一些compose，作为临时测试使用的应用","text":"常用的一些compose，作为临时测试使用的应用 Springboot常用配置123456789101112131415161718192021222324252627version: '3'services: cloud-demo: container_name: cloud-demo hostname: cloud-demo image: cloud-demo build: context: . dockerfile: Dockerfile restart: always ports: - 8090:8090 networks: - cloud-net environment: TZ: 'Asia/Shanghai' SPRING_PROFILES_ACTIVE: dev logging: driver: json-file options: max-file: '3' max-size: 100m# 该网络依赖于Cloud组件项目networks: cloud-net: external: true MySQL1234567891011121314151617181920212223version: '3.0'services: mysql: image: mysql:5.7 container_name: mysql# build:# context: .# dockerfile: Dockerfile.mysql hostname: mysql privileged: true restart: always ports: - 3306:3306/tcp environment: - MYSQL_ROOT_PASSWORD=root volumes: - ./data/mysql:/var/lib/mysql - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100m Redis123456789101112131415161718version: '3.0'services: redis: image: redis:4.0.6 container_name: redis hostname: redis privileged: true restart: always ports: - 6379:6379/tcp volumes: - ./data/redis:/data:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100m MySQL+Redis12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849version: '3.0'services: mysql: image: mysql:5.7 container_name: mysql# build:# context: .# dockerfile: Dockerfile.mysql hostname: mysql privileged: true restart: always ports: - 3306:3306/tcp networks: mysql_redis: aliases: - mysql environment: - MYSQL_ROOT_PASSWORD=root volumes: - ./data/mysql:/var/lib/mysql - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100m redis: image: redis:4.0.6 container_name: redis hostname: redis privileged: true restart: always ports: - 6379:6379/tcp networks: mysql_redis: aliases: - redis volumes: - ./data/redis:/data:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100mnetworks: mysql_redis:","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"compose","slug":"compose","permalink":"https://tfssweb.github.io/tags/compose/"}]},{"title":"Clickhouse常用命令","slug":"Clickhouse常用命令","date":"2018-11-11T13:02:12.000Z","updated":"2019-09-20T12:40:06.808Z","comments":true,"path":"2018/11/11/Clickhouse常用命令/","link":"","permalink":"https://tfssweb.github.io/2018/11/11/Clickhouse常用命令/","excerpt":"数据迁移123set max_partitions_per_insert_block=10000insert into from_db.from_table select * from remote(&apos;177.12.12.13&apos;,to_db.to_table,&apos;default&apos;,&apos;xxxxx&apos;);","text":"数据迁移123set max_partitions_per_insert_block=10000insert into from_db.from_table select * from remote(&apos;177.12.12.13&apos;,to_db.to_table,&apos;default&apos;,&apos;xxxxx&apos;);","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"sql","slug":"sql","permalink":"https://tfssweb.github.io/tags/sql/"},{"name":"clickhouse","slug":"clickhouse","permalink":"https://tfssweb.github.io/tags/clickhouse/"}]},{"title":"Python安装脚本","slug":"Python安装脚本","date":"2018-11-02T06:11:23.000Z","updated":"2019-09-25T06:16:18.186Z","comments":true,"path":"2018/11/02/Python安装脚本/","link":"","permalink":"https://tfssweb.github.io/2018/11/02/Python安装脚本/","excerpt":"Python安装脚本","text":"Python安装脚本 安装依赖12yum install -y gcc zlib zlib-devel openssl-devel sqlite3-develyum install -y sqlite-devel 安装pip、pip3、pipenv12345678910111213141516171819## 安装pipyum install -y epel-release python-pip## 安装pip3yum install -y epel-releaseyum clean allyum makecacheyum install -y python34-setuptoolseasy_install-3.4 pip## 安装pipenvpip install pipenv## pipenv使用pipenv --threepipenv shellpipenv install --skip-lockpipenv graphpipenv run python &lt;脚本&gt; 安装Python1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#!/usr/bin/python#coding:utf-8'''author: tfsse-mail: 1255791430@qq.comdesc: python自动化安装用户指定版本的python环境:2.7或者3.6'''#导入Python的系统编程操作模块import os#导入用来处理Python运行时配置以及资源，与前当程序之外的系统环境交互的模块import sys#判断当前用户是否是root用户if os.getuid() == 0: passelse: print 'Not under root mode, please switch user!' sys.exit(1)#获取用户输入的python安装版本version = raw_input('Please input wanted python version(2.7/3.6)')#如果嫌官网下载速度太慢可以指定python3.6.5的链接地址为本人上传资源地址#根据用户输入的python版本选择源码包下载地址if version == '2.7': package_version = 'Python-2.7.13' url = 'https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz'elif version == '3.6': package_version = 'Python-3.6.5' url = 'https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz'else: print 'Please input given version number(2.7/3.6)' sys.exit(1)#拼接源码包下载地址并执行下载命令cmd = 'wget ' + urlpackage_tgz = package_version + '.tgz'if os.path.exists(package_tgz) != True: res = os.system(cmd) if res != 0 : print 'Failed to download python source package, please inspect your network!' sys.exit(1)if os.path.exists(package_version) != True: #解压下载的源码包 cmd = 'tar zxvf ' + package_tgz res = os.system(cmd) #如果解压失败则删除下载的源码包并且提示用户重新执行脚本 if res != 0: os.system('rm -rf ' + package_tgz) print 'Please reexcute the script to install python' sys.exit(1)#解压成功则进入解压后的源码目录中依次执行配置、编译、安装过程cmd = 'cd ' + package_version + ' &amp;&amp; ./configure --prefix=/usr/local/python &amp;&amp; make &amp;&amp; make install'res = os.system(cmd)#安装失败则提示用户安装失败了，让用户检查环境依赖if res != 0: print 'Failed to install python, please inspect dependencies for python install!' sys.exit(1)# 创建软连接if version == '2.7': print(\"版本为2.7，不需要配置软连接！\")else: cmd = 'ln -s /usr/local/python/bin/python3.6 /usr/local/bin/python3' res = os.system(cmd) if res != 0: print '软连接失败，请手动软连(ln -s /usr/local/python/bin/python3.6 /usr/bin/local/python3)' sys.exit(1)","categories":[{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/categories/python/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"python","slug":"python","permalink":"https://tfssweb.github.io/tags/python/"},{"name":"centos","slug":"centos","permalink":"https://tfssweb.github.io/tags/centos/"}]},{"title":"Spring Boot集成swagger2","slug":"Spring Boot集成swagger2","date":"2018-11-01T14:09:09.000Z","updated":"2019-09-03T03:15:14.024Z","comments":true,"path":"2018/11/01/Spring Boot集成swagger2/","link":"","permalink":"https://tfssweb.github.io/2018/11/01/Spring Boot集成swagger2/","excerpt":"Spring Boot集成swagger2","text":"Spring Boot集成swagger2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;@Configuration@EnableSwagger2@ConditionalOnExpression(&quot;$&#123;swagger.enable: true &#125;&quot;)public class SwaggerConfig &#123; public static final String SWAGGER_SCAN_BASE_PACKAGE = &quot;com.xxx.controller&quot;; /** * buildDocket() 用于创建 Docket 的 Bean， * buildApiInfo() 创建 Api 的基本信息，用于显示在文档页面上。 * select() 函数返回一个 `ApiSelectorBuilder` 实例，用来控制哪些接口暴露给 Swagger2 来展现。 * 一般采用指定扫描的包路径来定义，本例中 Swagger 会扫描 controller 包下所有定义的API， * 并产生文档内容（除了被 @ApiIgnore 指定的请求）。 * @return */ @Bean public Docket buildDocket() &#123; Docket docket = new Docket(DocumentationType.SWAGGER_2).apiInfo(buildApiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(SWAGGER_SCAN_BASE_PACKAGE)) .paths(PathSelectors.any()) .build(); return docket; &#125; private Contact contact() &#123; return new Contact(&quot;xxx系统&quot;,&quot;http://xxx.xxx.xxx.xxx:xxxx&quot;, &quot;1255791430@qq.com&quot;); &#125; private ApiInfo buildApiInfo() &#123; return new ApiInfoBuilder() .title(&quot;xx APIS&quot;) .description(&quot;xx接口信息&quot;) .version(&quot;1.0.0&quot;) .contact(contact()) .build(); &#125;&#125; 正文 图片引入","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://tfssweb.github.io/tags/springboot/"},{"name":"swagger","slug":"swagger","permalink":"https://tfssweb.github.io/tags/swagger/"}]},{"title":"MybatisGenerator自动生成代码","slug":"MybatisGenerator自动生成代码","date":"2018-09-02T10:10:23.000Z","updated":"2019-09-03T03:24:49.971Z","comments":true,"path":"2018/09/02/MybatisGenerator自动生成代码/","link":"","permalink":"https://tfssweb.github.io/2018/09/02/MybatisGenerator自动生成代码/","excerpt":"自动生成Dao层代码。","text":"自动生成Dao层代码。 添加配置文件12345678910111213141516171819202122232425262728 &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.0.0&lt;/version&gt; &lt;/dependency&gt;&lt;!--mybatis自动生成代码插件--&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;!--允许移动生成的文件 --&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;!-- 是否覆盖，true表示会替换生成的JAVA文件，false则不覆盖 --&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;!-- 自动生成的配置 --&gt; &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt; &lt;/configuration&gt; &lt;dependencies&gt; &lt;!--mysql驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.45&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; 配置 generatorConfig.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot; &gt;&lt;generatorConfiguration&gt; &lt;!-- 一个数据库一个context --&gt; &lt;context id=&quot;infoGuardian&quot;&gt; &lt;!-- 控制实体类生成toString()方法 --&gt; &lt;plugin type=&quot;org.mybatis.generator.plugins.ToStringPlugin&quot; /&gt; &lt;!-- 注释 --&gt; &lt;commentGenerator &gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot;/&gt;&lt;!-- 是否取消注释 --&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;false&quot; /&gt; &lt;!-- 是否生成注释代时间戳--&gt; &lt;/commentGenerator&gt; &lt;!-- jdbc连接 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://172.0.0.1:3306/db_demo?useSSL=false&quot; userId=&quot;root&quot; password=&quot;root&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- 类型转换 --&gt; &lt;javaTypeResolver&gt; &lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成实体类地址 --&gt; &lt;javaModelGenerator targetPackage=&quot;com.demo.model&quot; targetProject=&quot;src/main/java&quot; &gt; &lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;!-- 是否针对string类型的字段在set的时候进行trim调用 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成sqlmapxml文件 --&gt; &lt;sqlMapGenerator targetPackage=&quot;generator&quot; targetProject=&quot;src/main/resources/mapper&quot; &gt; &lt;!-- 是否在当前路径下新加一层schema,eg：fase路径$&#123;sqlMapTargetPackage&#125;， true:$&#123;sqlMapTargetPackage&#125;.[schemaName] --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成mapxml对应client，也就是接口dao --&gt; &lt;javaClientGenerator targetPackage=&quot;com.demo.mapper.generator&quot; targetProject=&quot;src/main/java&quot; type=&quot;XMLMAPPER&quot; &gt; &lt;!-- 是否在当前路径下新加一层schema,eg：fase路径$&#123;javaClientTargetPackage&#125;， true:$&#123;javaClientTargetPackage&#125;.[schemaName] --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 配置表信息 --&gt; &lt;!-- &lt;table schema=&quot;$&#123;jdbc_user&#125;&quot; tableName=&quot;s_user&quot; --&gt; &lt;!-- domainObjectName=&quot;UserEntity&quot; enableCountByExample=&quot;false&quot; --&gt; &lt;!-- enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; --&gt; &lt;!-- enableUpdateByExample=&quot;false&quot;&gt; --&gt; &lt;!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 是否生成 example类 --&gt; &lt;!-- 忽略列，不生成bean 字段 --&gt; &lt;!-- &lt;ignoreColumn column=&quot;FRED&quot; /&gt; --&gt; &lt;!-- 指定列的java数据类型 --&gt; &lt;!-- &lt;columnOverride column=&quot;LONG_VARCHAR_FIELD&quot; jdbcType=&quot;VARCHAR&quot; /&gt; --&gt; &lt;!-- &lt;/table&gt; --&gt; &lt;!--&lt;table tableName=&quot;t_admin&quot; domainObjectName=&quot;Admin&quot;/&gt;--&gt;&lt;!-- &lt;table tableName=&quot;ALLTYPES&quot; domainObjectName=&quot;Customer&quot; enableCountByExample=&quot;false&quot;--&gt;&lt;!-- enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot; &gt;--&gt;&lt;!-- &lt;property name=&quot;useActualColumnNames&quot; value=&quot;true&quot;/&gt;--&gt;&lt;!-- &lt;/table&gt;--&gt; &lt;table tableName=&quot;t_menu&quot; domainObjectName=&quot;Menu&quot;/&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; application.yml中添加以下内容123456mybatis: mapper-locations: classpath:mapper/**/*.xml type-aliases-package: com.chinaentropy.netmonitorin.model configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl map-underscore-to-camel-case: true 可以直接在eclipse下执行: 1git clone https://github.com/tfssweb/MybatisGenerator.git 即可运行。","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"mybatis","slug":"mybatis","permalink":"https://tfssweb.github.io/tags/mybatis/"}]},{"title":"Idea常用插件汇总","slug":"Idea常用插件汇总","date":"2018-08-09T14:09:05.000Z","updated":"2019-09-11T09:07:29.709Z","comments":true,"path":"2018/08/09/Idea常用插件汇总/","link":"","permalink":"https://tfssweb.github.io/2018/08/09/Idea常用插件汇总/","excerpt":"Idea插件","text":"Idea插件 括号高亮1HighlightBracketPair Lombok1Lombok Mybatis中mapper互跳1free-mybatis-plugin","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"idea","slug":"idea","permalink":"https://tfssweb.github.io/tags/idea/"}]},{"title":"免费CDN加速","slug":"免费CDN加速","date":"2018-06-26T13:30:00.000Z","updated":"2019-09-03T03:15:14.043Z","comments":true,"path":"2018/06/26/免费CDN加速/","link":"","permalink":"https://tfssweb.github.io/2018/06/26/免费CDN加速/","excerpt":"什么是 CloudFlare CloudFlare 是通过反向代理（reverse proxy）提供网站加速服务，为站长解决了 jpg/JS/CSS 这些静态文件到 CDN 上的问题，并且通过它部署在全球各大洲的缓存结点服务器（详细列表），提供高效的加速服务。","text":"什么是 CloudFlare CloudFlare 是通过反向代理（reverse proxy）提供网站加速服务，为站长解决了 jpg/JS/CSS 这些静态文件到 CDN 上的问题，并且通过它部署在全球各大洲的缓存结点服务器（详细列表），提供高效的加速服务。 CloudFlare 除了基本的把网页的静态文件（jpg/JS/CSS）推送到它的服务器上之外，还提供了详细的网站流量报表，网站攻击的基本防御，JS 和 CSS 文件的自动 minify，以及其他许多方便的功能，并且这些服务都是免费的。 当然 CloudFlare 也有 PRO 收费版，相比免费版 24 小时才能看到报表，PRO 版的报表几乎是实时的，每 15 分钟就有一次统计，PRO 版还提供 SSL 连接等，不过对于普通用户来说，免费版本已经足够用了。这一切，完全免费哦！无限流量！CloudFlare官网CloudFlare配置步骤","categories":[{"name":"网站","slug":"网站","permalink":"https://tfssweb.github.io/categories/网站/"}],"tags":[{"name":"web","slug":"web","permalink":"https://tfssweb.github.io/tags/web/"},{"name":"cdn","slug":"cdn","permalink":"https://tfssweb.github.io/tags/cdn/"},{"name":"加速","slug":"加速","permalink":"https://tfssweb.github.io/tags/加速/"},{"name":"网站","slug":"网站","permalink":"https://tfssweb.github.io/tags/网站/"}]},{"title":"Lombok使用及其技巧说明","slug":"Lombok使用及其技巧说明","date":"2018-06-12T14:30:56.000Z","updated":"2019-09-03T03:15:14.013Z","comments":true,"path":"2018/06/12/Lombok使用及其技巧说明/","link":"","permalink":"https://tfssweb.github.io/2018/06/12/Lombok使用及其技巧说明/","excerpt":"为什么使用lombok还在编写无聊枯燥又难以维护的POJO吗？ 洁癖者的春天在哪里？请看Lombok！在过往的Java项目中，充斥着太多不友好的代码：POJO的getter/setter/toString；异常处理；I/O流的关闭操作等等，这些样板代码既没有技术含量，又影响着代码的美观，Lombok应运而生。首先说明一下：任何技术的出现都是为了解决某一类问题的，如果在此基础上再建立奇技淫巧，不如回归Java本身。应该保持合理使用而不滥用。 Lombok 常用的注解就那么几个，@Data 、@Getter/Setter","text":"为什么使用lombok还在编写无聊枯燥又难以维护的POJO吗？ 洁癖者的春天在哪里？请看Lombok！在过往的Java项目中，充斥着太多不友好的代码：POJO的getter/setter/toString；异常处理；I/O流的关闭操作等等，这些样板代码既没有技术含量，又影响着代码的美观，Lombok应运而生。首先说明一下：任何技术的出现都是为了解决某一类问题的，如果在此基础上再建立奇技淫巧，不如回归Java本身。应该保持合理使用而不滥用。 Lombok 常用的注解就那么几个，@Data 、@Getter/Setter @AllArgsConstructor 替代@Autowired构造注入,多个bean 注入时更加清晰L123456789101112131415161718@Slf4j@Configuration@AllArgsConstructorpublic class RouterFunctionConfiguration &#123; private final HystrixFallbackHandler hystrixFallbackHandler; private final ImageCodeHandler imageCodeHandler;&#125;@Slf4j@Configurationpublic class RouterFunctionConfiguration &#123; @Autowired private HystrixFallbackHandler hystrixFallbackHandler; @Autowired private ImageCodeHandler imageCodeHandler;&#125; @SneakyThrows1234567891011121314151617181920@SneakyThrowsprivate void checkCode(ServerHttpRequest request) &#123; String code = request.getQueryParams().getFirst(&quot;code&quot;); if (StrUtil.isBlank(code)) &#123; throw new ValidateCodeException(&quot;验证码不能为空&quot;); &#125; redisTemplate.delete(key);&#125;// 不使用就要加这个抛出private void checkCode(ServerHttpRequest request) throws ValidateCodeException &#123; String code = request.getQueryParams().getFirst(&quot;code&quot;); if (StrUtil.isBlank(code)) &#123; throw new ValidateCodeException(&quot;验证码不能为空&quot;); &#125;&#125; @UtilityClass 工具类再也不用定义static的方法了，直接就可以Class.Method 使用1234567891011@UtilityClasspublic class Utility &#123; public String getName() &#123; return &quot;name&quot;; &#125;&#125;public static void main(String[] args) &#123; System.out.println(Utility.getName());&#125; @CleanUp: 清理流对象,不用手动去关闭流，多么优雅12345678910@CleanupOutputStream outStream = new FileOutputStream(new File(&quot;text.txt&quot;));@CleanupInputStream inStream = new FileInputStream(new File(&quot;text2.txt&quot;));byte[] b = new byte[65536];while (true) &#123; int r = inStream.read(b); if (r == -1) break; outStream.write(b, 0, r);&#125;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"lombok","slug":"lombok","permalink":"https://tfssweb.github.io/tags/lombok/"}]},{"title":"Thymeleaf","slug":"Thymeleaf","date":"2018-06-09T04:09:05.000Z","updated":"2019-09-11T09:39:15.545Z","comments":true,"path":"2018/06/09/Thymeleaf/","link":"","permalink":"https://tfssweb.github.io/2018/06/09/Thymeleaf/","excerpt":"","text":"依赖12345&lt;!--thymeleaf--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; application.properties1234567891011121314##配置thymeleafspring.thymeleaf.cache=truespring.thymeleaf.check-template=truespring.thymeleaf.check-template-location=truespring.thymeleaf.enabled=truespring.thymeleaf.encoding=UTF-8spring.thymeleaf.excluded-view-names=spring.thymeleaf.mode=HTML5spring.thymeleaf.prefix=classpath:/templates/spring.thymeleaf.reactive.max-chunk-size=spring.thymeleaf.reactive.media-types=spring.thymeleaf.servlet.content-type=text/htmlspring.thymeleaf.suffix=.htmlspring.thymeleaf.template-resolver-order= 标签th:each12345678910&lt;a href=&quot;&quot; th:each=&quot;team,teamStat:$&#123;projectTeams&#125;&quot;&gt; &lt;div class=&quot;lecturer-card-container&quot; th:style=&quot;$&#123;(teamStat.count) % 5==0&#125;?&apos;margin-right: 0px;&apos;:&apos;&apos;&quot;&gt; &lt;div class=&quot;lecturer-item&quot;&gt; &lt;img class=&quot;lecturer-uimg&quot; src=&quot;../res/i/header.jpg&quot; th:src=&quot;$&#123;team.getImageUrl()&#125;&quot;&gt; &lt;span class=&quot;lecturer-name&quot; th:text=&quot;$&#123;team.getUsername()&#125;&quot;&gt;颓废书生&lt;/span&gt; &lt;span class=&quot;lecturer-title&quot; th:text=&quot;$&#123;team.getTitle()&#125;&quot;&gt;一本大学-计算机专业&lt;/span&gt; &lt;span class=&quot;lecturer-p&quot; th:text=&quot;$&#123;team.getBrief()&#125;&quot;&gt;擅长前端、Java后端、Python爬虫、运维&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/a&gt; th:style123&lt;div class=&quot;lecturer-card-container&quot; th:style=&quot;$&#123;(teamStat.count) % 5==0&#125;?&apos;margin-right: 0px;&apos;:&apos;&apos;&quot;&gt;&lt;/div&gt;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"thymeleaf","slug":"thymeleaf","permalink":"https://tfssweb.github.io/tags/thymeleaf/"}]},{"title":"使用dwr时session error错误","slug":"使用dwr时session error错误","date":"2018-06-01T14:03:00.000Z","updated":"2019-09-03T03:15:14.040Z","comments":true,"path":"2018/06/01/使用dwr时session error错误/","link":"","permalink":"https://tfssweb.github.io/2018/06/01/使用dwr时session error错误/","excerpt":"在web.xml中添加如下配置：","text":"在web.xml中添加如下配置： 123456789101112&lt;servlet&gt; &lt;servlet-name&gt;dwr-invoker&lt;/servlet-name&gt; &lt;servlet-class&gt;org.directwebremoting.servlet.DwrServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;debug&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;crossDomainSessionSecurity&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet&gt;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"dwr","slug":"dwr","permalink":"https://tfssweb.github.io/tags/dwr/"},{"name":"session","slug":"session","permalink":"https://tfssweb.github.io/tags/session/"}]},{"title":"Redis之RDB与AOF","slug":"Redis之RDB与AOF","date":"2018-05-06T14:03:00.000Z","updated":"2019-09-03T03:15:14.022Z","comments":true,"path":"2018/05/06/Redis之RDB与AOF/","link":"","permalink":"https://tfssweb.github.io/2018/05/06/Redis之RDB与AOF/","excerpt":"官方使用建议 RDB持久化方式能够在指定的时间间隔内对你的数据进行快照存储； AOF持久化方式记录每次对服务器的写操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次“写”操作到文件的末尾。 Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。","text":"官方使用建议 RDB持久化方式能够在指定的时间间隔内对你的数据进行快照存储； AOF持久化方式记录每次对服务器的写操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次“写”操作到文件的末尾。 Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。 如何选择只做缓存： 如果你希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式; 同时开启两种持久化方式: 在这种情况下，当Redis重启的时候会优先载入AOF文件来恢复原始数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整（也可以这样理解：redis.conf文件默认情况下AOF持久化方式是关闭的，那么手动开启必然是使用者自己的选择，Redis理应做出响应先加载AOF。）。 RDB的数据不实时，同时使用两者时，服务器重启也会找AOF文件。那要不要只使用AOF？建议不要，因为RDB更适合用于备份数据库（AOF在不断变化，不好备份），快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。 性能建议 如果RDB文件只是作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，即只保留save 900 1这条规则； 如果激活AOF，好处是在最恶劣的情况下也只会丢失不超过两秒的数据，启动脚本比较简单，只需要加载自己的AOF文件就可以了，代价是带来了持续的IO；二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的，只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小是64M太小了，可以设置5G以上。默认超过原大小100%时重写，可以改到适当的数值； 如果不激活AOF，仅靠Master-Slave Replication实现高可用性也可以，能省掉一大笔IO，也可以减少rewrite时带来的系统波动。代价是如果Master/Slave同时宕机，会丢失十几分钟的数据，启动脚本也要比比较两个Master/Slave中的RDB文件，载入较新的那个。","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"redis","slug":"redis","permalink":"https://tfssweb.github.io/tags/redis/"},{"name":"rdb","slug":"rdb","permalink":"https://tfssweb.github.io/tags/rdb/"},{"name":"aof","slug":"aof","permalink":"https://tfssweb.github.io/tags/aof/"}]},{"title":"Linux安装Mysql","slug":"Linux安装Mysql","date":"2018-04-26T04:01:00.000Z","updated":"2019-09-03T03:15:14.011Z","comments":true,"path":"2018/04/26/Linux安装Mysql/","link":"","permalink":"https://tfssweb.github.io/2018/04/26/Linux安装Mysql/","excerpt":"此文搭建环境为centos7。 第一步：配置YUM源 在MySql官网，下载YUM源rpm安装包传送门，如下图： 依次执行以下命令来安装：","text":"此文搭建环境为centos7。 第一步：配置YUM源 在MySql官网，下载YUM源rpm安装包传送门，如下图： 依次执行以下命令来安装： 12wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpmyum localinstall mysql57-community-release-el7-8.noarch.rpm 检查mysql源是否安装成功： 1yum repolist enabled | grep &quot;mysql.*-community.*&quot; 可以修改vim /etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可。改完之后的效果如下所示： 第二步：安装MySql执行： 1yum install mysql-community-server 安装MySql。 第三步：启动MySql服务执行： 1systemctl start mysqld 第四步：配置开机启动执行： 12systemctl enable mysqldsystemctl daemon-reload 第五步：修改root本地登录密码执行： 1/usr/bin/mysqladmin -u root password root 即可。 补充编码设置修改vim /etc/my.cnf文件： 123456789101112[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]init_connect=&apos;SET collation_connection = utf8_unicode_ci&apos;init_connect=&apos;SET NAMES utf8&apos;character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshake","categories":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/categories/mysql/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"}]},{"title":"MySql之索引","slug":"MySql之索引","date":"2018-04-23T11:08:00.000Z","updated":"2019-09-03T03:15:14.019Z","comments":true,"path":"2018/04/23/MySql之索引/","link":"","permalink":"https://tfssweb.github.io/2018/04/23/MySql之索引/","excerpt":"什么是索引？ MySql官方定义为：索引（Index）是帮助MySql高效获取数据的数据结构。所以说，我们可以得到‘索引’的本质：索引是数据结构。 更通俗的讲，索引的目的是在于提高查询效率，可以类比字典：假如要查“mysql”这个单词，我们肯定定位到“m”字母，然后接着找“y”字母以及“s”“q”“l”。如果没有索引，那么我们只能从字母“a”开始找了。","text":"什么是索引？ MySql官方定义为：索引（Index）是帮助MySql高效获取数据的数据结构。所以说，我们可以得到‘索引’的本质：索引是数据结构。 更通俗的讲，索引的目的是在于提高查询效率，可以类比字典：假如要查“mysql”这个单词，我们肯定定位到“m”字母，然后接着找“y”字母以及“s”“q”“l”。如果没有索引，那么我们只能从字母“a”开始找了。 手写与机读 程序员自己写的sql顺序与MySql执行的sql顺序是有些不一样的； 12345678910111213141516手写：SELECT DISTINCT &lt;select_list&gt;FROM &lt;left_table&gt; &lt;join_type&gt; JOIN &lt;right_table&gt; on &lt;join_condition&gt;WHERE &lt;where_condition&gt;GROUP BY &lt;group_by_list&gt;HAVING &lt;having_condition&gt;ORDER BY &lt;order_by_condition&gt;LIMIT &lt;limit_number&gt; 1234567891011机读：FROM &lt;left_table&gt;ON &lt;join_condition&gt;&lt;join_type&gt; JOIN &lt;right_table&gt;WHERE &lt;where_condition&gt;GROUP BY &lt;group_by_list&gt;HAVING &lt;having_condition&gt;SELECTDISTINCT &lt;select_list&gt;ORDER BY &lt;order_by_condition&gt;LIMIT &lt;limit_number&gt; 所以总结下，可以用下图表示： 索引的创建 MySql的单值索引与复合索引，可分别由下列语句创建： 1234567单值索引：create index idx_&lt;table&gt;_&lt;column&gt; on &lt;table&gt;(&lt;column&gt;);alter &lt;table&gt; add index idx_&lt;table&gt;_&lt;column&gt; on &lt;table&gt;(&lt;column&gt;);复合索引：create index idx_&lt;table&gt;_&lt;column1&gt;&lt;column2&gt; on &lt;table&gt;(&lt;column1,column2&gt;);alter &lt;table&gt; add index idx_&lt;table&gt;_&lt;column1&gt;&lt;column2&gt; on &lt;table&gt;(&lt;column1,column2&gt;); 删除： 1drop index &lt;index_name&gt; on &lt;table&gt;; 查看： 123show index from &lt;table&gt;;或者show index from &lt;table&gt;\\G 索引创建与否的条件 主键自动建立唯一索引； 频繁作为查询条件的字段应该创建索引； 查询中与其他表关联的字段，外键关系建立索引； where条件里用不到的字段不创建索引； 在高并发下倾向创建复合索引； 查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度； 查询中统计或者分组字段； 表中数据较少的情况下，不适合创建索引； 经常有增删改操作的表，不适合创建索引； 频繁更新的字段，不适合创建索引； 数据重复且分布平均的表字段，不适合创建索引； 索引优化分析 MySql性能分析及explain的使用。explain的相关属性，如下图： id：select查询的序列号，表示查询中执行select子句或操作表的顺序。 id相同：执行顺序自上而下； id不同：如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行。 select_type：查询语句的类型。 SIMPLE PRIMARY SUBQUERY DERIVED UNION UNION RESULT table:查询的表。 type:访问类型，显示查询使用了何种类型，常见如下： system：表只有一行记录（等价于系统表），这是const类型的特例，平时不会出现，可忽略； const：表示通过索引一次就找到了，const用于比较primary或者unique索引，因为只匹配一行记录； eq_ref：唯一性索引扫描，对于没个索引键，表中只有一条记录与之匹配，常见于主键或唯一性索引扫描； ref：非唯一性索引扫描，返回匹配某个单独值的所有行； range：只检索给定范围的行，一般就是where语句中使用了“&lt;”、“&gt;”、“between”、“in”等； index：与all的区别就是只遍历索引树，通常比all快； all：全表扫描； possible_keys:mysql认为可能用到的索引； key:实际用到的索引； key_len:长度； ref:引用； rows:扫描的行； Extra:常用Using filesort、Using temporary、Using index、Using where 以上最重要的几个指标是：id、type、key、rows、Extra，其中type指标中，结果值从最好到最坏依次是：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all，一般来说，得保证查询至少达到range级别，最好能达到ref级别；其中Extra指标中，出现Using index很不错，但是出现Using filesort或者Using temporary那你就得小心了。 索引失效原因及建议索引失效原因： 全值匹配不当； 没有遵循最佳左前缀法则； 在索引列上进行各种操作（如：计算、函数、自动或手动类型转换）； 存储引擎不能使用索引中范围条件右边的列（范围之后的索引会失效）； 尽量使用覆盖索引（只访问索引的查询（索引列与查询列一致）），减少select *； mysql在使用不等于（!=或者&lt;&gt;）的时候，不能使用索引； is null，is not null 无法使用索引； like以通配符%开头，索引失效； 字符串不加单引号，索引失效； 少用or，用or做连接的时候，索引失效； 优化建议： 在使用join的时候，永远使用小结果集驱动大结果集，减少NestedLoop的循环次数，保证join语句中被驱动表上的join条件字段已经被索引； 下面口诀不错: 12345678【优化总结口诀】全值匹配我最爱，最左前缀要遵守；带头大哥不能死，中间兄弟不能断；索引列上少计算，范围之后全失效；like百分写最右，覆盖索引不写星；不等空值还有or，索引失效要少用；VAR引号不可丢，SQL高级也不难！","categories":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/categories/mysql/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"},{"name":"索引","slug":"索引","permalink":"https://tfssweb.github.io/tags/索引/"}]},{"title":"Zookeeper集群搭建","slug":"Zookeeper集群搭建","date":"2018-04-09T00:10:20.000Z","updated":"2019-09-03T03:15:14.031Z","comments":true,"path":"2018/04/09/Zookeeper集群搭建/","link":"","permalink":"https://tfssweb.github.io/2018/04/09/Zookeeper集群搭建/","excerpt":"Zookeeper集群搭建一、集群规划与环境配置 环境准备 序号 IP 主机名 软件 1 192.168.14.64 / 172.16.1.30 zookeeper1 jdk、zookeeper 2 192.168.14.32 / 172.16.1.34 zookeeper2 jdk、zookeeper 3 192.168.14.49 / 172.16.1.10 zookeeper3 jdk、zookeeper","text":"Zookeeper集群搭建一、集群规划与环境配置 环境准备 序号 IP 主机名 软件 1 192.168.14.64 / 172.16.1.30 zookeeper1 jdk、zookeeper 2 192.168.14.32 / 172.16.1.34 zookeeper2 jdk、zookeeper 3 192.168.14.49 / 172.16.1.10 zookeeper3 jdk、zookeeper 修改hosts文件 123172.16.1.30 zookeeper1172.16.1.34 zookeeper2172.16.1.10 zookeeper3 二、安装Zookeeper集群 解压tar包 1tar zxvf zookeeper_3_4_9.tar.gz 创建数据目录data 1mkdir data 配置主机ID(三台) 1234cd dataecho 1 &gt; myidecho 2 &gt; myidecho 3 &gt; myid 修改zoo.cfg配置文件 12345dataDir=/opt/zookeeper-3.4.9/dataserver.1=zookeeper1:2888:3888server.2=zookeeper2:2888:3888server.3=zookeeper3:2888:3888 配置环境变量 123export ZOOKEEPER_HOME=/opt/zookeeper-3.4.9export PATH=$ZOOKEEPER_HOME/bin:$PATHexport CLASSPATH=.:$ZOOKEEPER_HOME/lib/dt.jar:$ZOOKEEPER_HOME/lib/tools.jar 服务器分发 12345scp /etc/hosts zookeeper2:/etc/scp /etc/hosts zookeeper3:/etc/scp zoo.cfg zookeeper2:$ZOOKEEPER_HOME/conf/scp zoo.cfg zookeeper3:$ZOOKEEPER_HOME/conf/ 启动服务 1zkServer.sh start","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"zookeeper","slug":"zookeeper","permalink":"https://tfssweb.github.io/tags/zookeeper/"},{"name":"集群","slug":"集群","permalink":"https://tfssweb.github.io/tags/集群/"}]},{"title":"mybatis的工作原理","slug":"mybatis的工作原理","date":"2018-03-31T11:12:22.000Z","updated":"2019-09-03T03:15:14.035Z","comments":true,"path":"2018/03/31/mybatis的工作原理/","link":"","permalink":"https://tfssweb.github.io/2018/03/31/mybatis的工作原理/","excerpt":"MyBatis应用程序根据XML配置文件创建SqlSessionFactory，SqlSessionFactory在根据配置，配置来源于两个地方，一处是配置文件，一处是Java代码的注解，获取一个SqlSession。SqlSession包含了执行sql所需要的所有方法，可以通过SqlSession实例直接运行映射的sql语句，完成对数据的增删改查和事务提交等，用完之后关闭SqlSession。","text":"MyBatis应用程序根据XML配置文件创建SqlSessionFactory，SqlSessionFactory在根据配置，配置来源于两个地方，一处是配置文件，一处是Java代码的注解，获取一个SqlSession。SqlSession包含了执行sql所需要的所有方法，可以通过SqlSession实例直接运行映射的sql语句，完成对数据的增删改查和事务提交等，用完之后关闭SqlSession。","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"mybatis","slug":"mybatis","permalink":"https://tfssweb.github.io/tags/mybatis/"}]},{"title":"Hibernate的工作原理","slug":"Hibernate的工作原理","date":"2018-03-29T03:11:13.000Z","updated":"2019-09-03T03:15:14.004Z","comments":true,"path":"2018/03/29/Hibernate的工作原理/","link":"","permalink":"https://tfssweb.github.io/2018/03/29/Hibernate的工作原理/","excerpt":"1.通过Configuration().configure();//读取并解析hibernate.cfg.xml配置文件 2.由hibernate.cfg.xml中的&lt;mapping resource=&quot;com/xx/User.hbm.xml&quot;/&gt;读取并解析映射信息","text":"1.通过Configuration().configure();//读取并解析hibernate.cfg.xml配置文件 2.由hibernate.cfg.xml中的&lt;mapping resource=&quot;com/xx/User.hbm.xml&quot;/&gt;读取并解析映射信息 3.通过config.buildSessionFactory(); //创建SessionFactory 4.sessionFactory.openSession(); //打开Sesssion 5.session.beginTransaction(); //创建事务Transation 6.persistent operate持久化操作 7.session.getTransaction().commit(); //提交事务 8.关闭Session 9.关闭SesstionFactory","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"hibernate","slug":"hibernate","permalink":"https://tfssweb.github.io/tags/hibernate/"}]},{"title":"Struts2的工作原理？","slug":"Struts2的工作原理？","date":"2018-03-20T14:23:42.000Z","updated":"2019-09-03T03:15:14.028Z","comments":true,"path":"2018/03/20/Struts2的工作原理？/","link":"","permalink":"https://tfssweb.github.io/2018/03/20/Struts2的工作原理？/","excerpt":"1 客户端初始化一个指向Servlet容器（例如Tomcat）的请求 2 这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）","text":"1 客户端初始化一个指向Servlet容器（例如Tomcat）的请求 2 这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin） 3 接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action 4 如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy 5 ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类 6 ActionProxy创建一个ActionInvocation的实例。 7 ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。 8 一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2框架中继承的标签。在这个过程中需要涉及到ActionMapper","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"struts2","slug":"struts2","permalink":"https://tfssweb.github.io/tags/struts2/"}]},{"title":"SpringMVC工作原理？","slug":"SpringMVC工作原理","date":"2018-03-19T14:22:22.000Z","updated":"2019-09-03T03:15:14.027Z","comments":true,"path":"2018/03/19/SpringMVC工作原理/","link":"","permalink":"https://tfssweb.github.io/2018/03/19/SpringMVC工作原理/","excerpt":"1、用户发送请求至前端控制器DispatcherServlet 2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。","text":"1、用户发送请求至前端控制器DispatcherServlet 2、DispatcherServlet收到请求调用HandlerMapping处理器映射器。 3、处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。 4、DispatcherServlet调用HandlerAdapter处理器适配器 5、HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。 6、Controller执行完成返回ModelAndView 7、HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet 8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器 9、ViewReslover解析后返回具体View 10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。 11、DispatcherServlet响应用户","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"springmvc","slug":"springmvc","permalink":"https://tfssweb.github.io/tags/springmvc/"}]},{"title":"Nginx企业级rewrite 实战操作","slug":"Nginx企业级rewrite 实战操作","date":"2018-03-13T14:12:13.000Z","updated":"2019-09-03T03:15:14.020Z","comments":true,"path":"2018/03/13/Nginx企业级rewrite 实战操作/","link":"","permalink":"https://tfssweb.github.io/2018/03/13/Nginx企业级rewrite 实战操作/","excerpt":"一、访问http://www.abc.com正常，现在需要访问abc.com，直接跳转到http://www.abc.com。 123456server &#123;listen 80;server_name abc.com;access_log off;rewrite (.+) $scheme://www.$host$1 permanent;&#125;","text":"一、访问http://www.abc.com正常，现在需要访问abc.com，直接跳转到http://www.abc.com。 123456server &#123;listen 80;server_name abc.com;access_log off;rewrite (.+) $scheme://www.$host$1 permanent;&#125; 二、如果你们域名是http://www.abc.com，现在想换一个域名http://www.def.com了，又不想失去之前域名的访问量，需要配置跳转。 首先需要在你的server_name里面把www.abc.com和www.def.cn都写上。 然后做如下配置： 123456location / &#123;if ($host = &apos;www.abc.com&apos;)&#123;rewrite ^/(.*)$ http://www.def.com/$1 permanent;&#125;&#125; 三、跳转维护页面，比如今天维护，想挂一个维护页面，希望除某些特定的IP地址能正常访问，因为需要测试。其余所以的IP地址都是访问维护页面，这个需求我之前好像写过，但是今天写的有点不一样。在server里面添加如下内容： 12345678910set $rewrite true;if ($remote_addr = &quot;xxx.xxx.xxx.xxx&quot;) &#123;set $rewrite false;&#125;if ($rewrite = true) &#123;rewrite (.+) http://www.abc.com/maintenance.html;&#125;location = /maintenance.html &#123; root /var/vhost;&#125; 四、比如现在你的域名是http://bbs.abc.com，现在将这个域名下面的帖子访问都跳转到http://www.abc.com/bbs，注意跳转后的参数也要保持一致。 比如：http://bbs.abc.com/post/addpost/913.shtml跳转到http://www.abc.com/bbs/post/addpost/913.shtml 123location /post &#123;rewrite (.+) http://www.abc.com/bbs$1 permanent;&#125; 五、基于uri的跳转 123456if ($request_uri ~* ^/note\\.php\\?product_code=(.*)$) &#123;rewrite (.*) http://www.abc.com permanent;&#125;if ($request_uri ~ ^/forum-(140|141|142|143|144|145|150|151|152|153|154|155|156|157|158|159|200|222|223|224|225|226|227|228)-(\\d+).html$) &#123;rewrite (.*) http://www.abc.com/list permanent;&#125; 六、基于目录下面文件的跳转 123location ~* /upload/.*\\.php$ &#123;return 404;&#125; 七、最普通的url到url跳转 123location ~* ^/ab/maintain/main.html &#123;rewrite (.+) http://www.abc.com/maintain/main.html permanent;&#125; 八、目录后的参数保持不变的跳转 1rewrite ^/assets/upload/(.*)$ http://assets.kgc.cn/upload/$1 permanent; 九、多次匹配 123if ($request_uri ~ ^/baseuiue(.shtml)|^/zhuanti/baseuiue(.shtml)) &#123; rewrite (.+) http://123.abc.cn/zhuanti/baseuiue.shtml permanent;&#125;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"nginx","slug":"nginx","permalink":"https://tfssweb.github.io/tags/nginx/"}]},{"title":"一位Java工程师的阶段性工作总结","slug":"一位Java工程师的阶段性工作总结","date":"2018-03-10T13:11:13.000Z","updated":"2019-09-03T03:15:14.036Z","comments":true,"path":"2018/03/10/一位Java工程师的阶段性工作总结/","link":"","permalink":"https://tfssweb.github.io/2018/03/10/一位Java工程师的阶段性工作总结/","excerpt":"一、技术积累（1）代码规范1.1.1、通常的模块分布：一般如果你要实现一个web应用，你从后台将数据展示到前端页面，在一个比较大的公司，你少不了跟其他项目有交集（你调用他的接口，他依赖你的接口），这样下来，整个公司有很多个模块，怎么做到很好的联系。回到刚刚的模块分布，你的一个web应用，应当需要分成三个模块：core模块、service模块、web模块。web模块就是展示到页面，后台代码而言主要就controller层了，其他逻辑基本都放在core了，service模块就是一些接口类和参数dto等等，接口的实现类在core模块。这样下来，web模块只需要依赖service模块，同样的其他系统依赖你的接口也仅仅是依赖service模块，然后利用远程调用方式消费你的接口服务。","text":"一、技术积累（1）代码规范1.1.1、通常的模块分布：一般如果你要实现一个web应用，你从后台将数据展示到前端页面，在一个比较大的公司，你少不了跟其他项目有交集（你调用他的接口，他依赖你的接口），这样下来，整个公司有很多个模块，怎么做到很好的联系。回到刚刚的模块分布，你的一个web应用，应当需要分成三个模块：core模块、service模块、web模块。web模块就是展示到页面，后台代码而言主要就controller层了，其他逻辑基本都放在core了，service模块就是一些接口类和参数dto等等，接口的实现类在core模块。这样下来，web模块只需要依赖service模块，同样的其他系统依赖你的接口也仅仅是依赖service模块，然后利用远程调用方式消费你的接口服务。 1.1.2、代码层级结构：针对后台服务项目，一般分为对外接口层、service层、Dao层。Dao层就是与数据库交接的接口层，service层主要调用Dao或者外部系统的接口，复杂的逻辑基本都放在service层；一些方法需要提供给其他模块调用的时候，就封装在对外接口层，只有对外接口层是暴露。这里说的只是层级结构，还有与层级结构无关的，也是需要归类的，比如对外部系统接口方法封装的我们放在一个目录下面，一些常量和工具类等我们放在common目录下面。当然还有其他考虑，尽量让整个模块有层次感，代码才不会太乱，更好的维护。 1.1.3、总结上面两点：可能不少猿友觉得上面啰嗦又不像代码规范，其实这两点也是代码规范的一部分，主要引导大家往结构清晰好维护的思维方向走，多思考吧。 1.1.4、对于一些需要异步处理的，不要直接new一个thread，应当使用线程池。使用线程池的时候应当对线程数量大小合理设置，一般最大不超过50个，当然还需要考虑你的IO和CPU，怎么分析网上搜搜吧。 1.1.5、容器类变量，如果变化比较大且频繁，尽量定义的时候设置初始容量大小，减少扩容带来的消耗。 1.1.6、分支判断if…else的时候，最常符合的条件处理放在前面。 1.1.7、对象比较的时候常量放前面，养成好习惯，减少空指针的出现。 1.1.8、减少synchronized中等待处理的代码，能放在外面就尽量放在外面。 1.1.9、下面到数据库了，我觉得还是在这里说了好点，一般查询比较慢，很有可能是没有建索引或者索引没用到，多去检查一下。 1.1.10、两个大表的关联查询，可以使用二次访问数据库替代，先查出A表的数据，利用关联字段再查B表的。不要一味想着一条sql搞定最好。 1.1.11、坚决避免，查全表数据或者数量大的数据，返回list加载到内存中，一不小心查了100w数据，又查得比较频繁，内存的爆了。有这种风险的改成分页查询。 1.1.12、不要select *，按需取列。 1.1.13、多考虑避免事务里面有长连接或者长事务，如果大量这种情况出现占用数据连接，会影响性能。一些无必要的逻辑可以放到事务外执行。 1.1.14、对字段的加减乘除处理放到sql，严格避免先get处理，然后运算在set到数据库里面，并发情况非常容易导致失真。 1.1.15、方法里面代码不要太长，注意封装，命名语义化，代码整洁。常挂嘴边的，没放心上，一如既往的给自己埋坑，举个博主的例子，那会刚毕业也是没放心上，最近把我们组长不写代码，一到代码评审我就害怕，检视到有问题的代码，毕业生吧就说这代码以前就是这样写的，问题最终肯定都落我身上，现在感觉代码是自己的孩子，只能有空自己偷偷的优化一下，怕出问题还得非常仔细。 （2）SQL规范与性能优化1.2.1、先提前声明，博主工作用到是MySQL，可能有些场景只针对MySQL。说到SQL优化，一些概念必须要理解，不然死记硬背一两天就忘记了。特别是执行计划的概念。 1.2.2、什么是执行计划：a.决定如何访问表数据，是否通过索引，是否排序等。b.多表关联是先访问哪个表。c.多表关联时，使用哪种连接方式，不过现在MySQL只有嵌套连接（嵌套循环，顾名思义就是将一个表为出发点，将该表全部记录逐条去遍历另外一张表的记录）。 1.2.3、SQL执行顺序：a.检查语法是否正确。b.检查表是否存在、权限是否满足等。c.根据统计信息(如data length,rows,index length、索引唯一度)，生成较优的执行计划。d.根据执行计划，进行数据检索、过滤、合并、排序等操作。访问数据时，内存中如存在表数据，则直接进行操作；否则，从磁带读取表数据，放入内存，再进行操作；如内存不足，则内存中较冷数据涮出内存，再从内存中读取数据。 1.2.4、索引：查询的时候如果使用上了索引，可以提高效率，因为建立了索引后，可以理解为数据字典的结构存储，因此根据条件查询的时候更加高效。下面看一下MySQL常用的索引类型的概念。a．普通索引：在创建普通索引时，不附加任何限制条件。这类索引可以创建在任何数据类型中，其值是否唯一和非空由字段本身的完整性约束条件决定。建立索引以后，查询时可以通过索引进行查询。例如，在student表的stu_id字段上建立一个普通索引。查询记录时，就可以根据该索引进行查询。 b．唯一性索引:使用UNIQUE参数可以设置索引为唯一性索引。在创建唯一性索引时，限制该索引的值必须是唯一的。例如，在student表的stu_name字段中创建唯一性索引，那么stu_name字段的值就必需是唯一的。通过唯一性索引，可以更快速地确定某条记录。主键就是一种特殊唯一性索引。 c．单列索引:在表中的单个字段上创建索引。单列索引只根据该字段进行索引。单列索引可以是普通索引，也可以是唯一性索引，还可以是全文索引。只要保证该索引只对应一个字段 即可。 d．多列索引：多列索引是在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，可以通过这几个字段进行查询。但是，只有查询条件中使用了这些字段中第一个字段时，索引才会被使用。例如，在表中的id、name和sex字段上建立一个多列索引，那么，只有查询条件使用了id字段时该索引才会被使用。 e . 全文索引：使用FULLTEXT参数可以设置索引为全文索引。全文索引只能创建在CHAR、VARCHAR或TEXT类型的字段上。查询数据量较大的字符串类型的字段时，使用全文索引可以提高查询速度。例如，student表的information字段是TEXT类型，该字段包含了很多的文字信息。在information字段上建立全文索引后，可以提高查询information字段的速度。MySQL数据库从3.23.23版开始支持全文索引，但只有MyISAM存储引擎支持全文检索。在默认情况下，全文索引的搜索执行方式不区分大小写。但索引的列使用二进制排序后，可以执行区分大小写的全文索引。 还有空间索引，平时也比较少用。目前只有MyISAM存储引擎支持空间检索。目前博主也只接触过InnoDB存储引擎。 1.2.5、一般一张表索引不要超过5个，而且避免重复索引，而且也不是建了索引，根据索引字段条件查询，索引就会起作用。 1.2.6、一般哪些场景会导致索引失效：a.使用like关键字匹配字符串第一个为”%”的场景。b.条件中包含or、in、not in、&lt;&gt;关键字，默认不走索引的。c.访问表上的数据行超出表总记录数30%，变成全表扫描。d.查询条件使用函数在索引列上，或者对索引列进行运算。e.多列索引中，第一个索引列使用范围查询，只能用到部份或无法使用索引。f.多列索引中，第一个查询条件不是最左索引列，上面多列索引概念中也有提到。肯定还有更多的场景，但是博主现在能想到的场景就这些了。 1.2.7、不能同时使用两个索引，一个过滤数据，一个用于排序（主键除外）。 1.2.8、DML语句如果使用索引，会导致lock全表；如果使用了非唯一索引，可能只是锁住一定范围。对此，建议更新/删除数据尽量用上索引，如果可以最好用上主键或唯一索引，另外事务要及时提交。 1.2.9、最后一点，如何看执行计划，分析SQL的性能。这个吧，三言两语说不清楚，直接看其他博主的博文吧：http://www.cnblogs.com/xiaoboluo768/p/5400990.html。一定要看！！！ （3）关于事务的一些建议如果没有听过事务这么个概念，网上了解学习一下，先理解一下各个事务类型的含义吧：a.日志记录尽量放在独立事务里面，避免后面的异常发生导致日志丢失。b.上面已经几次提到，尽早提交事务，避免事务过长，因此写代码的时候，一些可以不放到事务的逻辑可以移到外面，长事务看能否拆成两个事务。 （4）关于数据库连接池可能一些猿友都少去注意吧。先来看看一些参数，这里只罗列了博主比较关注的，更多的可以自行查看一下配置。initialSize ： 默认值是 0, 连接池创建连接的初始连接数目。minIdle : 默认是 0, 连接数中最小空闲连接数。maxIdle : 默认是 8 ，连接池中最大空闲连接数。maxActive : 默认值是 8, 连接池中同时可以分派的最大活跃连接数。maxWait : 默认值是无限大，当连接池中连接已经用完了，等待建立一个新连接的最大毫秒数 ( 在抛异常之前 )。validationQuery : 一条 sql 语句，用来验证数据库连接是否正常。这条语句必须是一个查询模式，并至少返回一条数据。一般用“ select 1 ”。minEvictableIdleTimeMilis : 默认值是 1000 * 60 * 30(30 分钟 ) 单位也是毫秒，连接池中连接可空闲的时间。timeBetweenEvictionRunsMilis : 默认值是 -1 ，每隔一段多少毫秒跑一次回收空闲线程的线程。 对于minEvictableIdleTimeMilis、timeBetweenEvictionRunsMilis这两个参数，timeBetweenEvictionRunsMilis必须大于1且小于minEvictableIdleTimeMilis，建议是minEvictableIdleTimeMilis的五分之一或十分之一。 （5）对于前端的几点建议1.7.1、一些图片压缩后再使用，性能方面提高不小吧（可以使用熊猫图片压缩）。虽然自己前端比较菜，但是估计也有不少猿友跟我一样偶尔需要兼顾前端吧。毕竟刚毕业不久。 1.7.2、关于移动端页面重构兼容不同屏幕大小的问题，建议doc的fontSize，实时获取屏幕的宽度，然后除以320再乘以16，当然16可以根据自己情况去调。然后其他一些单位尽量用rem，这样无论什么大小的屏幕都等比例缩放。感觉比@media效果好很多。 关于技术积累这一块，之前罗列的提纲还挺多的，写到后面感觉没什么精力了，有些三言两语似乎说不清楚啊。 二、工作心得（1）沟通协作第一： 工作中必然少不了团队协作，积极主动去沟通的人做事总是更加靠谱。道理大家都懂。但是我们需要把想法问题，简洁明确的表达给对方。另外总是以沟通的心态面对问题，而不是抱怨。如果觉得上级分配的任务难度太大了，你可以尝试跟他沟通，获取他有很好的建议或解决方案。 （2）谨慎记录与排漏： 感觉现在挺经常是开一两个会，测试同时偶尔找你排查一下环境问题，一天下来其实写代码的时间并不多。一些关键点，非常建议提前记录下来，方便接回被打断的思路，同时避免一些逻辑或功能点的遗漏。 （3）思路清晰与效率： 建议动手写代码之前，建议先理清思路，关键逻辑，需求细节，这样后面写代码的时候效率比较高，而且质量也比较好。 （4）主动与多管闲事： 清楚自己的工作范围，自己心里有个界限，有些属于别人工作范围的事情，可以你提出的建议是好的，但是最好还是在合适的场景和时机提出。 （5）心态与工作状态： 程序员，总会有被坑的时候，或者不顺心的时候，尽量尝试控制一下自己的心态。 （6）可持续发展观看待技术与业务： 这点是我自己希望做到的。对于责任心而言，或者是说一个优秀的程序员。很多时候并不是完成产品提的需求就好了。多为它着想，代码可维护性和扩展性高不高。一些功能点也可以提出自己的想法，不要总是被动的接受产品的需求，业务功能拓展性好的话，可以减少产品改动需求。 三、学习方向与职业发展（1）先广后深还是先深后广： 对于博主而言，其实接触的技术点还算比较多的，但是了解的都不深入，个人性格而言，比较偏向于实用驱动，如果在实际使用场景有用到再去深入学习，这样边学边用才能比较集中注意力。像一些同事，他们喜欢把一样东西研究得很深。 （2）业务经验也应当注重： 技术人员必然是技术优先，但是等你到了一定工作年限，其实业务经验也是非常重要了。之前领导找我年度工作谈话就有说过他们招高级工程师的时候对业务经验也非常看重，是否有自己独特的见解。相信道理大家都懂，但是平时有没有这样的意识，有没有去做又是另外一方面了。平时也可以多学习业务方面的知识。 （3）相同的工作年限为什么当过项目经理的人更吃香： 因为他们对业务理解更加深入，代码质量问题落在他头上，项目的人员协调与时间安排规划，责任越大，思考的问题就越多，遇到的问题处理经验就越丰富。把控能力也比较强。 （4）怎样能进入学习状态，并且坚持： 要想集中注意力学习技术，需要安静的环境，需要耐得住寂寞，因此你需要没有人打扰的环境，比如在一个集体居住环境，几个朋友一起住，一般多数回想着去哪玩，朋友在玩游戏，估计也是对你的一种诱惑吧。可以早点到办公室学习或下班学习一段时间再回去。或者选择自己一个人住。 （5）如何把握住学习的时机： 学习最能集中注意力的情况是有着比较强的好奇心和求知欲。所以一般一些技术分享或者老员工讨论的问题，可能很多概念知识你都不懂，这时候你就可以去学习了解这些知识。或者你工作中遇到的问题，尽量刨根问底的去弄清楚是什么原因导致的，不要一些老司机帮忙解决了就一了了之。或者是其他同事遇到的问题，你都可以去了解一下。 （6）你更适合走一条怎样的职业道路： 刚毕业不久的猿友，一般都是会比较心浮气躁的，对技术求知欲很强，特别是一些高大上的技术，什么大数据、云计算、架构等等，有些偏向于技术研究，有些偏向于业务。大部分程序员可能都会选择偏向于技术研究的，于是乎对偏向业务的不怎么感冒，因此觉得天天做这些东西没什么意思。这时候，静下来分析一下，你到底适合哪种方向。你能否静下心来对技术研究很深入，能否耐得住寂寞。 四、关于生活（1）良好与糟糕的生活状态的区别： 需要警惕一下自己是否进入了一种糟糕的生活状态，工作上不温不火，似乎现在的技术已经足够用了，完全没有目标没有计划，无法集中注意力学习，日子就这样一天天过去。 （2）自己的一些期望： 希望活得更坚定些，保持着一定的求知欲和规划，向成为自己希望成为的人努力吧，包括一些习惯、处事方式等等。","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"}]},{"title":"Java线程池","slug":"Java线程池","date":"2018-03-03T12:09:33.000Z","updated":"2019-09-03T03:15:14.010Z","comments":true,"path":"2018/03/03/Java线程池/","link":"","permalink":"https://tfssweb.github.io/2018/03/03/Java线程池/","excerpt":"corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中； maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；","text":"corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中； maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程； keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0； unit：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性： 1234567TimeUnit.DAYS; //天TimeUnit.HOURS; //小时TimeUnit.MINUTES; //分钟TimeUnit.SECONDS; //秒TimeUnit.MILLISECONDS; //毫秒TimeUnit.MICROSECONDS; //微妙TimeUnit.NANOSECONDS; //纳秒 workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择： 1234ArrayBlockingQueue;LinkedBlockingQueue;SynchronousQueue;ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。 threadFactory：线程工厂，主要用来创建线程； handler：表示当拒绝处理任务时的策略，有以下四种取值： 1234ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 继承关系：ThreadPoolExecutor-&gt;AbstractExecutorService-&gt;ExecutorService-&gt;Executor Executor是一个顶层接口，在它里面只声明了一个方法execute(Runnable)，返回值为void，参数为Runnable类型，从字面意思可以理解，就是用来执行传进去的任务的； 然后ExecutorService接口继承了Executor接口，并声明了一些方法：submit、invokeAll、invokeAny以及shutDown等； 抽象类AbstractExecutorService实现了ExecutorService接口，基本实现了ExecutorService中声明的所有方法； 然后ThreadPoolExecutor继承了类AbstractExecutorService。 在ThreadPoolExecutor类中有几个非常重要的方法： 1234execute()submit()shutdown()shutdownNow() execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。 submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果（Future相关内容将在下一篇讲述）。 shutdown()和shutdownNow()是用来关闭线程池的。","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"线程池","slug":"线程池","permalink":"https://tfssweb.github.io/tags/线程池/"}]},{"title":"Java8语法","slug":"Java8语法","date":"2018-02-28T18:20:00.000Z","updated":"2019-09-03T03:15:14.008Z","comments":true,"path":"2018/03/01/Java8语法/","link":"","permalink":"https://tfssweb.github.io/2018/03/01/Java8语法/","excerpt":"filter—-接收Lambda，从流中排除某些元素123List&lt;Integer&gt; list = Arrays.asList(1,2,3,523,21,55);Stream&lt;Integer&gt; stream1 = list.stream().filter(x -&gt; x &gt; 10);stream1.forEach(System.out::println);","text":"filter—-接收Lambda，从流中排除某些元素123List&lt;Integer&gt; list = Arrays.asList(1,2,3,523,21,55);Stream&lt;Integer&gt; stream1 = list.stream().filter(x -&gt; x &gt; 10);stream1.forEach(System.out::println); distinct—-筛选，通过流所所生成元素的hashCode()和equals()去除重复元素123List&lt;Integer&gt; list2 = Arrays.asList(1,2,3,3,2,4);Stream&lt;Integer&gt; stream2 = list2.stream().distinct();stream2.forEach(System.out::println); skip—-跳过元素返回一个抛弃了前n个元素的流，若流中元素不满足n个，则返回一个空流，与limit形成互补123List&lt;Integer&gt; list3 = Arrays.asList(1,2,3,523,21,55);Stream&lt;Integer&gt; stream3 = list3.stream().skip(3);stream3.forEach(System.out::println); limit—-截断流，使其元素不超过给定数量123List&lt;Integer&gt; list4 = Arrays.asList(1,2,3,523,21,55);Stream&lt;Integer&gt; stream4 = list4.stream().limit(3);stream4.forEach(System.out::println); filter—-接收Lambda，从流中排除某些元素1234567//filter()中需要使用断言型接口（Predicate）List&lt;Integer&gt; list5 = Arrays.asList(1,2,3,523,21,55);Stream&lt;Integer&gt; stream5 = list5.stream().filter(x -&gt; x &gt; 10);stream5.forEach(System.out::println);``` #### map----接收Lambda，将元素转换为其他形式或提取信息时，接收一个函数作为参数，该函数被应用到每个元素上，并将其映射成一个新的元素 //map()里面使用函数型接口（Function）//集合里的每一个元素都会使用到String.toUpperCase（）方法//它是以aa作为一个元素,bb作为一个元素List list6 = Arrays.asList(“aa”,”bb”,”cc”);Stream stream6 = list6.stream().map(String::toUpperCase);stream6.forEach(System.out::println); 12#### flatMap----接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接一个流 List list7 = Arrays.asList(“aa”,”bb”,”cc”); Stream stream7 = list7.stream().flatMap(l -&gt; { String[] strings = l.split(“”); return Arrays.stream(strings); }); stream7.forEach(System.out::println); 12#### sorted() 自然排序 按照Comparable的方式 List list8 = Arrays.asList(“aa”,”cc”,”bb”);Stream stream8 = list8.stream().sorted();stream8.forEach(System.out::println); 12#### sorted( Comparator com)定制排序 List list9 = Arrays.asList(1,3,2,6,8,3,9);Stream stream9 = list9.stream().sorted(Integer::compare);stream9.forEach(System.out::println); 12#### allMatch----检查是否匹配所有元素 //allMatch()里面的时断言型接口(Predicate) List list10 = Arrays.asList(1,3,2,6,8,3,9); boolean b10 = list10.stream().allMatch(x -&gt; x &gt; 3); System.out.println(b10); 12#### anyMatch----检查是否有匹配至少一个元素 //anyMatch()里面的时断言型接口(Predicate) List list11 = Arrays.asList(1,3,2,6,8,3,9); boolean b11 = list11.stream().anyMatch(x -&gt; x &gt; 3); System.out.println(b11); 12#### noneMatch----检查是否没有匹配的元素 //noneMatch()里面的时断言型接口(Predicate) List list12 = Arrays.asList(1,3,2,6,8,3,9); boolean b12 = list12.stream().noneMatch(x -&gt; x &gt; 3); System.out.println(b12);","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"java8","slug":"java8","permalink":"https://tfssweb.github.io/tags/java8/"}]},{"title":"为网站添加计时器","slug":"计时器代码","date":"2018-02-22T15:09:00.000Z","updated":"2019-09-03T03:15:14.066Z","comments":true,"path":"2018/02/22/计时器代码/","link":"","permalink":"https://tfssweb.github.io/2018/02/22/计时器代码/","excerpt":"为网站添加计时器：","text":"为网站添加计时器： 代码如下： 123456789101112131415161718&lt;p class=&quot;copyright text-muted&quot; id=&quot;count&quot;&gt;&lt;/p&gt;&lt;script&gt; window.setInterval(&apos;counter()&apos;,1000); function counter()&#123; var date=new Date(); var startDate=new Date(2016,12,07,0,0,0); var time=(date-startDate)/1000; var day=Math.floor(time/(24*60*60)); var hour=Math.floor(time%(24*60*60)/(60*60)); var minute=Math.floor(time%(24*60*60)%(60*60)/60); var second=Math.floor(time%(24*60*60)%(60*60)%60); var str=&quot;我的博客已默默运行了&quot; + day + &quot;天&quot; + hour +&quot;时&quot; + minute + &quot;分&quot; + second + &quot;秒&quot;; document.getElementById(&apos;count&apos;).innerHTML=str; &#125;&lt;/script&gt;","categories":[{"name":"网站","slug":"网站","permalink":"https://tfssweb.github.io/categories/网站/"}],"tags":[{"name":"web","slug":"web","permalink":"https://tfssweb.github.io/tags/web/"},{"name":"js","slug":"js","permalink":"https://tfssweb.github.io/tags/js/"},{"name":"javascript","slug":"javascript","permalink":"https://tfssweb.github.io/tags/javascript/"}]},{"title":"Docker 多宿主网络怎么配置？","slug":"Docker 多宿主网络怎么配置？","date":"2018-02-12T07:11:12.000Z","updated":"2019-09-03T03:15:13.997Z","comments":true,"path":"2018/02/12/Docker 多宿主网络怎么配置？/","link":"","permalink":"https://tfssweb.github.io/2018/02/12/Docker 多宿主网络怎么配置？/","excerpt":"Docker 跨节点容器网络互联，最通用的是使用 overlay 网络。","text":"Docker 跨节点容器网络互联，最通用的是使用 overlay 网络。 一代 Swarm 已经不再使用，它要求使用 overlay 网络前先准备好分布式键值库，比如 etcd, consul 或 zookeeper。然后在每个节点的 Docker 引擎中，配置 –cluster-store 和 –cluster-advertise 参数。这样才可以互连。可以参考我写的 LNMP 容器互联例子中的 run1.sh 这个脚本，这个脚本是利用 docker-machine自动建立 Swarm 并且配置好 overlay 的脚本，可以分析其流程。 现在都在使用二代 Swarm，也就是 Docker Swarm Mode，非常简单，只要 docker swarm init 建立集群，其它节点 docker swarm join 加入集群后，集群内的服务就自动建立了 overlay 网络互联能力。 需要注意的是，如果是多网卡环境，无论是 docker swarm init 还是 docker swarm join，都不要忘记使用参数 –advertise-addr 指定宣告地址，否则自动选择的地址很可能不是你期望的，从而导致集群互联失败。格式为 –advertise-addr &lt;地址&gt;:&lt;端口&gt;，地址可以是 IP 地址，也可以是网卡接口，比如 eth0。端口默认为 2377，如果不改动可以忽略。 此外，这是供服务使用的 overlay，因此所有 docker service create 的服务容器可以使用该网络，而 docker run 不可以使用该网络，除非明确该网络为 –attachable。 关于 overlay 网络的进一步信息，可以参考官网文档：https://docs.docker.com/engine/userguide/networking/get-started-overlay/ 虽然默认使用的是 overlay 网络，但这并不是唯一的多宿主互联方案。Docker 内置了一些其它的互联方案，比如效率比较高的 macvlan。如果在局域网络环境下，对 overlay 的额外开销不满意，那么可以考虑 macvlan 以及 ipvlan，这是比较好的方案。https://docs.docker.com/engine/userguide/networking/get-started-macvlan/ 此外，还有很多第三方的网络可以用来进行跨宿主互联，可以访问官网对应文档进一步查看：https://docs.docker.com/engine/extend/legacy_plugins/#/network-plugins","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"Docker迁移数据盘","slug":"Docker迁移数据盘","date":"2018-02-09T15:09:05.000Z","updated":"2019-09-03T03:15:14.002Z","comments":true,"path":"2018/02/09/Docker迁移数据盘/","link":"","permalink":"https://tfssweb.github.io/2018/02/09/Docker迁移数据盘/","excerpt":"123systemctl stop dockermv /var/lib/docker /data/docker","text":"123systemctl stop dockermv /var/lib/docker /data/docker 123ln -s /data/docker /var/lib/dockersystemctl start docker","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"迁移","slug":"迁移","permalink":"https://tfssweb.github.io/tags/迁移/"}]},{"title":"Maven","slug":"Maven","date":"2018-01-22T03:03:12.000Z","updated":"2019-09-03T03:15:14.014Z","comments":true,"path":"2018/01/22/Maven/","link":"","permalink":"https://tfssweb.github.io/2018/01/22/Maven/","excerpt":"Maven","text":"Maven ```","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://tfssweb.github.io/tags/maven/"}]},{"title":"如何让一个容器连接两个网络？","slug":"如何让一个容器连接两个网络？","date":"2018-01-12T11:31:12.000Z","updated":"2019-09-03T03:15:14.048Z","comments":true,"path":"2018/01/12/如何让一个容器连接两个网络？/","link":"","permalink":"https://tfssweb.github.io/2018/01/12/如何让一个容器连接两个网络？/","excerpt":"如果是使用 docker run，那很不幸，一次只可以连接一个网络，因为 docker run 的 –network 参数只可以出现一次（如果出现多次，最后的会覆盖之前的）。不过容器运行后，可以用命令 docker network connect 连接多个网络。 假设我们创建了两个网络：","text":"如果是使用 docker run，那很不幸，一次只可以连接一个网络，因为 docker run 的 –network 参数只可以出现一次（如果出现多次，最后的会覆盖之前的）。不过容器运行后，可以用命令 docker network connect 连接多个网络。 假设我们创建了两个网络： 12$ docker network create mynet1$ docker network create mynet2 然后，我们运行容器，并连接这两个网络。 12$ docker run -d --name web --network mynet1 nginx$ docker network connect mynet2 web 但是如果使用 docker-compose 那就没这个问题了。因为实际上，Docker Remote API 是支持一次性指定多个网络的，但是估计是命令行上不方便，所以 docker run 限定为只可以一次连一个。docker-compose 直接就可以将服务的容器连入多个网络，没有问题。 12345678910version: &apos;2&apos;services: web: image: nginx networks: - mynet1 - mynet2networks: mynet1: mynet2:","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"为什么 -p 后还是无法通过映射端口访问容器里面的服务？","slug":"为什么 -p 后还是无法通过映射端口访问容器里面的服务？","date":"2018-01-10T14:11:13.000Z","updated":"2019-09-03T03:15:14.037Z","comments":true,"path":"2018/01/10/为什么 -p 后还是无法通过映射端口访问容器里面的服务？/","link":"","permalink":"https://tfssweb.github.io/2018/01/10/为什么 -p 后还是无法通过映射端口访问容器里面的服务？/","excerpt":"首先，当然是检查这个 docker 的容器是否启动正常： docker ps、docker top &lt;容器ID&gt;、docker logs &lt;容器ID&gt;、docker exec -it &lt;容器ID&gt; bash等，这是比较常用的排障的命令；如果是 docker-compose 也有其对应的这一组命令，所以排障很容易。","text":"首先，当然是检查这个 docker 的容器是否启动正常： docker ps、docker top &lt;容器ID&gt;、docker logs &lt;容器ID&gt;、docker exec -it &lt;容器ID&gt; bash等，这是比较常用的排障的命令；如果是 docker-compose 也有其对应的这一组命令，所以排障很容易。 如果确保服务一切正常，甚至在容器里，可以访问到这些服务，docker ps 也显示出了端口映射成功，那么就需要检查防火墙了。 本机防火墙在 Docker 运行的系统上不应该运行任何防火墙……没错，说你呢，CentOS 的 firewalld 和 Ubuntu 的 ufw 同学。由于 Docker 使用 iptables 规则来进行网络数据流的控制，而那些防火墙总以为只有自己撰写 iptables，从而经常会导致 Docker 设置了一些规则，然后转眼就被 firewalld 或 ufw 给清了，特别是起、停防火墙服务的时候。从而导致 Docker 的网络从外界无法访问。 为了避免 iptables 的规则干扰，不要在运行 Docker 的服务器上，运行任何防火墙或配置自定义的 iptables 规则，除非你非常清楚你在做什么，并且知道会产生什么后果。另外，关闭防火墙后，记得重启系统，至少是重启 Docker 服务。否则防火墙的起、停、刷新这类行为会导致清空 Docker 设置的网络规则，而导致容器内的网络无法和外部互联。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"本文采用Ubuntu16.04 64位操作系统搭建科学上网服务器","slug":"搭建属于自己的科学代理服务器","date":"2018-01-02T15:11:23.000Z","updated":"2019-09-03T03:15:14.059Z","comments":true,"path":"2018/01/02/搭建属于自己的科学代理服务器/","link":"","permalink":"https://tfssweb.github.io/2018/01/02/搭建属于自己的科学代理服务器/","excerpt":"本文采用Ubuntu16.04 64位操作系统搭建科学上网服务器 前提：搭建自己的翻墙代理首先得需要有自己的服务器，既然翻墙所以服务器尽量选择国外的，本人使用的是Vultr服务器，好处是一旦被封了，可以销毁服务重新创建，【点击链接地址】，，使用此链接地址，首次充值新用户可以得到额外10美元奖励，够你玩几个月，当然我也会有相应奖励，如果你自己都懒得搭建，那么可以通过底部QQ加我好友，向我索要账号。好了，闲话少说进入正题：","text":"本文采用Ubuntu16.04 64位操作系统搭建科学上网服务器 前提：搭建自己的翻墙代理首先得需要有自己的服务器，既然翻墙所以服务器尽量选择国外的，本人使用的是Vultr服务器，好处是一旦被封了，可以销毁服务重新创建，【点击链接地址】，，使用此链接地址，首次充值新用户可以得到额外10美元奖励，够你玩几个月，当然我也会有相应奖励，如果你自己都懒得搭建，那么可以通过底部QQ加我好友，向我索要账号。好了，闲话少说进入正题： 第一步：安装GCC 及pip依次执行以下命令： 123apt-get updateapt-get install build-essentialapt-get install python-pip 为了在安装代理的时候出现版本问题错误，执行完以上命令，再执行： 1pip install --upgrade setuptools 第二步：安装Python首先得保证你的服务器上有Python，且Python版本为2.6或者2.7，如果你服务器已经安装有Python，可使用命令：python –version 查看Python版本 本人使用的是Python2.7.11，如果符合条件，可略过以下安装步骤： （1）、下载Python安装包在python 官网上下载2.7 版本的source code 。传送门 下载完成后，是一个Python-2.7.11.tar.xz； （2）、上传Python-2.7.11.tgz将Python-2.7.11.tar.xz 上传到你服务器某一目录如：/usr/local/shadowsocket/，当然在终端用wget下载，可省略此步骤； （3）、解压Python-2.7.11.tgz执行以下命令： 1tar -xvf Python-2.7.11.tar.xz （4）、进入解压目录，依次执行以下命令：123./configuremakemake install （5）、以上步骤执行完，验证是否安装成功：执行： 1python –version 出现上图，则为成功，完成第二步； 第三步：安装shadowsocks代理（1）、安装shadowsocks执行以下命令： 1pip install shadowsocks 配置单用户或者多用户，编写json文件执行以下命令： 1vim /etc/shadowsocks.json 单用户配置： 12345678910&#123; &quot;server&quot;:&quot;你的服务器IP&quot;, &quot;server_port&quot;:8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;设置密码&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; 本文不做多用户配置说明，有兴趣的可以自行google。 （3）、安装m2crypto安装m2crypto可以加快一点加密速度，执行： 1apt-get install python-m2crypto （4）、启动服务前台执行命令： 1ssserver -c /etc/shadowsocks.json 后台启动/停止命令： 12ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop 启动后，你就可以科学上网了。YOUTUBE 1080P 视频无卡顿！ 第四步：配置加速器将在之后博文中说明。 由于工作需要，爬墙是必须的，但请勿作他用，不参与黄赌毒，不发表不正当言论，请自重！不明白地方，请留言。","categories":[{"name":"vpn","slug":"vpn","permalink":"https://tfssweb.github.io/categories/vpn/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://tfssweb.github.io/tags/ubuntu/"},{"name":"科学上网","slug":"科学上网","permalink":"https://tfssweb.github.io/tags/科学上网/"},{"name":"vpn","slug":"vpn","permalink":"https://tfssweb.github.io/tags/vpn/"}]},{"title":"Maven知识点","slug":"Maven知识点","date":"2018-01-02T15:06:06.000Z","updated":"2019-09-03T03:15:14.015Z","comments":true,"path":"2018/01/02/Maven知识点/","link":"","permalink":"https://tfssweb.github.io/2018/01/02/Maven知识点/","excerpt":"指定Maven打包名称 在你项目的pom.xml中配置以下节点即可：","text":"指定Maven打包名称 在你项目的pom.xml中配置以下节点即可： 1234&lt;build&gt; &lt;!--maven打包后的名称 --&gt; &lt;finalName&gt;your package name&lt;/finalName&gt;&lt;/build&gt;","categories":[{"name":"maven","slug":"maven","permalink":"https://tfssweb.github.io/categories/maven/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://tfssweb.github.io/tags/maven/"}]},{"title":"Windows关闭端口占用","slug":"Windows关闭端口占用","date":"2017-12-28T14:01:02.000Z","updated":"2019-09-03T03:15:14.030Z","comments":true,"path":"2017/12/28/Windows关闭端口占用/","link":"","permalink":"https://tfssweb.github.io/2017/12/28/Windows关闭端口占用/","excerpt":"Windows关闭端口占用","text":"Windows关闭端口占用 12netstat -a -o -ntaskkill /F /PID 8316","categories":[{"name":"小技巧","slug":"小技巧","permalink":"https://tfssweb.github.io/categories/小技巧/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://tfssweb.github.io/tags/windows/"}]},{"title":"批量提取文件名字到记事本","slug":"批量提取文件名字到记事本 ","date":"2017-12-08T03:23:29.000Z","updated":"2019-09-03T03:15:14.058Z","comments":true,"path":"2017/12/08/批量提取文件名字到记事本 /","link":"","permalink":"https://tfssweb.github.io/2017/12/08/批量提取文件名字到记事本 /","excerpt":"批量提取文件名字到记事本","text":"批量提取文件名字到记事本 第一步，新建一个txt格式的记事本文件。 第二步，在记事本文件中输入：DIR *.* /B &gt;LIST.TXT 第三步，将此记事本文件后辍名，由txt改为bat。会弹出重命名对话框，单击“是”。","categories":[{"name":"小技巧","slug":"小技巧","permalink":"https://tfssweb.github.io/categories/小技巧/"}],"tags":[{"name":"批量","slug":"批量","permalink":"https://tfssweb.github.io/tags/批量/"},{"name":"小技巧","slug":"小技巧","permalink":"https://tfssweb.github.io/tags/小技巧/"}]},{"title":"Cron","slug":"Cron","date":"2017-11-21T13:09:20.000Z","updated":"2019-09-03T03:15:13.995Z","comments":true,"path":"2017/11/21/Cron/","link":"","permalink":"https://tfssweb.github.io/2017/11/21/Cron/","excerpt":"关于cron表达式（参考资料）：Cron 表达式包括以下 7 个字段： 秒、分、小时、月内日期、月、周内日期、年（可选字段）特殊字符Cron 触发器利用一系列特殊字符，如下所示：","text":"关于cron表达式（参考资料）：Cron 表达式包括以下 7 个字段： 秒、分、小时、月内日期、月、周内日期、年（可选字段）特殊字符Cron 触发器利用一系列特殊字符，如下所示： 反斜线（/）字符表示增量值。例如，在秒字段中“5/15”代表从第 5 秒开始，每 15 秒一次。问号（?）字符和字母 L 字符只有在月内日期和周内日期字段中可用。问号表示这个字段不包含具体值。所以，如果指定月内日期，可以在周内日期字段中插入“?”，表示周内日期值无关紧要。字母 L 字符是 last 的缩写。放在月内日期字段中，表示安排在当月最后一天执行。在周内日期字段中，如果“L”单独存在，就等于“7”，否则代表当月内周内日期的最后一个实例。所以“0L”表示安排在当月的最后一个星期日执行。在月内日期字段中的字母（W）字符把执行安排在最靠近指定值的工作日。把“1W”放在月内日期字段中，表示把执行安排在当月的第一个工作日内。井号（#）字符为给定月份指定具体的工作日实例。把“MON#2”放在周内日期字段中，表示把任务安排在当月的第二个星期一。星号（*）字符是通配字符，表示该字段可以接受任何可能的值。字段 允许值 允许的特殊字符秒 0-59 , - * /分 0-59 , - * /小时 0-23 , - * /日期 1-31 , - * ? / L W C月份 1-12 或者 JAN-DEC , - * /星期 1-7 或者 SUN-SAT , - * ? / L C #年（可选） 留空, 1970-2099 , - * / 表达式意义“0 0 12 * * ?” 每天中午12点触发“0 15 10 ? * *” 每天上午10:15触发“0 15 10 * * ?” 每天上午10:15触发“0 15 10 * * ? *” 每天上午10:15触发“0 15 10 * * ? 2005” 2005年的每天上午10:15触发“0 * 14 * * ?” 在每天下午2点到下午2:59期间的每1分钟触发“0 0/5 14 * * ?” 在每天下午2点到下午2:55期间的每5分钟触发“0 0/5 14,18 * * ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发“0 0-5 14 * * ?” 在每天下午2点到下午2:05期间的每1分钟触发“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发“0 15 10 15 * ?” 每月15日上午10:15触发“0 15 10 L * ?” 每月最后一日的上午10:15触发“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发每天早上6点0 6 * * *每两个小时0 */2 * * *晚上11点到早上8点之间每两个小时，早上八点0 23-7/2，8 * * *每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点0 11 4 * 1-31月1日早上4点 0 4 1 1 *","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"Cron","slug":"Cron","permalink":"https://tfssweb.github.io/tags/Cron/"}]},{"title":"容器怎么取宿主机 IP 啊？","slug":"容器怎么取宿主机 IP 啊？","date":"2017-11-08T03:40:00.000Z","updated":"2019-09-03T03:15:14.051Z","comments":true,"path":"2017/11/08/容器怎么取宿主机 IP 啊？/","link":"","permalink":"https://tfssweb.github.io/2017/11/08/容器怎么取宿主机 IP 啊？/","excerpt":"单机环境如果是单机环境，很简单，不必琢磨怎么突破命名空间限制，直接用环境变量送进去即可。 1docker run -d -e HOST_IP=&lt;宿主的IP地址&gt; nginx 然后容器内直接读取 HOST_IP 环境变量即可。 集群环境集群环境相对比较复杂，docker service create 中的 -e 以及 –env-file是在服务创建时指定、读取环境变量内容，而不是运行时，因此对于每个节点都是一样的。而且目前不存在 dockerd -e 选项，所以直接使用这些选项达不到我们想要的效果。","text":"单机环境如果是单机环境，很简单，不必琢磨怎么突破命名空间限制，直接用环境变量送进去即可。 1docker run -d -e HOST_IP=&lt;宿主的IP地址&gt; nginx 然后容器内直接读取 HOST_IP 环境变量即可。 集群环境集群环境相对比较复杂，docker service create 中的 -e 以及 –env-file是在服务创建时指定、读取环境变量内容，而不是运行时，因此对于每个节点都是一样的。而且目前不存在 dockerd -e 选项，所以直接使用这些选项达不到我们想要的效果。 不过有变通的办法，可以在宿主上建立一个 /etc/variables 文件（名字随意，这里用这个文件举例）。其内容为： HOST_IP=1.2.3.4其中 1.2.3.4 是这个节点的宿主 IP，因此每个节点的 /etc/variables 的内容不同。 而在启动服务时，指定挂载这个服务端本地文件： 123docker service create --name app \\ --mount type=bind,source=/etc/variables,target=/etc/variables:ro \\ myapp 由于 –mount 是发生于容器运行时，因此所加载的是所运行的服务器的 /etc/variables，里面所包含的也是该服务器的 IP 地址。 在 myapp 这个镜像的入口脚本加入加载该环境变量文件的命令： 1source /etc/variables 这样 app 这个服务容器就会拥有 HOST_IP 环境变量，其值为所运行的宿主 IP。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"ip","slug":"ip","permalink":"https://tfssweb.github.io/tags/ip/"},{"name":"宿主机","slug":"宿主机","permalink":"https://tfssweb.github.io/tags/宿主机/"}]},{"title":"如何修改容器的 /etc/hosts 文件？","slug":"如何修改容器的hosts 文件？","date":"2017-10-23T07:11:13.000Z","updated":"2019-09-03T03:15:14.045Z","comments":true,"path":"2017/10/23/如何修改容器的hosts 文件？/","link":"","permalink":"https://tfssweb.github.io/2017/10/23/如何修改容器的hosts 文件？/","excerpt":"容器内的 /etc/hosts 文件不应该被随意修改，如果必须添加主机名和 IP 地址映射关系，应该在 docker run 时使用 –add-host 参数，或者在 docker-compose.yml 中添加 extra_hosts 项。","text":"容器内的 /etc/hosts 文件不应该被随意修改，如果必须添加主机名和 IP 地址映射关系，应该在 docker run 时使用 –add-host 参数，或者在 docker-compose.yml 中添加 extra_hosts 项。 不过在用之前，应该再考虑一下真的需要修改 /etc/hosts 么？如果只是为了容器间互相访问，应该建立自定义网络，并使用 Docker 内置的 DNS 服务。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"hosts","slug":"hosts","permalink":"https://tfssweb.github.io/tags/hosts/"}]},{"title":"怎么固定容器 IP 地址？每次重启容器都要变化 IP 地址怎么办？","slug":"怎么固定容器 IP 地址？每次重启容器都要变化 IP 地址怎么办？","date":"2017-10-15T03:13:13.000Z","updated":"2019-09-03T03:15:14.054Z","comments":true,"path":"2017/10/15/怎么固定容器 IP 地址？每次重启容器都要变化 IP 地址怎么办？/","link":"","permalink":"https://tfssweb.github.io/2017/10/15/怎么固定容器 IP 地址？每次重启容器都要变化 IP 地址怎么办？/","excerpt":"一般情况是不需要指定容器 IP 地址的。这不是虚拟主机，而是容器。其地址是供容器间通讯的，容器间则不用 IP 直接通讯，而使用容器名、服务名、网络别名。","text":"一般情况是不需要指定容器 IP 地址的。这不是虚拟主机，而是容器。其地址是供容器间通讯的，容器间则不用 IP 直接通讯，而使用容器名、服务名、网络别名。 为了保持向后兼容，docker run 在不指定 –network 时，所在的网络是 default bridge，在这个网络下，需要使用 –link 参数才可以让两个容器找到对方。 这是有局限性的，因为这个时候使用的是 /etc/hosts 静态文件来进行的解析，比如一个主机挂了后，重新启动IP可能会改变。虽然说这种改变Docker是可能更新/etc/hosts文件，但是这有诸多问题，可能会因为竞争冒险导致 /etc/hosts 文件损毁，也可能还在运行的容器在取得 /etc/hosts 的解析结果后，不再去监视该文件是否变动。种种原因都可能会导致旧的主机无法通过容器名访问到新的主机。 参考官网文档：https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/ 如果可能不要使用这种过时的方式，而是用下面说的自定义网络的方式。 而对于新的环境（Docker 1.10以上），应该给容器建立自定义网络，同一个自定义网络中，可以使用对方容器的容器名、服务名、网络别名来找到对方。这个时候帮助进行服务发现的是Docker 内置的DNS。所以，无论容器是否重启、更换IP，内置的DNS都能正确指定到对方的位置。 参考官网文档：https://docs.docker.com/engine/userguide/networking/work-with-networks/#linking-containers-in-user-defined-networks 建议参考一下我写的 LNMP 的例子：https://coding.net/u/twang2218/p/docker-lnmp/git","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"SQL Server配置","slug":"SQL Server配置","date":"2017-10-11T14:10:00.000Z","updated":"2019-09-03T03:15:14.023Z","comments":true,"path":"2017/10/11/SQL Server配置/","link":"","permalink":"https://tfssweb.github.io/2017/10/11/SQL Server配置/","excerpt":"123456789username=sapassword=root#driverClassName=net.sourceforge.jtds.jdbc.DriverdriverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver#url=dburl\\=jdbc\\:jtds\\:sqlserver\\://localhost\\:1433;DatabaseName\\=qinviteappn;User\\=sa;Password\\=rooturl=jdbc:sqlserver://localhost:1433;DatabaseName=qinviteappn;User=sa;Password=rootClass.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);conn = DriverManager.getConnection(&quot;jdbc:sqlserver://localhost:1433;DatabaseName=qinviteappn;User=sa;Password=root&quot;);","text":"123456789username=sapassword=root#driverClassName=net.sourceforge.jtds.jdbc.DriverdriverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver#url=dburl\\=jdbc\\:jtds\\:sqlserver\\://localhost\\:1433;DatabaseName\\=qinviteappn;User\\=sa;Password\\=rooturl=jdbc:sqlserver://localhost:1433;DatabaseName=qinviteappn;User=sa;Password=rootClass.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);conn = DriverManager.getConnection(&quot;jdbc:sqlserver://localhost:1433;DatabaseName=qinviteappn;User=sa;Password=root&quot;);","categories":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/categories/数据库/"}],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"https://tfssweb.github.io/tags/SQL-Server/"}]},{"title":"Maven阿里私服仓库","slug":"Maven阿里私服仓库","date":"2017-09-21T03:02:12.000Z","updated":"2019-09-24T07:47:37.968Z","comments":true,"path":"2017/09/21/Maven阿里私服仓库/","link":"","permalink":"https://tfssweb.github.io/2017/09/21/Maven阿里私服仓库/","excerpt":"Windows123456789101112131415&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\"&gt; &lt;localRepository&gt;D:\\software\\.m2\\repository&lt;/localRepository&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;","text":"Windows123456789101112131415&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\"&gt; &lt;localRepository&gt;D:\\software\\.m2\\repository&lt;/localRepository&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt; Linux123456789101112131415&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\"&gt; &lt;localRepository&gt;/root/.m2/repository&lt;/localRepository&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"私服","slug":"私服","permalink":"https://tfssweb.github.io/tags/私服/"},{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://tfssweb.github.io/tags/maven/"}]},{"title":"Linux 常用命令","slug":"Linux安装Redis","date":"2017-09-08T10:12:23.000Z","updated":"2019-09-03T03:15:14.011Z","comments":true,"path":"2017/09/08/Linux安装Redis/","link":"","permalink":"https://tfssweb.github.io/2017/09/08/Linux安装Redis/","excerpt":"Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 下面将介绍如何在linux（此文以ubuntu为准）机器上安装redis。","text":"Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 下面将介绍如何在linux（此文以ubuntu为准）机器上安装redis。 第一步：下载Redis安装包下载Redis安装包：下载链接，然后上传服务器。或者执行以下命令： 1wget http://download.redis.io/releases/redis-4.0.2.tar.gz 点击即可下载。 第二步：解压redis-4.0.2.tar.gz解压redis-4.0.2.tar.gz 并且进入解压目录，依次执行： 1tar -zxvf redis-4.0.2.tar.gz 第三步：安装gcc编译器 GCC是一个用于linux系统下编程的编译器，在安装redis的时候需要GCC去编译。执行： 123apt-get install gcc或：apt-get install build-essential 安装好了GCC，可以执行gcc -v查看版本，如下图：成功之后就可以安装redis了，在解压目录中依次执行： 12makemake install 第四步：修改配置文件 在修改配置文件的时候，保险做法就是先备份，那么这里将redis.conf文件（如下图）备份到myredis(我创建在了根目录下)文件夹下，执行： 1cp redis.conf /myredis/ 现在我这里来执行vim /myredis/redis.conf来修改redis.conf配置文件，如下图 将daemonize no改为daemonize yes。 第五步：启动服务 linux系统默认安装软件，一般都会安装在/usr/local/bin目录，所以执行cd /usr/local/bin，进入到该目录，如下图： 依次执行： 12redis-server /myredis/redis.confredis-cli -p 6379 即可启动服务，并且进入交互界面。","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"redis","slug":"redis","permalink":"https://tfssweb.github.io/tags/redis/"}]},{"title":"Docker入门级简易手册","slug":"Docker入门级简易手册","date":"2017-08-22T12:14:44.000Z","updated":"2019-09-03T03:15:13.999Z","comments":true,"path":"2017/08/22/Docker入门级简易手册/","link":"","permalink":"https://tfssweb.github.io/2017/08/22/Docker入门级简易手册/","excerpt":"Docker入门级简易手册本篇经作为新手入门使用，大神们可以指导小弟修正，不喜勿喷，谢谢 本篇主要讲解如下几个知识点： CentOS7与Ubuntu下安装Docker，配置加速器 常见Dockerfile命令讲解 docker-compo安装与常见命令讲解 根据项目如何使用Docker部署应用 Swarm集群下发布基于LNMP的WordPress应用发布 NodeJS应用发布 Flask应用发布 基于Tomcat定制封装Jenkins镜像 搭建私有仓库 每次代码写好了都要自己构建觉得麻烦怎么办？","text":"Docker入门级简易手册本篇经作为新手入门使用，大神们可以指导小弟修正，不喜勿喷，谢谢 本篇主要讲解如下几个知识点： CentOS7与Ubuntu下安装Docker，配置加速器 常见Dockerfile命令讲解 docker-compo安装与常见命令讲解 根据项目如何使用Docker部署应用 Swarm集群下发布基于LNMP的WordPress应用发布 NodeJS应用发布 Flask应用发布 基于Tomcat定制封装Jenkins镜像 搭建私有仓库 每次代码写好了都要自己构建觉得麻烦怎么办？ Docker入门级简易手册本篇经作为新手入门使用，大神们可以指导小弟修正，不喜勿喷，谢谢 本篇主要讲解如下几个知识点： CentOS7与Ubuntu下安装Docker，配置加速器 常见Dockerfile命令讲解 docker-compo安装与常见命令讲解 根据项目如何使用Docker部署应用 Swarm集群下发布基于LNMP的WordPress应用发布 NodeJS应用发布 Flask应用发布 基于Tomcat定制封装Jenkins镜像 搭建私有仓库 每次代码写好了都要自己构建觉得麻烦怎么办？ CentOS7与Ubuntu下安装Docker​ 这里应该有人会有一个疑问，为什么软件包名是docker-ce而不是docker-engine。docker版本在1.13以后有两个版本，分别是ce和ee版本，ce是开源社区办，ee是收费版，所以改了。 CentOS71234567yum install -y yum-utils device-mapper-persistent-data lvm2 curlyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum -y install docker-ce# 安装指定版本DOCKER_VERSION=17.03.1.ceyum install docker-engine-selinux-$&#123;DOCKER_VERSION&#125;* docker-engine-$&#123;DOCKER_VERSION&#125;* -y Ubuntu12345678910111213141516171819apt-get remove docker docker-engine docker.io -yapt-get updateapt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -ycurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -apt-key fingerprint 0EBFCD88add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"apt-get updateapt-get install docker-ce -y# 安装指定版本DOCKER_VERSION=17.03.1*apt-get install docker-ce=$&#123;DOCKER_VERSION&#125; -y 配置加速器​ 不想申请加速器的朋友可以使用我的，也可以自己去申请阿里云或者Daocloud的加速器。docker版本不同配置文件路径存在差异，具体请查询官网，本篇针对17.*的版本。 12345678910111213mkdir -p /etc/dockercat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123; &quot;registry-mirrors&quot; : [ &quot;https://i3jtbyvy.mirror.aliyuncs.com&quot; ], &quot;debug&quot; : true, &quot;experimental&quot; : true&#125;EOFsystemctl restart docker 常见Dockerfile命令讲解​ Dockerfile简单一点就是描述你这个镜像安装了哪些软件包，有哪些操作，创建了什么东西。有些人喜欢用 docker commit 命令去打包镜像，这样是不好的，首先commit出来的镜像比你使用Dockerfile构建出来的体积大，而且commit出来的镜像属于黑盒镜像，除了制作者，谁都不知道你在里面干了什么，属于不安全的镜像，很少会有人使用，最后就是不便于你最终的管理和更新。所以推荐使用Dockerfile去管理你的镜像，下面将简单介绍Dockerfile常见的指令和注意事项： FROM​ FROM命令是指定你所使用的基础镜像，一般写在文件开头，对于官方没给出Dockerfile的软件想Docker化，那么引用的镜像一般是debian:jessie、alpine、ubuntu，如果官方已经有了，比如nginx、php、mysql这写，那么基本直接引用即可。 指令语法： 12345678910FROM &lt;image&gt;FROM &lt;image&gt;:&lt;tag&gt;FROM &lt;image&gt;:&lt;digest&gt;eg:FROM debian:jessieFROM alpine:3.6FROM ubuntu:16.04FROM mysql:5.7FROM python:2.7 MAINTAINER​ MAINTAINER命令一般是描述这个Dockerfile的作者信息， 指令语法： 1234MAINTAINER &lt;name&gt;eg:MAINTAINER &quot;MoMo&quot; &lt;95112082@qq.com&gt; RUN​ 运行指定的命令，此命令只有在执行docker build时才会执行，其他情况下不会执行。这时候有很多初学者会以为在写SHELL，那么在一个Dockerfile里面会出现很多不合理的RUN指令，了解过Docker的朋友应该都知道Docker的镜像是分层结构，说白了就是Dockerfile里面一个指令的操作就是一层。比如下面的操作，一条RUN命令包含了更新源缓存，安装openjdk，清理垃圾，这样的好处是最终这一层会很小，假设你分开写，四个命令四个RUN指令，但是只有第二条命令才是你想要的，那么第一条产生的缓存垃圾就不发删除掉。这也算是优化的一部分。 指令语法： 12345678这里只写第一种格式，有兴趣的朋友可以去官网看看其他的方式RUN &lt;command&gt;eg:RUN apt-get update \\ &amp;&amp; apt-get install openjdk-8-jdk --no-install-recommends -y \\ &amp;&amp; apt-get clean all \\ &amp;&amp; rm -rf /var/lib/apt/lists/* CMD​ 设置容器启动时要运行的命令只有在你执行 docker run 或者 docker start 命令是才会运行，其他情况下不运行。如果一个Dockerfile里面有多条CMD指令，那么只有文件最后一行的 CMD 指令才会生效，其他的全部没用，还有一点，还有一点 CMD 指令是可以在你执行 docker run 的时候覆盖的。 指令语法： 1234CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]eg:CMD [&quot;python&quot;,&quot;flask.py&quot;] EXPOSE​ 设置暴露的容器端口，注意是容器端口。 指令语法： 12345EXPOSE porteg:EXPOSE 80EXPOSE 80 443 ENV​ 功能为设置环境变量，此环节变量可以是在构建镜像时使用，也可以在运行中的容器使用。 指令语法： 123456789101112ENV &lt;key&gt; &lt;value&gt;eg:一种写法ENV JAVA_HOME /usr/lib/jvm/java-7-openjdk-amd64ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV PATH $PATH:$JAVA_HOME/bin:$JRE_HOME/bin另一种写法ENV JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64 \\ CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \\ PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin ADD​ 复制命令，把本机的文件复制到镜像中，如果dest是目录则会帮你创建出这个目录，如果src是压缩文件会帮你解压出来。当然ADD指令中的src也可以是URL链接，还有另外一个指令（COPY），请注意区别！！！ ​ 另外，src部分是是你Dockerfile的相对路径，这个请注意！！！ 指令语法： 12345ADD &lt;src&gt; &lt;dest&gt;eg:ADD nginx.conf /etc/nginx/nginx.confADD app.tar.gz /app/app.tar.gz COPY​ 与ADD指令一样，但是COPY的src部分只能是本地文件，文件路径是Dockerfile的相对路径。如果dest是目录并且目录不存在，会帮你创建，如果是压缩文件不会帮你解压。 指令语法： 123COPY &lt;src&gt; &lt;dest&gt;COPY app.tar.gz /app/ ENTRYPOINT​ 启动时的默认命令，此指令设置的命令不可修改。与CMD是有区别的。此命令在Dockerfile只能有一个，若有多个，则以文件最后一个出现的才生效。 指令语法： 12345ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]eg:ENTRYPOINT [&quot;nginx&quot;]CMD [&quot;-g&quot;,&quot;daemon off;&quot;] ​ 如上，如果执行 docker run -d --name nginx -P nginx 则最终容器内执行的命令是nginx -g daemon off; ，如果你执行的命令是 docker run -d --name nginx -P nginx bash 则最终容器内执行的命令是nginx bash 注意区别，细心体会。 VOLUME​ 设置你的卷，在启动容器的时候Docker会在/var/lib/docker的下一级目录下创建一个卷，以保存你在容器中产生的数据。若没有申明则不会创建。 指令语法： 12345VOLUME [&quot;/path/to/directory&quot;]eg:VOLUME [&quot;/data&quot;]VOLUME [&quot;/data&quot;,&quot;/app/etc&quot;] USER​ 指定容器运行的用户是谁，前提条件，用户必须存在。此指令可以在构建镜像是使用或指定容器中进程的运行用户是谁。 指令语法： 1234USER daemoeg:USER nginx WORKDIR​ 指定容器中的工作目录，可以在构建时使用，也可以在启动容器时使用，构建使用就是通过 WORKDIR 将当前目录切换到指定的目录中，容器中使用的意思则是在你使用 docker run 命令启动容器时，默认进入的目录是 WORKDIR 指定的，下面的example中我使用环境变量。 指令语法： 1234WORKDIR /path/to/workdireg:WORKDIR /usr/local/zookeeper-$&#123;ZOOKEEPER_VERSION&#125; 以上为常用的Dockerfile指令，详细文档请参考官方文档：https://docs.docker.com/engine/reference/builder/ docker-compose安装与常见命令讲解docker-compose安装方法一1234curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose#查看版本docker-compose version 方法二123456789101112CentOS:yum install epel-release -yyum install python-pip -yUbuntu:apt-get install python-pip -y# 通用命令pip --versionpip install --upgrade pippip install -U -i https://pypi.tuna.tsinghua.edu.cn/simple docker-composedocker-compose version 常见命令讲解单机docker-compose模版注意nginx、php、mysql、redis这几个容器的网络是怎么通讯的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102# 定义docker-compose版本，有些参数只有高版本才有，底版本没有version: '3.4'# 定义服务，可以是一个，也可以是多个services: # 具体的服务名，其他的服务可以用过这个名字访问 nginx: # 定义这个服务所使用的镜像以及进项版本，若不指定版本默认是latest，生产环境不建议使用latest image: nginx:1.13.6-alpine # 定义容器启动后的主机名，其他的服务可以用过这个名字访问 hostname: nginx # 定义暴露端口，若写成 '80:80/tcp' 的格式则表示指定宿主机的80转发到容器的80，若写成 '80/tcp' 则表示Docker将随机分配一个宿主机端口给容器内的80端口，tcp表示协议类型，也可以是udp ports: - 80:80/tcp # 网络定义部分 networks: # 定义这个容器运行在哪个虚拟网络里面 wordpress: # 设置这个容器在网络中的别名，可以是一个，可以是多个，其他的服务可以用过这个名字访问 aliases: - nginx # 定义卷，可以是卷，也可以是目录，可以设置容器内的权限是什么 volumes: # 将docker-compose的相对目录下的nginx配置文件挂载到容器内的/etc/nginx/nginx.conf地方去，权限是只读 # 大致格式：src:dest:mode # src: 可以是卷名，宿主机目录等，可以是文件或者目录，若是文件则文件必须存在，否则会是目录的形式挂载 # dest: 容器内的路径，可以是文件可以是目录，若是文件则文件必须存在，否则会是目录的形式挂载 # mode: 权限，只读(ro)，可读可写(rw) - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro - ./www:/var/www/html:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro # 日志定义 logging: # 使用的驱动是什么，官方给出很多方式，具体可以查看官方文档，这里使用的json-file driver: json-file # 定义日志的参数 options: # 设置最大文件数3个，每个文件大小为100MB max-file: '3' max-size: 100m# 下面的部分我只会将上面没有出现的部分注释出来，有的部分不做说明 wordpress: image: wordpress:4.9.1-php7.1-fpm-alpine hostname: php networks: wordpress: aliases: - wordpress # 环境变量设置，key=value environment: - WORDPRESS_DB_HOST=mysql - WORDPRESS_DB_USER=root - WORDPRESS_DB_PASSWORD=root - WORDPRESS_DB_NAME=xbclub - WORDPRESS_TABLE_PREFIX=wp_ volumes: - ./www:/var/www/html:rw - ./php/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini:ro - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100m mysql: image: mysql:5.7.20 hostname: mysql networks: wordpress: aliases: - mysql environment: - MYSQL_ROOT_PASSWORD=root volumes: - ./mysql:/var/lib/mysql - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100m redis: image: redis:4.0.6 hostname: redis networks: wordpress: aliases: - redis volumes: - ./redis:/data:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro logging: driver: json-file options: max-file: '3' max-size: 100m# 定义这个compose文件中使用的网络networks: # 网络名称，和上文中的wordpress一直，这里注意不是上文中出现的wordpress这个服务，而是是网络！！！ wordpress: # 是否是外部网络，这里可以理解为如果是外部网络那么网络的名字就叫wordpress，这样方便其他的服务接入到这个网络，如果不是，在你使用docker-compose up -d 命令的时候他会以你当前的文件夹的名字加上这里定义的网络名作为你这个compose的网络。比如我的这个compose文件在test下面，如果external为true，那么你需要手动创建这个网络然后去指定命令启动这个compose；如果为flase则网络的名字将会以test_wordpress出现在你的docker network ls中。具体可以自己去试一下就知道大概是什么意思了。 external: true 集群docker-compose模版以下文件中将只会备注单机版中没有说明的部分。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596version: '3.4'services: nginx: image: nginx:1.13.6-alpine hostname: nginx ports: - 3000:80/tcp networks: xbclub: aliases: - nginx volumes: - /nfs/xbclub/nginx/nginx.conf:/etc/nginx/nginx.conf:ro - /nfs/xbclub/www:/var/www/html:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro # 定义你这个服务的运行方式 deploy: # 模式定义，主要两种，全局模式和副本模式(自己翻译的)，全局模式将会在所有的Swarm节点上运行一个实例，副本模式则指定运行你在replicas指定的个数。 mode: replicated replicas: 3 # 服务的运行规则，下面这部分的意识是“这个Nginx服务将只会匹配集群中的工作节点，但是主机名不是‘Docker-Swarm-MySQL’，‘Docker-Swarm-Redis’，‘Docker-Swarm-NFS’的节点上运行这个Nginx服务”。下面的部分基本大同小异，这里就不啰嗦了。 placement: constraints: - node.role == worker - node.hostname != Docker-Swarm-MySQL - node.hostname != Docker-Swarm-Redis - node.hostname != Docker-Swarm-NFS wordpress: image: wordpress:4.9.1-php7.1-fpm-alpine hostname: php networks: xbclub: aliases: - wordpress environment: - WORDPRESS_DB_HOST=mysql - WORDPRESS_DB_USER=root - WORDPRESS_DB_PASSWORD=root - WORDPRESS_DB_NAME=xbclub - WORDPRESS_TABLE_PREFIX=wp_ volumes: - /nfs/xbclub/www:/var/www/html:rw - /nfs/xbclub/php/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini:ro - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 3 placement: constraints: - node.role == worker - node.hostname != Docker-Swarm-MySQL - node.hostname != Docker-Swarm-Redis - node.hostname != Docker-Swarm-NFS mysql: image: mysql:5.7.20 hostname: mysql networks: xbclub: aliases: - mysql environment: - MYSQL_ROOT_PASSWORD=root volumes: - /mysql/xbclub:/var/lib/mysql - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 1 placement: constraints: - node.hostname == Docker-Swarm-MySQL logging: driver: json-file options: max-file: '3' max-size: 100m redis: image: redis:4.0.6 hostname: redis networks: xbclub: aliases: - redis volumes: - /redis/xbclub:/data:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 1 placement: constraints: - node.hostname == Docker-Swarm-Redis# 这里需要说明，集群环境下你需要执行“docker network create --driver overlay NetworkName”命令创建，网络的SCOPE部分显示的是Swarm才是对的。networks: xbclub: external: true 这里我只是把我常用的贴出来加以说明，如果各位有想要补充的可以告诉我，我在加上去，详细介绍可以看官网 https://docs.docker.com/compose/compose-file/ 根据项目如何使用Docker部署应用Swarm集群下发布基于LRNMP的WordPress应用发布​ 本实例，默认你已经装好系统，装好Docker并创建好Swarm集群。 ​ 集群约定，对于无状态应用如Nginx，WordPress我们使用NFS去实现Web站点的数据保存以及共享服务以保证所有容器（Nginx、WordPress）数据一致性问题，MySQL数据库我将指定单台主机去实现MySQL数据库功能，数据库目录将存放在所在宿主机上，那么存在一个问题，MySQL高可用如何去实现，这里可以基于MySQL的架构去实现数据库这块的高可用性本篇不讨论如何实现。 应用目录结构： 站点在NFS主目录位置：/nfs/lnmp 站点目录：/nfs/lnmp/www Nginx配置文件目录：/nfs/lnmp/nginx WordPress配合文件目录：/nfs/lnmp/php Redis数据目录（Docker-Swarm-Redis主机下）：/redis/lnmp MySQL数据目录（Docker-Swarm-MySQL主机下）：/mysql/lnmp 镜像相关文档： Redi：https://hub.docker.com/_/redis/ Nginx：https://hub.docker.com/_/nginx/ WordPress：https://hub.docker.com/_/wordpress/ MySQL：https://hub.docker.com/_/mysql/ 集群节点清单： 主机名 节点作用 运行的容器 Docker-Swarm-MySQL MySQL节点，只跑MySQL不跑其他的应用 MySQL Docker-Swarm-Redis Redis节点，只跑Redis不跑其他的应用 Redis Docker-Swarm-NFS NFS节点，只用于数据共享，不运行任何应用 N/A Docker-Swarm-Master01 Swarm集群管理节点 N/A Docker-Swarm-Node01 Swarm集群工作节点 Nginx、WordPress Docker-Swarm-Node02 Swarm集群工作节点 Nginx、WordPress 准备编排文件，内容如下（docker-compose.yaml）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192version: '3.4'services: nginx: image: nginx:1.13.6-alpine hostname: nginx ports: - 3000:80/tcp networks: xbclub: aliases: - nginx volumes: - /nfs/lnmp/nginx/nginx.conf:/etc/nginx/nginx.conf:ro - /nfs/lnmp/www:/var/www/html:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 3 placement: constraints: - node.role == worker - node.hostname != Docker-Swarm-MySQL - node.hostname != Docker-Swarm-Redis - node.hostname != Docker-Swarm-NFS wordpress: image: wordpress:4.9.1-php7.1-fpm-alpine hostname: php networks: xbclub: aliases: - wordpress environment: - WORDPRESS_DB_HOST=mysql - WORDPRESS_DB_USER=root - WORDPRESS_DB_PASSWORD=root - WORDPRESS_DB_NAME=xbclub - WORDPRESS_TABLE_PREFIX=wp_ volumes: - /nfs/lnmp/www:/var/www/html:rw - /nfs/lnmp/php/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini:ro - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 3 placement: constraints: - node.role == worker - node.hostname != Docker-Swarm-MySQL - node.hostname != Docker-Swarm-Redis - node.hostname != Docker-Swarm-NFS mysql: image: mysql:5.7.20 hostname: mysql networks: xbclub: aliases: - mysql environment: - MYSQL_ROOT_PASSWORD=root volumes: - /mysql/lnmp:/var/lib/mysql - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 1 placement: constraints: - node.hostname == Docker-Swarm-MySQL logging: driver: json-file options: max-file: '3' max-size: 100m redis: image: redis:4.0.6 hostname: redis networks: xbclub: aliases: - redis volumes: - /redis/lnmp:/data:rw - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro deploy: mode: replicated replicas: 1 placement: constraints: - node.hostname == Docker-Swarm-Redisnetworks: xbclub: external: true Nginx配置文件（nginx.conf）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109user nginx nginx;worker_processes auto;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;worker_rlimit_nofile 51200;events &#123; use epoll; worker_connections 51200; multi_accept on;&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main &apos;&#123;&quot;remote_addr&quot;:&quot;$remote_addr&quot;,&apos; &apos;&quot;http_x_forwarded_for&quot;:&quot;$http_x_forwarded_for&quot;,&apos; &apos;&quot;remote_user&quot;:&quot;$remote_user&quot;,&apos; &apos;&quot;time_local&quot;:&quot;$time_local&quot;,&apos; &apos;&quot;request&quot;:&quot;$request&quot;,&apos; &apos;&quot;status&quot;:&quot;$status&quot;,&apos; &apos;&quot;request_time&quot;:&quot;$request_time&quot;,&apos; &apos;&quot;body_bytes_sent&quot;:&quot;$body_bytes_sent&quot;,&apos; &apos;&quot;http_referer&quot;:&quot;$http_referer&quot;,&apos; &apos;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;&#125;&apos;; server_names_hash_bucket_size 128; client_header_buffer_size 32k; large_client_header_buffers 4 32k; client_max_body_size 50m; sendfile on; tcp_nopush on; keepalive_timeout 60; tcp_nodelay on; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 256k; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss; gzip_vary on; gzip_proxied expired no-cache no-store private auth; gzip_disable &quot;MSIE [1-6]\\.&quot;; server_tokens off; server &#123; listen 80; server_name _; index index.html index.htm index.php; location / &#123; deny all; &#125; &#125; server&#123; listen 80; server_name www.example.com ; server_name _; index index.html index.htm index.php default.html default.htm default.php; root /var/www/html; location / &#123; try_files $uri $uri/ /index.php?$args; &#125; # Add trailing slash to */wp-admin requests. rewrite /wp-admin$ $scheme://$host$uri/ permanent; # Deny access to PHP files in specific directory #location ~ /(wp-content|uploads|wp-includes|images)/.*\\.php$ &#123; deny all; &#125; location ~ [^/]\\.php(/|$) &#123; try_files $uri =404; fastcgi_pass wordpress:9000; fastcgi_index index.php; include fastcgi.conf; &#125; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\\.(js|css)?$ &#123; expires 12h; &#125; location ~ /.well-known &#123; allow all; &#125; location ~ /\\. &#123; deny all; &#125; &#125;&#125; WordPress配置文件（uploads.ini）： 12345file_uploads = Onmemory_limit = 64Mupload_max_filesize = 64Mpost_max_size = 64Mmax_execution_time = 600 本实例项目地址：https://github.com/buxiaomo/docker-compose/tree/master/wordpress 总结： 本实例我们直接使用的是官方的镜像，没有做定制操作，原因如下： 1、不要重复造轮子，官方有镜像尽量使用官方的镜像不要自己构建 2、官方镜像有人维护，不需要自己维护，较少成本 3、官方镜像基本可以满足大部分应用需求，所以基本不需要进行定制化，如果需要定制化可以直接使用FROM BASEIMAGE去做定制化，而不是从头再来。 NodeJS应用发布​ 针对自己写Dockerfile构将APP镜像，首先需要有一点，你的APP必须可以前台运行！！！ ​ 由于官方有镜像，我们就直接引用即可，不需要自己去构建NodeJS的镜像，这里我一一个NodeJS的WebUI去实现镜像封装以及运行。对于NodeJS应用，大概分为两部分，下载依赖包，运行分为，这里可以更具实际情况决定Dockerfile如何编写，理论上依赖包只需要下载一次就行了，不需要每次运行分为都去下载镜像包，那么针对这种情况可以在构建的时候把依赖包一起打包到镜像中，当然，将依赖包打包到镜像中构建出来的镜像会有点大，但是好处就是启动服务的时候不需要下载依赖包，启动时间会很快，适合离线环境；一种是在启动的时候去下载依赖包，这样的话镜像会小一点，但是启动时会去下载依赖包，启动时间会比较长，具体方式可以自己选。下面简要说一下步骤： 编写Dockerfile内容如下： 1234567891011FROM node:9.3.0ADD app /app/WORKDIR /appRUN npm iEXPOST 7001CMD [&quot;npm&quot;,&quot;run&quot;,&quot;dev&quot;] 进入Dockerfile所在目录执行docker build -t=nodejs .构建镜像 待补充 Flask应用发布项目代码：https://github.com/buxiaomo/dockerfile/tree/master/ssserverweb ​ 应用简介：应用通过Docker Engine API对基于Docker Swarm提供的SS服务管理用户添加删除和添加节点的小demo项目，本应用通过Swarm实现。Docker化应用类似于NodeJS。通过阿里云的域名API配置主机IP与域名的关系，本篇只针对应用如何使用Docker部署，代码实现不在本篇讨论范围这里不详细说明。 申明：代码可能存在逻辑问题，不要纠结这个，本篇只讨论如何容器化应用。 可以直接看GitHub的代码查看详情。准备Dockerfile，内容如下： 123456789101112131415161718FROM python:2.7.14ADD . /appWORKDIR /appRUN pip install -r requirements.txtENV ALIYUN_ID NULLENV ALIYUN_Secret NULLENV ALIYUN_RegionId cn-hangzhouENV Domain NULLENV ManagerIP NULLEXPOSE 8000CMD [&quot;python&quot;,&quot;ssserver.py&quot;] 进入Dockerfile所在目录执行docker build -t=ssserverweb .构建镜像 启动容器： 12345678docker run -d --name ssserverweb-p 8080:8000 \\-v /var/run/docker.sock:/var/run/docker.sock:ro \\-e ALIYUN_ID=*** \\-e ManagerIP=*** \\-e ALIYUN_Secret=**** \\-e DomainName=www.example.com \\ssserverweb:latest 查看服务，访问链接：http://IP:8080 即可访问到访问页面 基于Tomcat封装Jenkins镜像待补充 搭建私有仓库无SSL私有仓库搭建准备docker-compose.yml文件，内容如下： 12345678910111213141516version: '3'services: registry: image: registry:2.6.1 hostname: registry ports: - 80:5000/tcp networks: registry: aliases: - registry volumes: - /var/lib/registry:/var/lib/registry:rwnetworks: registry: external: true 启动registry容器 1root@registry:~# docker-compose -p my up -d 查看运行的私有仓库 123root@registry:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESe1b3c0551d05 registry:2.6.1 \"/entrypoint.sh /e...\" 4 seconds ago Up 3 seconds 0.0.0.0:80-&gt;5000/tcp my_registry_1 测试私有仓库，假设我的私有仓库的IP地址为：192.168.0.10 12root@registry:~# curl http://192.168.0.10/v2/_catalog&#123;&quot;repositories&quot;:[]&#125; PUSH镜像 1234root@registry:~# docker tag nginx:latest 192.168.0.10/my/nginx:latestroot@registry:~# docker push 192.168.0.10/my/nginx:latestThe push refers to a repository [192.168.0.10/my/nginx]Get https://192.168.0.10/v2/: http: server gave HTTP response to HTTPS client 上面的问题是因为你没事使用HTTPS，编辑docker配置文件即可，注意文件格式是JSON 12345678910111213&#123; # ------------增加的部分-------------- \"insecure-registries\" : [ \"192.168.0.10\" ], # ---------------------------------- \"storage-driver\": \"overlay2\", \"registry-mirrors\" : [ \"https://i3jtbyvy.mirror.aliyuncs.com\" ], \"debug\" : true, \"experimental\" : true&#125; 再次PUSH镜像 1234567root@registry:~# docker push 192.168.0.10/my/nginx:latestThe push refers to a repository [192.168.0.10/my/nginx]352a1fdf8adb: Pushed8dfa3865d14e: Pushed8a22ff826675: Pushing [==&gt; ] 4.309MB/103.6MB676c685b0f6f: Pushede27a10675c56: Pushing [=&gt; ] 2.696MB/100.1MB 有SSL私有仓库搭建准备证书 1234mkdir -p /home/registrycd /home/registryHOSTNAME=hub.xmitd.comopenssl req -newkey rsa:4096 -nodes -sha256 -keyout $&#123;HOSTNAME&#125;.key -x509 -days 365 -out $&#123;HOSTNAME&#125;.crt 准备docker-compose.yml文件 1234567891011121314151617181920version: '3'services: registry: image: registry:2.6.1 hostname: registry ports: - 443:5000/tcp networks: registry: aliases: - registry volumes: - /var/lib/registry:/var/lib/registry:rw - /home/registry:/certs environment: - REGISTRY_HTTP_TLS_KEY=/certs/hub.xmitd.com.key - REGISTRY_HTTP_TLS_CERTIFICATE=/certs/hub.xmitd.com.crtnetworks: registry: external: true 启动registry容器 1root@registry:~# docker-compose -p my up -d 查看运行的私有仓库 123root@registry:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESa58bb9aa30c0 registry:2.6.1 \"/entrypoint.sh /e...\" 2 seconds ago Up 2 seconds 0.0.0.0:443-&gt;5000/tcp my_registry_1 测试私有仓库，假设我的私有仓库的IP地址为：192.168.0.10 12root@registry:~# curl -k https://192.168.0.10/v2/_catalog&#123;\"repositories\":[]&#125; 客户端配置 123mkdir -p /etc/docker/certs.d/hub.xmitd.comcp /home/registry/hub.xmitd.com.crt /etc/docker/certs.d/hub.xmitd.com/systemctl restart docker 未完待补充 每次代码写好了都要自己构建觉得麻烦怎么办？1、可以结合GitHub与Dockerhub做到持续构建。 2、使用GitHub代码托管与daocloud的公有云服务，构建速度不错，比Dockerhub快，不用等太久。 3、Jenkins + github/Gitlab（自己动手丰衣足食） 摘自陌陌在线版：https://github.com/buxiaomo/MarkdownBooks","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"compose","slug":"compose","permalink":"https://tfssweb.github.io/tags/compose/"}]},{"title":"数据容器、数据卷、命名卷、匿名卷、挂载目录这些都有什么区别？","slug":"数据容器、数据卷、命名卷、匿名卷、挂载目录这些都有什么区别？","date":"2017-08-10T13:21:50.000Z","updated":"2019-09-03T03:15:14.059Z","comments":true,"path":"2017/08/10/数据容器、数据卷、命名卷、匿名卷、挂载目录这些都有什么区别？/","link":"","permalink":"https://tfssweb.github.io/2017/08/10/数据容器、数据卷、命名卷、匿名卷、挂载目录这些都有什么区别？/","excerpt":"首先，挂载分为挂载本地宿主目录 和 挂载数据卷(Volume)。而数据卷又分为匿名数据卷和命名数据卷。 绑定宿主目录的概念很容易理解，就是将宿主目录绑定到容器中的某个目录位置。这样容器可以直接访问宿主目录的文件。其形式是","text":"首先，挂载分为挂载本地宿主目录 和 挂载数据卷(Volume)。而数据卷又分为匿名数据卷和命名数据卷。 绑定宿主目录的概念很容易理解，就是将宿主目录绑定到容器中的某个目录位置。这样容器可以直接访问宿主目录的文件。其形式是 1docker run -d -v /var/www:/app nginx 这里注意到 -v 的参数中，前半部分是绝对路径。在 docker run 中必须是绝对路径，而在 docker-compose 中，可以是相对路径，因为 docker-compose 会帮你补全路径。 另一种形式是使用 Docker Volume，也就是数据卷。这是很多看古董书的人不了解的概念，不要跟数据容器（Data Container）弄混。数据卷是 Docker引擎维护的存储方式，使用 docker volume create 命令创建，可以利用卷驱动支持多种存储方案。其默认的驱动为 local，也就是本地卷驱动。本地驱动支持命名卷和匿名卷。 顾名思义，命名卷就是有名字的卷，使用 docker volume create --name xxx 形式创建并命名的卷；而匿名卷就是没名字的卷，一般是 docker run -v /data 这种不指定卷名的时候所产生，或者 Dockerfile里面的定义直接使用的。 有名字的卷，在用过一次后，以后挂载容器的时候还可以使用，因为有名字可以指定。所以一般需要保存的数据使用命名卷保存。 而匿名卷则是随着容器建立而建立，随着容器消亡而淹没于卷列表中（对于 docker run 匿名卷不会被自动删除）。对于二代 Swarm服务而言，匿名卷会随着服务删除而自动删除。 因此匿名卷只存放无关紧要的临时数据，随着容器消亡，这些数据将失去存在的意义。 此外，还有一个叫数据容器 (Data Container) 的概念，也就是使用 --volumes-from 的东西。这早就不用了，如果看了书还在说这种方式，那说明书已经过时了。按照今天的理解，这类数据容器，无非就是挂了个匿名卷的容器罢了。 在 Dockerfile中定义的挂载，是指 匿名数据卷。Dockerfile中指定 VOLUME的目的，只是为了将某个路径确定为卷。 我们知道，按照最佳实践的要求，不应该在容器存储层内进行数据写入操作，所有写入应该使用卷。如果定制镜像的时候，就可以确定某些目录会发生频繁大量的读写操作，那么为了避免在运行时由于用户疏忽而忘记指定卷，导致容器发生存储层写入的问题，就可以在 Dockerfile中使用 VOLUME来指定某些目录为匿名卷。这样即使用户忘记了指定卷，也不会产生不良的后果。 这个设置可以在运行时覆盖。通过 docker run 的 -v 参数或者 docker-compose.yml 的 volumes指定。使用命名卷的好处是可以复用，其它容器可以通过这个命名数据卷的名字来指定挂载，共享其内容（不过要注意并发访问的竞争问题）。 比如，Dockerfile中说 VOLUME /data，那么如果直接 docker run，其 /data 就会被挂载为匿名卷，向 /data 写入的操作不会写入到容器存储层，而是写入到了匿名卷中。但是如果运行时 docker run -v mydata:/data，这就覆盖了 /data 的挂载设置，要求将 /data 挂载到名为 mydata的命名卷中。所以说 Dockerfile中的 VOLUME实际上是一层保险，确保镜像运行可以更好的遵循最佳实践，不向容器存储层内进行写入操作。 数据卷默认可能会保存于 /var/lib/docker/volumes，不过一般不需要、也不应该访问这个位置。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"数据容器","slug":"数据容器","permalink":"https://tfssweb.github.io/tags/数据容器/"},{"name":"数据卷","slug":"数据卷","permalink":"https://tfssweb.github.io/tags/数据卷/"},{"name":"命名卷","slug":"命名卷","permalink":"https://tfssweb.github.io/tags/命名卷/"},{"name":"匿名卷","slug":"匿名卷","permalink":"https://tfssweb.github.io/tags/匿名卷/"},{"name":"挂载目录","slug":"挂载目录","permalink":"https://tfssweb.github.io/tags/挂载目录/"}]},{"title":"怎么映射宿主端口？Dockerfile 中的EXPOSE和 docker run -p 有啥区别？","slug":"怎么映射宿主端口？Dockerfile 中的EXPOSE和 docker run -p 有啥区别？","date":"2017-07-22T05:11:13.000Z","updated":"2019-09-03T03:15:14.056Z","comments":true,"path":"2017/07/22/怎么映射宿主端口？Dockerfile 中的EXPOSE和 docker run -p 有啥区别？/","link":"","permalink":"https://tfssweb.github.io/2017/07/22/怎么映射宿主端口？Dockerfile 中的EXPOSE和 docker run -p 有啥区别？/","excerpt":"Docker中有两个概念，一个叫做 EXPOSE ，一个叫做 PUBLISH 。","text":"Docker中有两个概念，一个叫做 EXPOSE ，一个叫做 PUBLISH 。 EXPOSE 是镜像/容器声明要暴露该端口，可以供其他容器使用。这种声明，在没有设定 –icc=false的时候，实际上只是一种标注，并不强制。也就是说，没有声明 EXPOSE 的端口，其它容器也可以访问。但是当强制 –icc=false 的时候，那么只有 EXPOSE 的端口，其它容器才可以访问。PUBLISH 则是通过映射宿主端口，将容器的端口公开于外界，也就是说宿主之外的机器，可以通过访问宿主IP及对应的该映射端口，访问到容器对应端口，从而使用容器服务。EXPOSE 的端口可以不 PUBLISH，这样只有容器间可以访问，宿主之外无法访问。而 PUBLISH 的端口，可以不事先 EXPOSE，换句话说 PUBLISH 等于同时隐式定义了该端口要 EXPOSE。 docker run 命令中的 -p, -P 参数，以及 docker-compose.yml 中的 ports 部分，实际上均是指 PUBLISH。 小写 -p 是端口映射，格式为 [宿主IP:]&lt;宿主端口&gt;:&lt;容器端口&gt;，其中宿主端口和容器端口，既可以是一个数字，也可以是一个范围，比如：1000-2000:1000-2000。对于多宿主的机器，可以指定宿主IP，不指定宿主IP时，守护所有接口。 大写 -P 则是自动映射，将所有定义 EXPOSE 的端口，随机映射到宿主的某个端口。 我要映射好几百个端口，难道要一个个 -p 么？-p 是可以用范围的： 1-p 8001-8010:8001-8010","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"expose","slug":"expose","permalink":"https://tfssweb.github.io/tags/expose/"}]},{"title":"如果 Docker 升级或者重启的话，那容器是不是都会被停掉然后重启啊？","slug":"如果 Docker 升级或者重启的话，那容器是不是都会被停掉然后重启啊？","date":"2017-07-17T13:53:13.000Z","updated":"2019-09-03T03:15:14.049Z","comments":true,"path":"2017/07/17/如果 Docker 升级或者重启的话，那容器是不是都会被停掉然后重启啊？/","link":"","permalink":"https://tfssweb.github.io/2017/07/17/如果 Docker 升级或者重启的话，那容器是不是都会被停掉然后重启啊？/","excerpt":"在 1.12 以前的版本确实如此，但是从 1.12 开始，Docker 引擎加入了 –live-restore 参数，使用该参数可以避免引擎升级、重启导致容器停止服务的情况。","text":"在 1.12 以前的版本确实如此，但是从 1.12 开始，Docker 引擎加入了 –live-restore 参数，使用该参数可以避免引擎升级、重启导致容器停止服务的情况。 默认情况该功能不会被启动，如需启动，需要配置 docker 服务配置文件。比如 Ubuntu 16.04 这类 systemd 的系统，可以修改 /etc/systemd/system/multi-user.target.wants/docker.service 文件，在 ExecStart= 后面配置上 –live-restore： ExecStart=/usr/bin/dockerd –registry-mirror=https://registry.docker-cn.com –live-restore上面的格式中使用了行尾 \\ 的换行形式，这点和 bash 脚本一样，systemd 支持这种换行形式，如对此不了解可以先去学习 bash 程序设计。 需要注意的是，–live-restore 和 Swarm Mode 不兼容，所以在集群环境中不要使用。实际上集群环境也不用担心某个服务器重启的问题，因为其上的服务都会被调度到别的节点上，因此服务并不会被中断。 参考文档： https://docs.docker.com/engine/admin/live-restore/","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"为什么执行 docker 命令会报 permission denied 没权限的错误啊？","slug":"为什么执行 docker 命令会报 permission denied 没权限的错误啊？","date":"2017-07-12T15:01:11.000Z","updated":"2019-09-03T03:15:14.039Z","comments":true,"path":"2017/07/12/为什么执行 docker 命令会报 permission denied 没权限的错误啊？/","link":"","permalink":"https://tfssweb.github.io/2017/07/12/为什么执行 docker 命令会报 permission denied 没权限的错误啊？/","excerpt":"在 Linux 环境下，一些新装了 docker 的用户，特别是使用了 sudo 命令安装好了 Docker 后，发现当前用户一执行 docker 命令，就会报没权限的错误：","text":"在 Linux 环境下，一些新装了 docker 的用户，特别是使用了 sudo 命令安装好了 Docker 后，发现当前用户一执行 docker 命令，就会报没权限的错误： dial unix /var/run/docker.sock: permission denied一些来自于 Windows 世界的人，就会蹦出来说，用 root 呀……😓。而另一些有基本常识、知道不应该使用 root 人可能会说，那就用 sudo docker 吧。这两者都是不对的，或者说不合适的。 说使用 root 的人，应该回去好好学习一下 Linux 权限常识。一般 不应该直接使用 root 用户，直接使用 root 用户不仅仅是严重的违反了安全规范，而且也极容易造成操作事故。这不是 Windows 世界，Linux/Unix 世界是有严格的权限要求的，只应该使用最小的权限做事情。如果还不熟悉 Linux 权限机制，那就去学习一下，不要把 Windows 的坏毛病带过来。 说使用 sudo docker 的人，思路是对的，因为理解了平时操作应该使用普通用户，只有在需要的时候，才 sudo 提升权限进行操作。但是问题就在这个需要二字上，事实上，不需要 root 权限就可以执行 docker 命令。 其实如果看过官方安装文档的话都会知道，只需要将操作 docker 的用户，加入 docker 组，那么该用户既拥有了操作 docker 的权限。 因此，只需要执行： sudo usermod -aG docker $USER就可以把当前用户加入 docker 组，退出、重新登录系统后，执行 docker info 看一下，就会发现可以不用 sudo 直接执行 docker 命令了。 如果需要添加别的用户，将其中的 $USER 换成对应的用户名即可。 将用户添加到 docker 组，可以避免 root 权限误操作的问题，但是由于 dockerd 引擎是运行在 root 用户下的，而 docker 组成员有权限指挥 dockerd 引擎来做很多事情，因此，该用户实际上是拥有了 root 的权限的。因此不要误解了将当前用户加入 docker 组的初衷，这和赋予用户 sudo 权力是一样的，可不是说这个用户就没有 root 权限了。这样做，只是不再需要使用 sudo 了，也降低了使用 sudo 时误操作的可能。 此外，这里说的权限问题，全是指使用 docker 命令操作本机 dockerd 引擎，也就是通过 /var/run/docker.sock 来操作 dockerd 引擎的事情，只有这种有之前说的权限类的问题。 而 docker 命令还可以操作远程 dockerd 的引擎，也就是 -H 参数，或者 DOCKER_HOST 环境变量所指定的 Docker 主机。这种情况通讯走的是网络、HTTP，不会有权限问题。所以，如果不打算操作本机的 dockerd 引擎，则不需要将用户加入 docker 组，也是可以操作远程服务器的。 服务器上线后，怎么发","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"权限","slug":"权限","permalink":"https://tfssweb.github.io/tags/权限/"}]},{"title":"怎么修改了 docker 服务配置后不起作用？","slug":"怎么修改了 docker 服务配置后不起作用？","date":"2017-07-10T13:11:13.000Z","updated":"2019-09-03T03:15:14.053Z","comments":true,"path":"2017/07/10/怎么修改了 docker 服务配置后不起作用？/","link":"","permalink":"https://tfssweb.github.io/2017/07/10/怎么修改了 docker 服务配置后不起作用？/","excerpt":"改动真的生效了么？在宿主上运行一下 ps -ef | grep dockerd 看看，自己做的那些配置有么？没有的话就说明没有生效，那么就要检查原因了。","text":"改动真的生效了么？在宿主上运行一下 ps -ef | grep dockerd 看看，自己做的那些配置有么？没有的话就说明没有生效，那么就要检查原因了。 首先，改完配置重启服务了么？虽然这个问题看着很小白，但是确实很多人犯了这个小白的错误。 Ubuntu 14.04: sudo service docker restartUbuntu 16.04, CentOS 7: sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker另外，你改对了配置文件了么？ 不少人懒得看英文文档，百度个文章就照着配，既不管百度得到的文章所讲的系统，也没注意版本，而且中文文章往往自身表达描述不清楚，很多想当然的东西，结果无数坑。这么百度的人，很有可能压根就改错了文件。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"Linux 常用命令","slug":"Linux常用命令","date":"2017-07-08T11:12:23.000Z","updated":"2019-09-03T03:15:14.013Z","comments":true,"path":"2017/07/08/Linux常用命令/","link":"","permalink":"https://tfssweb.github.io/2017/07/08/Linux常用命令/","excerpt":"Linux 常用命令 一：命令的基本格式 ~ ：表示当前所在位置； localhost :主机名 “#”：超级用户 “$”：普通用户","text":"Linux 常用命令 一：命令的基本格式 ~ ：表示当前所在位置； localhost :主机名 “#”：超级用户 “$”：普通用户 二：查询目录的内容 命令格式：ls [选项] [文件或目录] 选项： -a：所有文件 -l: 查看详情 -d: 查看目录属性 -h：显示文件大小 三：文件处理命令 1、建立目录 命令格式：mkdir -p [目录名] -p: 表示递归建文件夹 例如： mkdir book mkdir -p book/book1 2、切换目录 命令格式：cd [目录] 简化操作： cd ~: 进入当前用户目录 cd -：进入上次目录 cd ..：进入上一级目录 pwd：查看当前目录所在位置 3、删除目录 rmdir [目录]:删除所有目录 rm -rf [目录]：删除目录所有文件 4、复制目录 cp [选项] [源文件目录] [目标目录] 选项： -r：复制目录 -p：连文件属性一起复制 -a：相当于-pdr 5、剪切、改名 mv [源文件目录] [目标文件目录] 6、常见目录作用 / ：根目录 /bin：命令保存目录 /boot：启动命令目录 /dev：设备文件目录 /etc：配置文件保存目录 /home：家目录 /lib：系统库保存目录 /mnt：系统挂载目录四：文件搜索命令 1、local [文件名] 在系统数据库中查找文件 新建的文件，要执行updatedb操作之后才能搜到 2、命令搜索 whereis [选项] [命令名] 或者 which [选项] [命令名] 选项； -b：只查找可执行文件 -m：只查找帮助文件 3、文件搜索 find [搜索范围] [选项] [条件] 例如： find / -name test.log 在根目录查找名为test.log的文件 find /root -inname test.log 忽略大小写查找文件 find /var/log -mtime +10 其中 -mtime 文件修改时间 -atime 文件访问时间 -ctime 改变文件属性时间 +10 10天前 10 10天 -10 10天内 find /etc -size +20M 查找文件大于20M的文件五、压缩与解压缩命令 常见压缩格式：.zip 、 .gz 、 .bz2、.tar.gz 、 .tar.bz2 1、zip格式 //压缩文件 zip [压缩文件名] [源文件] //压缩目录 zip -r [压缩文件名] [源文件] //解压 unzip [压缩文件名] 2、gz格式 //压缩为gz格式，源文件不保留 gzip [源文件] //压缩gz格式，源文件保留 gzip -c 源文件 &gt; 压缩文件 //压缩目录 gzip -r 目录 //解压 guzip [文件] guzip -r [目录] 3、tar //打包 tar -cvf [打包文件名] [源文件] //解压 tar -xvf [文件名] 4、tar.gz //打包 tar -zcvf [文件名] [源文件] //解压 tar -zxvf [文件名]六、关机和重启 shutdown [选项] [时间] 选项： -c 取消前一个关机命令 -h 关机 -r 重启 init 6 重启 init 0 关机 logout 退出登陆 七、查看用户信息 w who last lastlog 八、shell基础 1、什么是shell shell是命令行解释器 2、echo输出命令 echo [选项] [输出内容] 选项： -e 支持转义 3、创建一个脚本 创建hello.sh vim hello.sh 进入编辑器 #!/bin/bash echo &quot;hello world !&quot; 依次执行： chomd 755 hello.sh ./hello.sh九、历史命令 history 查看历史命令 history [选项] [历史保留文件] 选项： -c 清空历史 -w 把缓存中的历史写入历史命令保存文件 十、输出重定向 命令&gt;文件：以覆盖的方式，把正确的命令输出到指定文件 命令&gt;&gt;文件：以追加的方式，把正确的命令输出到指定文件 错误命令 2&gt; 文件：以覆盖的方式，把错误的命令输出到指定文件 错误命令 2&gt;&gt; 文件：以追加的方式，把错误的命令输出到指定文件 命令&gt;&gt;文件 2&gt;&amp;1 ：同时追加正确命令和错误命令到指定文件 命令 &gt;&gt; 文件1 2&gt;&gt;文件2 ：把正确的命令输出到文件1，错误的命令到文件2 十一、网络相关 1、ifconfig查看ip 2、查看网络状态 netstat [选项] 选项： -t：列出tcp协议端口 -u：列出udp协议端口 -n：ip地址端口号 -l：列出监听状态的 -a：所有补充： 12345678910111213ss -tanp | grep LISTEN#修改主机名称hostnamectl set-hostname &lt;host-name&gt;#永久修改hostnamectl --static set-hostname &lt;host-name&gt;#文件顶部:1#文件底部:$#列出所有网桥brctl show#列出路由表route -n","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"}]},{"title":"Docker搭建Swarm集群","slug":"Docker搭建Swarm集群","date":"2017-07-04T06:54:23.000Z","updated":"2019-09-03T03:15:14.001Z","comments":true,"path":"2017/07/04/Docker搭建Swarm集群/","link":"","permalink":"https://tfssweb.github.io/2017/07/04/Docker搭建Swarm集群/","excerpt":"Docker搭建Swarm集群 这个图作为一个整体实际上都处于一个所谓的集群中，它可能对应了一到多台的实际服务器。每台服务器上都装有Docker并且开启了基于HTTP的DockerAPI。这个集群中有一个SwarmManager的管理者，用来管理集群中的容器资源。管理者的管理对象不是服务器层面而是集群层面的，也就是说通过Manager，我们只能笼统地向集群发出指令而不能具体到某台具体的服务器上要干什么（这也是Swarm的根本所在）。至于具体的管理实现方式，Manager向外暴露了一个HTTP接口，外部用户通过这个HTTP接口来实现对集群的管理。对于稍微大一点的集群，最好是拿出一台实际的服务器作为专门的管理者，作为学习而言，也可以把管理者和被管理者放在一台服务器上。","text":"Docker搭建Swarm集群 这个图作为一个整体实际上都处于一个所谓的集群中，它可能对应了一到多台的实际服务器。每台服务器上都装有Docker并且开启了基于HTTP的DockerAPI。这个集群中有一个SwarmManager的管理者，用来管理集群中的容器资源。管理者的管理对象不是服务器层面而是集群层面的，也就是说通过Manager，我们只能笼统地向集群发出指令而不能具体到某台具体的服务器上要干什么（这也是Swarm的根本所在）。至于具体的管理实现方式，Manager向外暴露了一个HTTP接口，外部用户通过这个HTTP接口来实现对集群的管理。对于稍微大一点的集群，最好是拿出一台实际的服务器作为专门的管理者，作为学习而言，也可以把管理者和被管理者放在一台服务器上。 关闭防火墙 1234567systemctl stop NetworkManagersystemctl disable NetworkManagersystemctl stop firewalldsystemctl disable firewalldsed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/g&apos; /etc/selinux/configsetenforce 0systemctl restart network master节点 1docker swarm init --advertise-addr 192.168.1.156 slave 1docker swarm join --token SWMTKN-1-1yiy41eikp4ofrpcqbj73tezigspedv597k5ftxpwm1yxys05b-2vrd75hbs1pgipdefybo7zw8o 192.168.1.156:2377 master 1docker node ls 创建服务 1docker service create --replicas 15 --publish 80:80 --name nginx nginx 补充 1234567891011docker service ls #查看所有服务docker service rm nginx #删除名为nginx的服务docker node ls # swarm集群node列表docker swarm join-token worker #查看以worker身份加入群集的tokendocker swarm join-token manager #查看以manager身份加入群集的tokendocker node promote node1 #提升node1为管理节点以防单点故障docker service ps nginx #查看nginx服务的容器运行信息docker service scale nginx=6 #更改nginx服务的容器实例为6docker exec -ti xxx bash #进入节点的实例docker swarm leave #脱离集群docker swarm leave --force #强制脱离集群，当节点为manager的角色时","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"swarm","slug":"swarm","permalink":"https://tfssweb.github.io/tags/swarm/"}]},{"title":"两行代码，搞定计数","slug":"两行代码，搞定计数","date":"2017-07-02T10:11:23.000Z","updated":"2019-09-03T03:15:14.037Z","comments":true,"path":"2017/07/02/两行代码，搞定计数/","link":"","permalink":"https://tfssweb.github.io/2017/07/02/两行代码，搞定计数/","excerpt":"Centos7安装Docker #一个优雅的站点统计方案 在自己搭建网站的过程中，为了更直观的看到自己网站的访问情况，无疑是添加站点统计插件了，笔者在众多实验当中，发现了不蒜子，既简单，又优雅！ 下面开始介绍，如何添加到自己的网站代码中。","text":"Centos7安装Docker #一个优雅的站点统计方案 在自己搭建网站的过程中，为了更直观的看到自己网站的访问情况，无疑是添加站点统计插件了，笔者在众多实验当中，发现了不蒜子，既简单，又优雅！ 下面开始介绍，如何添加到自己的网站代码中。 网站访问量： 添加方法：（1）、引入JS 1&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; （2）、添加站点访问量统计 pv方式（按量）： 123&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; uv方式（按人）： 123&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt; （3）、添加文章访问量统计 pv方式（按量）：123&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt; 本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; 个人喜欢，站点统计使用uv方式，文章统计采用pv方式，当然最终还是取决于你！ 最后，感谢不蒜子提供的友好服务！！","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"site","slug":"site","permalink":"https://tfssweb.github.io/tags/site/"}]},{"title":"为什么说数据库不适合放在 Docker 容器里运行？","slug":"为什么说数据库不适合放在 Docker 容器里运行？","date":"2017-05-11T13:29:50.000Z","updated":"2019-09-03T03:15:14.040Z","comments":true,"path":"2017/05/11/为什么说数据库不适合放在 Docker 容器里运行？/","link":"","permalink":"https://tfssweb.github.io/2017/05/11/为什么说数据库不适合放在 Docker 容器里运行？/","excerpt":"不为什么，因为这个说法不对，大部分认为数据库必须放到容器外运行的人根本不知道 Docker Volume 为何物。","text":"不为什么，因为这个说法不对，大部分认为数据库必须放到容器外运行的人根本不知道 Docker Volume 为何物。 在早年 Docker 没有 Docker Volume 的时候，其数据持久化是一个问题，但是这已经很多年过去了。现在有 Docker Volume 解决持久化问题，从本地目录绑定、受控存储空间、块设备、网络存储到分布式存储，Docker Volume 都支持，不存在数据读写类的服务不适于运行于容器内的说法。 Docker 不是虚拟机，使用数据卷是直接向宿主写入文件，不存在性能损耗。而且卷的生存周期独立于容器，容器消亡卷不消亡，重新运行容器可以挂载指定命名卷，数据依然存在，也不存在无法持久化的问题。 建议去阅读一下官方文档： https://docs.docker.com/engine/tutorials/dockervolumes/ https://docs.docker.com/engine/reference/commandline/volume_create/ https://docs.docker.com/engine/extend/legacy_plugins/#/volume-plugins","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/tags/数据库/"}]},{"title":"宿主如果和容器系统不同的话，那不是和虚拟机一样，一层层的调用，那么 Docker 和虚拟机还有什么差别？","slug":"宿主如果和容器系统不同的话，那不是和虚拟机一样，一层层的调用，那么 Docker 和虚拟机还有什么差别？","date":"2017-04-15T03:40:00.000Z","updated":"2019-09-03T03:15:14.051Z","comments":true,"path":"2017/04/15/宿主如果和容器系统不同的话，那不是和虚拟机一样，一层层的调用，那么 Docker 和虚拟机还有什么差别？/","link":"","permalink":"https://tfssweb.github.io/2017/04/15/宿主如果和容器系统不同的话，那不是和虚拟机一样，一层层的调用，那么 Docker 和虚拟机还有什么差别？/","excerpt":"要把 Windows 和 Linux 分清楚，更要把内核(kernel)和用户空间(userland)分清楚。 容器内的进程是直接运行于宿主内核的，这点和宿主进程一致，只是容器的 userland 不同，容器的 userland 由容器镜像提供，也就是说镜像提供了 rootfs。","text":"要把 Windows 和 Linux 分清楚，更要把内核(kernel)和用户空间(userland)分清楚。 容器内的进程是直接运行于宿主内核的，这点和宿主进程一致，只是容器的 userland 不同，容器的 userland 由容器镜像提供，也就是说镜像提供了 rootfs。 假设宿主是 Ubuntu，容器是 CentOS。CentOS 容器中的进程会直接向 Ubuntu 宿主内核发送 syscall，而不会直接或间接的使用任何 Ubuntu 的 userland 的库。 这点和虚拟机有本质的不同，虚拟机是虚拟环境，在现有系统上虚拟一套物理设备，然后在虚拟环境内运行一个虚拟环境的操作系统内核，在内核之上再跑完整系统，并在里面调用进程。 还以上面的例子去考虑，虚拟机中，CentOS 的进程发送 syscall 内核调用，该请求会被虚拟机内的 CentOS 的内核接到，然后 CentOS 内核访问虚拟硬件时，由虚拟机的服务软件截获，并使用宿主系统，也就是 Ubuntu 的内核及 userland 的库去执行。 而且，Linux 和 Windows 在这点上非常不同。Linux 的进程是直接发 syscall 的，而 Windows 则把 syscall 隐藏于一层层的 DLL 服务之后，因此 Windows 的任何一个进程如果要执行，不仅仅需要 Windows 内核，还需要一群服务来支撑，所以如果 Windows 要实现类似的机制，容器内将不会像 Linux 这样轻量级，而是非常臃肿。看一下微软移植的 Docker 就非常清楚了。 所以不要把 Docker 和虚拟机弄混，Docker 容器只是一个进程而已，只不过利用镜像提供的 rootfs 提供了调用所需的 userland 库支持，使得进程可以在受控环境下运行而已，它并没有虚拟出一个机器出来。 参考： (英文): https://www.docker.com/what-docker (中文): https://www.docker-cn.com/what-docker","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://tfssweb.github.io/tags/虚拟机/"}]},{"title":"如何列出容器和所使用的卷的关系？","slug":"如何列出容器和所使用的卷的关系？","date":"2017-04-10T11:29:00.000Z","updated":"2019-09-03T03:15:14.046Z","comments":true,"path":"2017/04/10/如何列出容器和所使用的卷的关系？/","link":"","permalink":"https://tfssweb.github.io/2017/04/10/如何列出容器和所使用的卷的关系？/","excerpt":"要感谢强大的 Go Template，可以使用下面的命令来显示：","text":"要感谢强大的 Go Template，可以使用下面的命令来显示： 12docker inspect --format &apos;&#123;&#123;.Name&#125;&#125; =&gt; &#123;&#123;with .Mounts&#125;&#125;&#123;&#123;range .&#125;&#125; &#123;&#123;.Name&#125;&#125;,&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&apos; $(docker ps -aq) 注意这里的换行和空格是有意如此的，这样就可以再返回结果控制缩进格式。其结果将是如下形式： 1234567891011$ docker inspect --format &apos;&#123;&#123;.Name&#125;&#125; =&gt; &#123;&#123;with .Mounts&#125;&#125;&#123;&#123;range .&#125;&#125; &#123;&#123;.Name&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125;&apos; $(docker ps -aq)/device_api_1 =&gt;/device_dashboard-debug_1 =&gt;/device_redis_1 =&gt; device_redis-data/device_mongo_1 =&gt; device_mongo-data 61453e46c3409f42e938324d7feffc6aeb6b7ce16d2080566e3b128c910c9570/prometheus_prometheus_1 =&gt; fc0185ed3fc637295de810efaff7333e8ff2f6050d7f9368a22e19fb2c1e3c3f","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"容器","slug":"容器","permalink":"https://tfssweb.github.io/tags/容器/"},{"name":"卷","slug":"卷","permalink":"https://tfssweb.github.io/tags/卷/"}]},{"title":"docker pull 下来的镜像文件都在哪？","slug":"docker pull 下来的镜像文件都在哪？","date":"2017-04-08T17:20:00.000Z","updated":"2019-09-03T03:15:14.031Z","comments":true,"path":"2017/04/09/docker pull 下来的镜像文件都在哪？/","link":"","permalink":"https://tfssweb.github.io/2017/04/09/docker pull 下来的镜像文件都在哪？/","excerpt":"Docker不是虚拟机，Docker 镜像也不是虚拟机的 ISO 文件。Docker 的镜像是分层存储，每一个镜像都是由很多层，很多个文件组成。而不同的镜像是共享相同的层的，所以这是一个树形结构，不存在具体哪个文件是 pull 下来的镜像的问题。","text":"Docker不是虚拟机，Docker 镜像也不是虚拟机的 ISO 文件。Docker 的镜像是分层存储，每一个镜像都是由很多层，很多个文件组成。而不同的镜像是共享相同的层的，所以这是一个树形结构，不存在具体哪个文件是 pull 下来的镜像的问题。 具体镜像保存位置取决于系统，一般Linux系统下，在 /var/lib/docker 里。对于使用 Union FS 的系统(Ubuntu)，如 aufs, overlay2等，可以直接在 /var/lib/docker/{aufs,overlay2} 下看到找到各个镜像的层、容器的层，以及其中的内容。 但是，对于CentOS这类没有Union FS的系统，会使用如devicemapper这类东西的一些特殊功能(如snapshot)模拟，镜像会存储于块设备里，因此无法看到具体每层信息以及每层里面的内容。 需要注意的是，默认情况下，CentOS/RHEL 使用 lvm-loop，也就是本地稀疏文件模拟块设备，这个文件会位于 /var/lib/docker/devicemapper/devicemapper/data 的位置。这是非常不推荐的，如果发现这个文件很大，那就说明你在用 devicemapper + loop 的方式，不要这么做，去参照官方文档，换 direct-lvm，也就是分配真正的块设备给 devicemapper去用。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"镜像","slug":"镜像","permalink":"https://tfssweb.github.io/tags/镜像/"},{"name":"pull","slug":"pull","permalink":"https://tfssweb.github.io/tags/pull/"}]},{"title":"Docker技术入门与实践","slug":"Docker技术入门与实践","date":"2017-04-05T06:10:23.000Z","updated":"2019-09-03T03:15:14.000Z","comments":true,"path":"2017/04/05/Docker技术入门与实践/","link":"","permalink":"https://tfssweb.github.io/2017/04/05/Docker技术入门与实践/","excerpt":"Docker技术入门与实践 1、FROM（第一条指令必须是FROM）格式：FROM 或 FROM image:tag 2、MAINTAINER格式：MAINTAINER #指定维护者信息","text":"Docker技术入门与实践 1、FROM（第一条指令必须是FROM）格式：FROM 或 FROM image:tag 2、MAINTAINER格式：MAINTAINER #指定维护者信息 3、RUN格式：RUN 或 RUN [“executable”,”param1”,”param2”] #前者将在shell终端运行，后者则使用exec 执行； 4、CMD格式：（三种格式）CMD [“executable”,”param1”,”param2”] #使用exec 执行，推荐使用；CMD command param1 param2 #在/bin/bash中执行，提供给需要交互的应用；CMD [“param1”,”param2”] #提供给ENTRYPOINT 默认参数每个Dockerfile 文件只能有一个CMD 命令，如果指定多了多条命令，只有最后一条被执行；如果用户启动容器的时候指定了运行命令，则会覆盖掉CMD指定的命令； 5、EXPOSE格式：EXPOSE [ …] #告诉Docker 服务端容器暴露的端口号，供互联系统使用；例：EXPOSE 22 80 8443 6、ENV格式：ENV #指定一个环境变量，会被后续RUN指令使用，并在容器运行时保持。 7、ADD格式：ADD #复制指定的src 到容器的dest ，其中src 可以是Dockerfile 所在目录的一个相对路径（文件或目录）；也可以是个URL 还可以是一个tar 文件（自动解压为目录）。 8、COPY格式：COPY #复制本地主机的src 到容器中的dest 。目标路径不存在时，会自动创建。当时用本地目标为源目录时，推荐使用COPY。 9、ENTRYPOINT格式：（两种格式）ENTRYPOINT [“executable”,”param1”,”param2”]ENTRYPOINT command param1 param2 #配置容器启动后执行的命令，并且不可被docker run 提供的参数覆盖。每个Dockerfile 中只能有一个ENTRYPOINT ，当指定多个后，只有最后一个生效 10、VOLUME格式：VOLUME [“/data”] #创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。 11、USER格式：USER daemon #指定运行容器时的用户名或UID ，后续的RUN 也会使用指定用户。 12、WORKDIR格式：WORKDIR /path/to/workdir #为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。可以使用多个WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。 例：WORKDIR /aWORKDIR bWORKDIR cRUN pwd则最终为：/a/b/c 13、ONBUILD格式：ONBUILD [INSTRUCTION] #配置当所创建的镜像作为其他新创建镜像的基础镜像时，所执行的操作命令。 docker build #根据指定路径下的Dockerfile 创建镜像。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"如何初始化卷？","slug":"如何初始化卷？","date":"2017-03-23T14:29:50.000Z","updated":"2019-09-03T03:15:14.047Z","comments":true,"path":"2017/03/23/如何初始化卷？/","link":"","permalink":"https://tfssweb.github.io/2017/03/23/如何初始化卷？/","excerpt":"卷（Volume），是用于动态数据持久化的。因此其内存储的都是动态数据，运行时会变化。如果这里面需要初始化里面的数据，需要在运行时进行。或者在镜像里加入初始化的脚本，比如 mysql 镜像中的初始化目录中的脚本；或者自己单独制作纯粹用于初始化卷用的镜像，单独一次性运行以将初始化数据灌入卷中。","text":"卷（Volume），是用于动态数据持久化的。因此其内存储的都是动态数据，运行时会变化。如果这里面需要初始化里面的数据，需要在运行时进行。或者在镜像里加入初始化的脚本，比如 mysql 镜像中的初始化目录中的脚本；或者自己单独制作纯粹用于初始化卷用的镜像，单独一次性运行以将初始化数据灌入卷中。 举个例子来说，假设你需要个卷 mydata，然后里面需要有个 hello.txt 文件是必须存在的，否则容器运行就要出大事儿了……（这需求很傻我知道……😅好吧，假设如此）。 当然，我们得先有这个卷。 1docker volume create --name mydata 那怎么把这个超重要的 hello.txt 文件放入卷中呢？有几种办法。 正常挂载该 mydata 卷，然后 docker cp 进去这是个很傻的办法，不过如果容器运行并不依赖于 hello.txt 的话，这样做是可以的。 12$ docker run -d --name web -v mydata:/data nginx$ docker cp ./hello.txt web:/data/ 这样是先让容器启动，启动后，再把所需数据导入卷里面去。以后容器就可以使用 /data/hello.txt 文件了。 但是，如果容器是严重依赖于这个 hello.txt 文件的话，这样做就会出问题。容器会因为 hello.txt 文件不存在，而报错退出，导致根本没有 docker cp 的机会。 这种情况，我们可以变通一下。 123456$ docker run --rm \\ -v $PWD:/source \\ -v mydata:/data \\ busybox \\ cp /source/hello.txt /data/$ docker run -d --name web -v mydata:/data nginx 这里我们先启动了一个 busybox 容器，分别挂载要复制的源以及目标的 mydata 卷，然后用 cp 命令将 hello.txt 复制到 mydata 中去。数据导入结束后，我们再正式挂载 mydata 卷到正式的容器上并启动。这个时候严重依赖 /data/hello.txt 的这个容器就可以顺利运行了。 专门制作初始化镜像手动的去执行 docker cp，或者 docker run … cp … 并不是很正规。可以写个脚本让一切都标准化，但是，除了流程外，还需要确保当前环境中的初始化数据的版本必须是所期望的，否则初始化了错误的数据，也会让运行时状态达不到预期的效果。 因此，另一种办法是专门制作一个初始化卷的镜像，这样的做法也比较方便在 CI/CD 流程中对初始化数据的过程进行测试确认。 1234FROM busyboxCOPY hello.txt /source/VOLUME /dataCMD [&quot;cp&quot;, &quot;/source/hello.txt&quot;, &quot;/data/&quot;] 这样的镜像只有一个生存目的，就是挂载 mydata 卷，并且把数据导入进去。假设构建好的镜像名为 volume-prepare，只需要执行下面的命令就可以完成导入： 1$ docker run --rm -v mydata:/data volume-prepare 在镜像的 Dockerfile 制作中，加入初始化部分在之前的问答中我们已经了解到，官方镜像 mysql 中可以使用 Dockerfile 来添加初始化脚本，并且会在运行时判断是否为第一次运行，如果确实需要初始化，则执行定制的初始化脚本。 我们也可以使用这种方法将 hello.txt 在初始化的时候加入到 mydata 卷中去。 首先我们需要写一个进入点的脚本，用以确保在容器执行的时候都会运行，而这个脚本将判断是否需要数据初始化，并且进行初始化操作。 123456#!/bin/bash# entrypoint.shif [ ! -f &quot;/data/hello.txt&quot; ]; then cp /source/hello.txt /data/fiexec &quot;$@&quot; 名为 entrypoint.sh 的这个脚本很简单，判断一下 /data/hello.txt 是否存在，如果不存在就需要初始化。初始化行为也很简单，将实现准备好的 /source/hello.txt 复制到 /data/ 目录中去，以完成初始化。程序的最后，将执行送入的命令。 我们可以这样写 Dockerfile： 123456FROM nginxCOPY hello.txt /source/COPY entrypoint.sh /VOLUME /dataENTRYPOINT [&quot;/entrypoint.sh&quot;]CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;] 当我们构建镜像、启动容器后，就会发现 /data 目录下已经存在了 hello.txt 文件了，初始化成功了。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"卷","slug":"卷","permalink":"https://tfssweb.github.io/tags/卷/"},{"name":"初始化","slug":"初始化","permalink":"https://tfssweb.github.io/tags/初始化/"}]},{"title":"如何动态修改内存限制？","slug":"如何动态修改内存限制？","date":"2017-03-09T03:40:00.000Z","updated":"2019-09-03T03:15:14.048Z","comments":true,"path":"2017/03/09/如何动态修改内存限制？/","link":"","permalink":"https://tfssweb.github.io/2017/03/09/如何动态修改内存限制？/","excerpt":"Docker 1.10 之后支持动态修改，使用 docker update 命令，如： 1docker update -m 300m","text":"Docker 1.10 之后支持动态修改，使用 docker update 命令，如： 1docker update -m 300m","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"内存","slug":"内存","permalink":"https://tfssweb.github.io/tags/内存/"},{"name":"动态","slug":"动态","permalink":"https://tfssweb.github.io/tags/动态/"}]},{"title":"镜像的实现原理","slug":"镜像的实现原理","date":"2017-03-08T02:40:00.000Z","updated":"2019-09-03T03:15:14.067Z","comments":true,"path":"2017/03/08/镜像的实现原理/","link":"","permalink":"https://tfssweb.github.io/2017/03/08/镜像的实现原理/","excerpt":"镜像的实现原理Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。","text":"镜像的实现原理Docker 镜像是怎么实现增量的修改和维护的？ 每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。 通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。 Docker 在 AUFS 上构建的容器也是利用了类似的原理。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"image","slug":"image","permalink":"https://tfssweb.github.io/tags/image/"}]},{"title":"Docker零碎命令集锦","slug":"Docker零碎命令集锦","date":"2017-03-05T11:00:00.000Z","updated":"2019-09-03T03:15:14.002Z","comments":true,"path":"2017/03/05/Docker零碎命令集锦/","link":"","permalink":"https://tfssweb.github.io/2017/03/05/Docker零碎命令集锦/","excerpt":"Docker零碎命令集锦","text":"Docker零碎命令集锦 1、查看镜像内的变量（env） 1docker run &lt;image&gt; env 2、不需要进入到容器，直接查看容器内内容 1docker exec -it &lt;image id&gt; ls","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"听说 --link 过时不再用了？那容器互联、服务发现怎么办？","slug":"听说 --link 过时不再用了？那容器互联、服务发现怎么办？","date":"2017-02-27T03:41:00.000Z","updated":"2019-09-03T03:15:14.044Z","comments":true,"path":"2017/02/27/听说 --link 过时不再用了？那容器互联、服务发现怎么办？/","link":"","permalink":"https://tfssweb.github.io/2017/02/27/听说 --link 过时不再用了？那容器互联、服务发现怎么办？/","excerpt":"在 1-2 年前，Docker 所有容器都连接于默认的桥接网络上，也就是很多老文章鼓捣的 docker0 桥接网卡。因此实际上默认情况下所有容器都是可以互联的，没有隔离，当然这样安全性不好。而服务发现，是在这种环境下发展出来的，通过修改容器内的 /etc/hosts 文件来完成的。凡是 –link 的主机的别名就会出现于 /etc/hosts 中，其地址由 Docker 引擎维护。因此容器间才可以通过别名互访。","text":"在 1-2 年前，Docker 所有容器都连接于默认的桥接网络上，也就是很多老文章鼓捣的 docker0 桥接网卡。因此实际上默认情况下所有容器都是可以互联的，没有隔离，当然这样安全性不好。而服务发现，是在这种环境下发展出来的，通过修改容器内的 /etc/hosts 文件来完成的。凡是 –link 的主机的别名就会出现于 /etc/hosts 中，其地址由 Docker 引擎维护。因此容器间才可以通过别名互访。 但是这种办法并不是好的解决方案，Docker 早在一年多以前就已经使用自定义网络了。在同一个网络中的容器，可以互联，并且，Docker 内置了 DNS，容器内的应用可以使用服务名、容器名、别名来进行服务发现，名称会经由内置的 DNS 进行解析，其结果是动态的；而不在同一网络中的容器，不可以互联。 因此，现在早就不用 –link 了，而且非常不建议使用。 首先是因为使用 –link 就很可能还在用默认桥接网络，这很不安全，所有容器都没有适度隔离，用自定义网络才比较方便互联隔离。 其次，修改 /etc/hosts 文件有很多弊病。比如，高频繁的容器启停环境时，容易产生竞争冒险，导致 /etc/hosts 文件损坏，出现访问故障；或者有些应用发现是来自于 /etc/hosts 文件后，就假定其为静态文件，而缓存结果不再查询，从而导致容器启停 IP 变更后，使用旧的条目而无法连接到正确的容器等等。 另外，在一代 Swarm 环境中，在 docker-compose.yml 中使用了 links 就意味着服务间的强依赖关系，因此调度时不会将服务运行于不同节点，而是全部运行于一个节点，使得横向扩展失败。 所以不要再使用 –link 以及 docker-compose.yml 中的 links 了。应该使用 docker network，建立网络，而 docker run –network 来连接特定网络。或者使用 version: ‘2’ 的 docker-compose.yml 直接定义自定义网络并使用.","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"link","slug":"link","permalink":"https://tfssweb.github.io/tags/link/"}]},{"title":"docker-machine 创建的主机怎么直接 ssh 进去？改了 root 密码好像也没用？","slug":"docker-machine 创建的主机怎么直接 ssh 进去？改了 root 密码好像也没用？","date":"2017-02-08T13:29:00.000Z","updated":"2019-09-03T03:15:14.032Z","comments":true,"path":"2017/02/08/docker-machine 创建的主机怎么直接 ssh 进去？改了 root 密码好像也没用？/","link":"","permalink":"https://tfssweb.github.io/2017/02/08/docker-machine 创建的主机怎么直接 ssh 进去？改了 root 密码好像也没用？/","excerpt":"docker-machine创建的主机，会遵循安全最佳实践，因此一般不会允许 root登录，而且一般不会允许密码登录，只允许密钥登录（也就是很多国内文章称为的免密登录，其实并非免密）。 因此，使用密钥 ~/.docker/machine/machines/&lt;机器名&gt;/id_rsa 登录即可。","text":"docker-machine创建的主机，会遵循安全最佳实践，因此一般不会允许 root登录，而且一般不会允许密码登录，只允许密钥登录（也就是很多国内文章称为的免密登录，其实并非免密）。 因此，使用密钥 ~/.docker/machine/machines/&lt;机器名&gt;/id_rsa 登录即可。 1234ssh -i ~/.docker/machine/machines/default/id_rsa \\ -o UserKnownHostsFile=/dev/null \\ -o StrictHostKeyChecking=no \\ docker@$(docker-machine ip default) 这个例子中连接的是 default这个机器，需要连接其它的机器换成别的即可。另外的两个 -o 的参数是让其不要校验服务器密钥，这当然是不安全的，不过这里只是试验的虚拟机，所以没关系。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"docker-machine","slug":"docker-machine","permalink":"https://tfssweb.github.io/tags/docker-machine/"},{"name":"ssh","slug":"ssh","permalink":"https://tfssweb.github.io/tags/ssh/"},{"name":"root","slug":"root","permalink":"https://tfssweb.github.io/tags/root/"}]},{"title":"为什么我 docker login 失败了？我注册用户了，在网站登录也没问题呀？","slug":"为什么我 docker login 失败了？我注册用户了，在网站登录也没问题呀？","date":"2017-02-08T01:40:00.000Z","updated":"2019-09-03T03:15:14.038Z","comments":true,"path":"2017/02/08/为什么我 docker login 失败了？我注册用户了，在网站登录也没问题呀？/","link":"","permalink":"https://tfssweb.github.io/2017/02/08/为什么我 docker login 失败了？我注册用户了，在网站登录也没问题呀？/","excerpt":"123456$ docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don&apos;t have a Docker ID, head over to https://hub.docker.com to create one.Username: pinkman@heisenbPassword:Error response from daemon: Get https://registry-1.docker.io/v2/: unauthorized: incorrect username or password","text":"123456$ docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don&apos;t have a Docker ID, head over to https://hub.docker.com to create one.Username: pinkman@heisenbPassword:Error response from daemon: Get https://registry-1.docker.io/v2/: unauthorized: incorrect username or password 呃，这里应该是用户名的，怎么写了个电子邮件 pinkman@heisenb 呢？虽然 Docker Hub 网站允许你使用用户名或电子邮件登录，但是 docker login 只可以使用用户名，换成你的用户名登录就好了。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"login","slug":"login","permalink":"https://tfssweb.github.io/tags/login/"}]},{"title":"装完 Docker Toolbox 后发现下载镜像速度太慢，是不是需要修改什么配置文件？","slug":"装完 Docker Toolbox 后发现下载镜像速度太慢，是不是需要修改什么配置文件？","date":"2017-02-03T14:29:00.000Z","updated":"2019-09-03T03:15:14.065Z","comments":true,"path":"2017/02/03/装完 Docker Toolbox 后发现下载镜像速度太慢，是不是需要修改什么配置文件？/","link":"","permalink":"https://tfssweb.github.io/2017/02/03/装完 Docker Toolbox 后发现下载镜像速度太慢，是不是需要修改什么配置文件？/","excerpt":"","text":"安装 Docker Toolbox 时，安装程序会使用 docker-machine 为你创建一个名为 default的虚拟机： 1docker-machine create -d virtualbox default 这个虚拟机没有加任何参数，因此对于拥有伟大的墙的国内网络来说，有些不方便使用。所以最简单的做法是在安装完 Docker Toolbox 后，删掉默认的虚拟机，然后重新创建该虚拟机，创建时加入有中国特色的配置。 123456789&lt;!-- more --&gt;docker-machine rm defaultdocker-machine create -d virtualbox \\ --engine-registry-mirror https://registry.docker-cn.com \\ --engine-insecure-registry 192.168.99.0/24 \\ --engine-storage-driver overlay2 \\ default","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"docker-machine","slug":"docker-machine","permalink":"https://tfssweb.github.io/tags/docker-machine/"},{"name":"toolbox","slug":"toolbox","permalink":"https://tfssweb.github.io/tags/toolbox/"}]},{"title":"怎么才能让 docker service create 创建的服务正常退出时不重启啊？","slug":"怎么才能让 docker service create 创建的服务正常退出时不重启啊？","date":"2017-02-02T14:20:00.000Z","updated":"2019-09-03T03:15:14.055Z","comments":true,"path":"2017/02/02/怎么才能让 docker service create 创建的服务正常退出时不重启啊？/","link":"","permalink":"https://tfssweb.github.io/2017/02/02/怎么才能让 docker service create 创建的服务正常退出时不重启啊？/","excerpt":"有些时候会有这样的需求，比如服务是由应用层的远程控制指令关闭的，这种进程退出是正常行为，并非错误。但是默认情况下，只要容器退出，引擎就视为异常，就会尝试重新调度启动这个容器。这会导致明明关了的服务，又被启动了。","text":"有些时候会有这样的需求，比如服务是由应用层的远程控制指令关闭的，这种进程退出是正常行为，并非错误。但是默认情况下，只要容器退出，引擎就视为异常，就会尝试重新调度启动这个容器。这会导致明明关了的服务，又被启动了。 这种情况可以使用 --restart-condition=on-failure 参数，这样只有在主进程退出码为 非 0 的时候，才会重启，而正常退出（exited code = 0) 无需重启。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"service","slug":"service","permalink":"https://tfssweb.github.io/tags/service/"},{"name":"create","slug":"create","permalink":"https://tfssweb.github.io/tags/create/"}]},{"title":"Centos7安装Docker","slug":"Centos7安装Docker","date":"2016-10-07T06:10:23.000Z","updated":"2019-09-03T03:15:13.991Z","comments":true,"path":"2016/10/07/Centos7安装Docker/","link":"","permalink":"https://tfssweb.github.io/2016/10/07/Centos7安装Docker/","excerpt":"Centos7安装Docker","text":"Centos7安装Docker 依次执行： 1234sudo yum remove docker \\ docker-common \\ docker-selinux \\ docker-engine 123sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 123sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 1sudo yum-config-manager --enable docker-ce-edge 1sudo yum-config-manager --enable docker-ce-test 1sudo yum install docker-ce 1sudo systemctl start docker","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"Centos7安装docker-compose","slug":"Centos7安装docker-compose","date":"2016-10-06T09:11:23.000Z","updated":"2019-09-03T03:15:13.992Z","comments":true,"path":"2016/10/06/Centos7安装docker-compose/","link":"","permalink":"https://tfssweb.github.io/2016/10/06/Centos7安装docker-compose/","excerpt":"Centos7安装docker-compose","text":"Centos7安装docker-compose 1yum -y install epel-release 1yum install python-pip 1pip install --upgrade pip 1pip install docker-compose","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"compose","slug":"compose","permalink":"https://tfssweb.github.io/tags/compose/"}]},{"title":"Ubuntu搭建Docker环境","slug":"Ubuntu搭建Docker环境","date":"2016-10-05T10:11:23.000Z","updated":"2019-09-03T03:15:14.029Z","comments":true,"path":"2016/10/05/Ubuntu搭建Docker环境/","link":"","permalink":"https://tfssweb.github.io/2016/10/05/Ubuntu搭建Docker环境/","excerpt":"Centos7安装Docker","text":"Centos7安装Docker 前提 玩Docker建议使用Ubuntu系统，可以避免很多不必要的坑！！ 版本支持： Zesty 17.04 Xenial 16.04 (LTS) Trusty 14.04 (LTS) 安装这里不做解释，需要看解释的可以访问官网—-传送门，这里只写执行命令，依次执行就可以。 1sudo apt-get remove docker docker-engine docker.io 1sudo apt-get update 123sudo apt-get install \\ linux-image-extra-$(uname -r) \\ linux-image-extra-virtual 1sudo apt-get update 12345sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 下一步需要注意，如果是国外服务器直接运行以下命令： 1234sudo add-apt-repository \\ &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable&quot; 如果是国内服务器，需要将源换成国内的，比如阿里的： 1234sudo add-apt-repository \\ &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\ $(lsb_release -cs) \\ stable&quot; 1sudo apt-get update 1sudo apt-get install docker-ce 最后可以运行以下命令，进行是否安装成功确认： 1sudo docker run hello-world","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://tfssweb.github.io/tags/ubuntu/"}]},{"title":"Docker之Harbor搭建","slug":"Docker之Harbor搭建","date":"2016-09-22T10:03:12.000Z","updated":"2019-09-03T03:15:13.998Z","comments":true,"path":"2016/09/22/Docker之Harbor搭建/","link":"","permalink":"https://tfssweb.github.io/2016/09/22/Docker之Harbor搭建/","excerpt":"","text":"第一步：下载压缩包1wget https://github.com/vmware/harbor/releases/download/v1.2.2/harbor-online-installer-v1.2.2.tgz 第二步：解压解压后进入harbor 目录，修改harbor.cfg文件：修改hostname 第三步：执行1./install.sh 第四步：可以用过docker-compose.yml 起停节点机操作：12345最后在节点主机上添加非安全认证：$ tee /etc/docker/daemon.json &lt;&lt; EOF&#123; &quot;insecure-registries&quot;:[&quot;45.63.70.178&quot;] &#125;EOF","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"},{"name":"harbor","slug":"harbor","permalink":"https://tfssweb.github.io/tags/harbor/"},{"name":"私服","slug":"私服","permalink":"https://tfssweb.github.io/tags/私服/"}]},{"title":"Git基本命令","slug":"Git基本命令","date":"2016-09-21T03:02:12.000Z","updated":"2019-09-25T06:52:05.476Z","comments":true,"path":"2016/09/21/Git基本命令/","link":"","permalink":"https://tfssweb.github.io/2016/09/21/Git基本命令/","excerpt":"本地项目上传到Git1、（先进入项目文件夹）通过命令 Git init 把这个目录变成git可以管理的仓库 1git init 2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件","text":"本地项目上传到Git1、（先进入项目文件夹）通过命令 Git init 把这个目录变成git可以管理的仓库 1git init 2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件 1git add . 3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明 1git commit -m &apos;first commit&apos; 4、关联到远程库 1git remote add origin 你的远程库地址 如： 1git remote add origin https://github.com/cade8800/ionic-demo.git 5、获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败） 1git pull --rebase origin master 6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。 1git push -u origin master *、状态查询命令 1git status 强制覆盖本地代码123git fetch --allgit reset --hard origin/mastergit pull","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"git","slug":"git","permalink":"https://tfssweb.github.io/tags/git/"}]},{"title":"免密码SSH","slug":"免密码SSH","date":"2016-09-05T04:11:23.000Z","updated":"2019-09-03T03:15:14.041Z","comments":true,"path":"2016/09/05/免密码SSH/","link":"","permalink":"https://tfssweb.github.io/2016/09/05/免密码SSH/","excerpt":"Centos7安装完毕后无法联网的解决方法","text":"Centos7安装完毕后无法联网的解决方法 12[root]$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.1.2.3# 输入 root@172.1.2.3 密码 git clone http://http://47.92.153.88:9999/smart_zjk/smart_ep.git git clone http://47.92.153.88:9999/smart_zjk/smart_ep_web.git 第一步: 生成公钥 私钥第二步: 将公钥放到gitlab第三部: 将公钥和私钥 复制或者 映射 到容器，公钥和私钥 放在 ~/.ssh 目录","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"},{"name":"ssh","slug":"ssh","permalink":"https://tfssweb.github.io/tags/ssh/"}]},{"title":"Centos7常用配置","slug":"Centos7常用配置","date":"2016-08-05T14:14:44.000Z","updated":"2019-09-03T03:15:13.994Z","comments":true,"path":"2016/08/05/Centos7常用配置/","link":"","permalink":"https://tfssweb.github.io/2016/08/05/Centos7常用配置/","excerpt":"Centos7常用配置","text":"Centos7常用配置 12/etc/sysconfig/network-scripts/ifcfg-ens33/etc/hosts","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"}]},{"title":"批量修改文件后缀名","slug":"批量修改文件后缀名","date":"2016-08-01T01:00:00.000Z","updated":"2019-09-03T03:15:14.058Z","comments":true,"path":"2016/08/01/批量修改文件后缀名/","link":"","permalink":"https://tfssweb.github.io/2016/08/01/批量修改文件后缀名/","excerpt":"批量修改文件后缀名.bat","text":"批量修改文件后缀名.bat 1ren *.png *.jpg","categories":[{"name":"小技巧","slug":"小技巧","permalink":"https://tfssweb.github.io/categories/小技巧/"}],"tags":[{"name":"批量","slug":"批量","permalink":"https://tfssweb.github.io/tags/批量/"}]},{"title":"Maven阿里云镜像配置","slug":"Maven阿里云镜像配置","date":"2016-07-10T15:11:13.000Z","updated":"2019-09-03T03:15:14.017Z","comments":true,"path":"2016/07/10/Maven阿里云镜像配置/","link":"","permalink":"https://tfssweb.github.io/2016/07/10/Maven阿里云镜像配置/","excerpt":"Maven阿里云镜像配置","text":"Maven阿里云镜像配置 settings.xml123456789101112131415&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.1.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd&quot;&gt; &lt;localRepository&gt;D:\\software\\.m2\\repository&lt;/localRepository&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://tfssweb.github.io/tags/maven/"}]},{"title":"是直接用 yum / apt-get 安装 Docker 吗？","slug":"是直接用 yum 、 apt-get 安装 Docker 吗？","date":"2016-07-10T14:11:13.000Z","updated":"2019-09-03T03:15:14.061Z","comments":true,"path":"2016/07/10/是直接用 yum 、 apt-get 安装 Docker 吗？/","link":"","permalink":"https://tfssweb.github.io/2016/07/10/是直接用 yum 、 apt-get 安装 Docker 吗？/","excerpt":"很多人问到 docker, docker.io, docker-engine 甚至 lxc-docker 都有什么区别？","text":"很多人问到 docker, docker.io, docker-engine 甚至 lxc-docker 都有什么区别？ 其中，RHEL/CentOS 软件源中的 Docker 包名为 docker；Ubuntu 软件源中的 Docker 包名为 docker.io；而很古老的 Docker 源中 Docker 也曾叫做 lxc-docker。这些都是非常老旧的 Docker 版本，并且基本不会更新到最新的版本，而对于使用 Docker 而言，使用最新版本非常重要。另外，17.04 以后，包名从 docker-engine 改为 docker-ce，因此从现在开始安装，应该都使用 docker-ce 这个包。","categories":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://tfssweb.github.io/tags/docker/"}]},{"title":"Centos7安装完毕后无法联网的解决方法","slug":"Centos7安装完毕后无法联网的解决方法","date":"2016-07-05T06:11:23.000Z","updated":"2019-09-03T03:15:13.994Z","comments":true,"path":"2016/07/05/Centos7安装完毕后无法联网的解决方法/","link":"","permalink":"https://tfssweb.github.io/2016/07/05/Centos7安装完毕后无法联网的解决方法/","excerpt":"Centos7安装完毕后无法联网的解决方法","text":"Centos7安装完毕后无法联网的解决方法 1、打开终端窗口 用root登录 2、输入：cd /etc/sysconfig/network-scripts/ 3、编辑配置文件：vi ifcfg-ens33 修改onboot=no 为 onboot=yes 4、然后：reboot","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"}]},{"title":"数据库主外键删除","slug":"数据库主外键删除","date":"2016-07-02T10:11:23.000Z","updated":"2019-09-03T03:15:14.060Z","comments":true,"path":"2016/07/02/数据库主外键删除/","link":"","permalink":"https://tfssweb.github.io/2016/07/02/数据库主外键删除/","excerpt":"在更改数据库的时候，有表关联的时候，常常遇到数据更新受限制，那么就可以临时删除主外键关系：","text":"在更改数据库的时候，有表关联的时候，常常遇到数据更新受限制，那么就可以临时删除主外键关系： Db212345--删除select &apos;ALTER TABLE PCORE.&apos; || F.TABNAME || &apos; ALTER FOREIGN KEY &apos; || F.CONSTNAME || &apos; NOT ENFORCED;&apos; from SYSCAT.REFERENCES F WHERE OWNER = &apos;PCORE&apos;;--恢复select &apos;ALTER TABLE PCORE.&apos; || F.TABNAME || &apos; ALTER FOREIGN KEY &apos; || F.CONSTNAME || &apos; ENFORCED;&apos; from SYSCAT.REFERENCES F WHERE OWNER = &apos;PCORE&apos;; MySql12345运行如下的sql语句来关闭外键检测：SET FOREIGN_KEY_CHECKS = 0;执行你要的操作后把再把外键检测恢复SET FOREIGN_KEY_CHECKS = 1; Oracle1select &apos;alter table &apos; || table_name || &apos; disable constraint &apos; || constraint_name || &apos;;&apos; from user_constraints where constraint_type = &apos;R&apos;;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"},{"name":"db2","slug":"db2","permalink":"https://tfssweb.github.io/tags/db2/"},{"name":"oracle","slug":"oracle","permalink":"https://tfssweb.github.io/tags/oracle/"}]},{"title":"MySQL查询某个字段在哪些表中","slug":"MySQL查询某个字段在哪些表中","date":"2016-05-05T05:03:12.000Z","updated":"2019-09-03T03:15:14.018Z","comments":true,"path":"2016/05/05/MySQL查询某个字段在哪些表中/","link":"","permalink":"https://tfssweb.github.io/2016/05/05/MySQL查询某个字段在哪些表中/","excerpt":"MySQL查询某个字段在哪些表中","text":"MySQL查询某个字段在哪些表中 123MySQL:SELECT TABLE_SCHEMA,TABLE_NAME FROM information_schema.`COLUMNS` WHERE COLUMN_NAME = &apos;acctnbr&apos; ;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"},{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/tags/数据库/"}]},{"title":"MySQL创建数据库及用户","slug":"MySQL创建数据库及用户","date":"2016-04-05T05:03:12.000Z","updated":"2019-09-03T03:15:14.017Z","comments":true,"path":"2016/04/05/MySQL创建数据库及用户/","link":"","permalink":"https://tfssweb.github.io/2016/04/05/MySQL创建数据库及用户/","excerpt":"MySQL创建数据库及用户","text":"MySQL创建数据库及用户 1234567891011--创建数据库 test_dbcreate database test_db;--创建用户并授予相应的权限grant all privileges on test_db.* to user@&apos;localhost&apos; identified by &apos;user&apos;;grant all privileges on test_db.* to user@&apos;%&apos; identified by &apos;user&apos;;flush privileges;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"},{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/tags/数据库/"}]},{"title":"删除主外键关系","slug":"删除主外键关系","date":"2016-04-05T03:01:11.000Z","updated":"2019-09-03T03:15:14.044Z","comments":true,"path":"2016/04/05/删除主外键关系/","link":"","permalink":"https://tfssweb.github.io/2016/04/05/删除主外键关系/","excerpt":"删除主外键关系","text":"删除主外键关系 12345678910111213141516171819202122232425DB2--删除select &apos;ALTER TABLE PCORE.&apos; || F.TABNAME || &apos; ALTER FOREIGN KEY &apos; || F.CONSTNAME || &apos; NOT ENFORCED;&apos; from SYSCAT.REFERENCES F WHERE OWNER = &apos;PCORE&apos;;--恢复select &apos;ALTER TABLE PCORE.&apos; || F.TABNAME || &apos; ALTER FOREIGN KEY &apos; || F.CONSTNAME || &apos; ENFORCED;&apos; from SYSCAT.REFERENCES F WHERE OWNER = &apos;PCORE&apos;;MySQL运行如下的sql语句来关闭外键检测：SET FOREIGN_KEY_CHECKS = 0;执行你要的操作后把再把外键检测恢复SET FOREIGN_KEY_CHECKS = 1;Oracleselect &apos;alter table &apos; || table_name || &apos; disable constraint &apos; || constraint_name || &apos;;&apos; from user_constraints where constraint_type = &apos;R&apos;;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/categories/数据库/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"},{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/tags/数据库/"},{"name":"db2","slug":"db2","permalink":"https://tfssweb.github.io/tags/db2/"},{"name":"oracle","slug":"oracle","permalink":"https://tfssweb.github.io/tags/oracle/"}]},{"title":"DB2数据库报错编码","slug":"DB2数据库报错编码","date":"2016-04-03T04:21:13.000Z","updated":"2019-09-03T03:15:13.996Z","comments":true,"path":"2016/04/03/DB2数据库报错编码/","link":"","permalink":"https://tfssweb.github.io/2016/04/03/DB2数据库报错编码/","excerpt":"DB2数据库报错编码","text":"DB2数据库报错编码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551SQLCODE SQLSTATE SQLSTATE 说明 000 00000 SQL语句成功完成 01xxx SQL语句成功完成，但是有警告 +012 01545 未限定的列名被解释为一个有相互关系的引用 +098 01568 动态SQL语句用分号结束 +100 02000 没有找到满足SQL语句的行 +110 01561 用DATA CAPTURE定义的表的更新操作不能发送到原来的子系统 +111 01590 为2型索引设置了SUBPAGES语句 +117 01525 要插入的值的个数不等于被插入表的列数 +162 01514 指定的表空间被置为检查挂起状态 +203 01552 使用非唯一的名字来解决命名的限定列 +204 01532 命名的对象未在DB2中定义 +206 01533 命名的列不在SQL语句中指定的任何表中存在 +218 01537 因为SQL语句引用一个远程对象，不能为该SQL语句执行EXPLAIN +219 01532 命名的PLAN TABLE不存在 +220 01546 不正确定义PLAN TABLE，检查命名列的定义 +236 01005 SQLDA中的SQLN的值至少应于所描述的列的个数一样大 +237 01594 至少有一个被描述的列应该是单值类型，因此扩展的SQLVAR条目需要另外的空间 +238 01005 至少应有一个被描述的列是一个LOB，因此扩展的SQLVAR条目需要另外的空间 +239 01005 至少应有一个被描述的列应是单值类型，因此扩展的SQLVAR条目需要另外的空间 +304 01515 该值不能被分配给宿主变量，因为该值不再数据类型的范围之内 +331 01520 不能被翻译的字符串，因此被设置为NULL +339 01569 由于与DB2 2.2版本的子系统连接，所以可能存在字符转换问题 +394 01629 使用优化提示来选择访问路径 +395 01628 设置了无效的优化提示，原因代码指定了为什么，忽略优化提示 +402 01521 未知的位置 +403 01522 本地不存在CREAT ALIAS对象 +434 01608 在DB2未来发布的版本中将不支持指定的特性，IBM建议你停止使用这些特性 +445 01004 值被CAST函数截取 +462 01Hxx 由用户定义的函数或存储过程发出的警告 +464 01609 命名的存储过程超出了它可能返回的查询结果集的个数限制 +466 01610 指定由命名的存储过程返回的查询结果集的个数。成功完成 +494 01614 由存储过程返回的结果集的个数超过了由ASSOCIATE LOCATORS语句指定的结果集定位器的个数 +495 01616 因为倒台SQL的成本估算超出了在ELST中指定的警告阀值，所以发出警告 +535 01591 请求一个主健的定位更新，或请求一个使用自我引出约束的表的删除操作 +541 01543 命名外健是一个重复的引用约束 +551 01548 命名的授权ID缺少在命名的DB2对象上执行命名操作的权限 +552 01542 命名的授权ID缺少执行命名操作的权限 +558 01516 已经被授权该PUBLIC，因此WITH GRANT OPTION不可用 +561 01523 对ALTER REFERENCES INDEX 和TRIGGER特权，PUBLIC AT ALL LOCATION无效 +562 01560 因为GRANTEE已经拥有这些特权，所以一个或更多的特权被忽略 +585 01625 模式名指定了不止一次 +599 01596 没有为长字符数据类型（BLOB，CLOB和DBCLOB）建立比较函数 +610 01566 由于建立了一个指定为DEFER YES的索引，指定的对象处于PENDING状态，或者因为使用了ALTER INDEX改变关键值的范围，所以指定的对象处于PENDING状态 +625 01518 因为删除了主健索引，所以表定义被标注为不完整 +626 01529 删除了加强UNIQUE约束的索引，唯一性不在被加强 +645 01528 因为建立的索引中没有包含NULL，所以WHERE NOT NULL被忽略 +650 01538 不能更改或者建立已命名的表为从属表 +653 01551 在已指定的分区表空间中尚没有建立指定的分区索引，所以分区索引不可得 +655 01597 为CREATE或ALTER STOGROUP语句指定特定或者非特定的卷ID，在DB2较新发布的版本中（版本6以后）将不再支持他们 +658 01600 当建立目录索引时，不能指定SUBPAGES语句，SUBPAGES将被忽略，并缺省为1 +664 01540 分区索引的限制关键字超出了最大值 +738 01530 已命名的对象的更改可能像只读系统中对象的改变要求一样 +799 0157 ET语句中引用的特定寄存器不存在，将忽略 SET请求 +802 01519 数据溢出或者因除法异常而引起的数据异常错误 +806 01553 ISOLATION（RR）与LOCKSIZE PAGE 冲突 +807 01554 由于十进制乘法导致溢出 +863 01539 连接成功，但是只支持SBCS +2000 56094 SUBPAGES不等于1的1型索引不能成为数据共享环境中的缓冲池组依赖者 +2002 01624 因为指定的缓冲池不允许超高速缓存，GNPCACHE指定被忽略 +2007 01602 因为DB2子系统的参数禁用&quot;提示(hiats）&quot;所以不能指定优化提示 +30100 01558 分布式协议错误被检测到，提供原来的SQLCODE和SQLSTATE -007 42601 SQL语句中由非法字符 -010 42603 字符串常量非正常终止；检查到有遗漏的引号标志 -029 42601 需要INTO语句 -060 42815 某特定数据类型的长度或者标量规范无效 -084 42612 不能执行SQL语句，因为该语句对动态SQL无效或者对OS/390的DB2无效 -097 42601 在单位类型、用户自定义的函数以及过程中不能使用带有CAST的LONG VARCHAR或LONGVARGRAPHIC -101 54001 SQL语句超出了已确定的DB2限制：例如，表的数目太多，语句中的字节太多 -102 54002 字符串常量太长 -103 42604 无效数学文字 -104 42601 SQL语句中遇到非法符号 -105 42604 无效的字符串格式；通常引用一个格式不正确的图形字符串 -107 42622 对象名太长 -108 42601 RENAME语句中指定的名字有错误，不能使用限定词 -109 42601 指定了无效语句；例如CREATE VIEW不能包含ORDER BY 语句 -110 42606 遇到了无效的十六进制的文字 -111 42901 指定的列函数没有给出列名 -112 42607 无效的列函数语法；列函数不能运行与其他的列函数之上 -113 42602 遇到无效字符 -114 42961 该语句的位置名称必须与当前服务器匹配，但是却没有匹配 -115 42601 因为比较运算符没有伴着一个表达式或者列表，遇到了无效谓词 -117 42802 待插入的数值的个数于被插入的行中的列数不相等 -118 42902 数据修改语句(UPDATE或DELETE）和FROM语句中的表和视图命名不合法 -119 42803 HAVING语句中的列的列表与GROUP BY语句中的列列表不匹配 -120 42903 不允许WHERE语句、SET语句、VALUES语句或者SET ASSIGNMENT语句引用列函数 -121 42701 在INSERT或UPDATE语句中，某一列被非法引用了两次 -122 42803 非法使用了列函数。因为没有用于一个列函数的所有列不再GROUP BY语句中 -123 42601 特定位置的参数必须是一个常数或者一个关键词 -125 42805 ORDER BY语句中指定了无效数字，该数字要么小于1要么大于选定的列数 -126 42829 不能为一个UPDATE语句指定ORDER BY语句 -127 42905 在子选择中DISTINCT只能指定一次 -128 42601 SQL谓词中NULL使用不当 -129 54004 SQL语句中包含的表多于15个 -130 22019 ESCAPE语句必须为一个字符 22025 无效的ESCAPE模式 -131 42818 LIKE谓词只能用于字符数据 -132 42824 LIKE语句、ESCAPE语句、LOCATE函数或POSSTR函数中有无效运算对象 -133 42906 无效相关子查询引用 -134 42907 大于255字节的列被不正确使用 -136 54005 排序关键字的长度大于4000字节 -137 54006 被连接的字符串太大；字符的最大值为32767；图形的最大值为16382 -138 22011 SUBSTR列函数的第二个或第三个操作符无效 -142 42612 不支持的SQL语句。该语句可能在另外的RDBMS上有效，也有可能在其他的上下文中有效（例如，VALUES只能在触发器中出现） -144 58003 指定的段号无效 -147 42809 某一源函数不能更改。要改变源函数，必须删除该源函数并重新建立他 -148 42809 RENAME和ALTER无法执行。RENAME不能对视图或者活动RI.ST表重新命名。ALTER不能用于改变列的长度，因为该列参与了RI、一个用户退出程序、全局的临时表或打开DATACAPTURE CHANGES表的列 -150 42807 触发活动的INSERT，UPDATE或DELETE语句中指定了无效的视图更新或一个无效的转换表 -151 42808 试图更新一个不可更新的视图的列、一个DB2 CATALOG表的列或者一个ROWID列 -152 42809 DROP CHECK试图删除一个参照约束，或者DROP FOREIGN试图删除一个检查约束 -153 42908 无效的视图建立请求，必须为旋转列表中列出的列出的未命名的列或者重复的列提供一个名字 -154 42909 不能用UNION、UNION ALL或者一个远程表建立视图 -156 42809 在视图上建立索引是非法的，或者在ALTER TABLE，CREATE TRIGGER，DROP TABLE或LOCKTABLE语句上指定一个不是表的其他对象这是无效的 -157 42810 必须在FOREIGN KEY语句中指定一个表名 -158 42811 视图的列和选择列表中的列不相匹配 -159 42089 无效DROP或COMMENT ON语句 -160 42813 对该视图的WITH CHECK OPTION无效 -161 44000 正被更新的视图WITH CHECK OPTION语句使得这行不能被插入或更新 -164 42502 用户没有建立这个视图的权限 -170 42605 标量函数指定了无效的参数个数 -171 42815 标量函数指定了无效的数据类型长度或者无效数值 -173 42801 在非只读型的游标上不能指定隔离级别UR -180 22007 DATE、TIME、TIMESTAMP值的字符串表示法的语法不对 -181 22001 不是有效的DATE、TIME、TIMESTAMP值 -182 42816 在算术表达式中的日期/时间值无效 -183 22008 在算术表达式中返回的日期/时间值的结果不在有效值的范围内 -184 42610 没有正确使用日期/时间值的参数标记 -185 57008 没有定义本定的日期/时间出口 -186 22505 改变本定的日期/时间出口引发这个程序的长度无效 -187 22506 MVS返回无效的当前日期/时间 -188 22503 字符串表示无效 -189 22522 指定的编码字符集的ID无效或没有定义 -190 42837 不能象所设定的那样改变（ALTER）列。只能改变（ALTER）VARCHAR列的长度 -191 22504 字符串中包含了无效的混合数据 -197 42877 当两个或多个表被联合在一起排序时，限定的列名不能在ORDER BY语句中使用 -198 42617 试图对空的字符串发布一个PREPARE或EXECUTE IMMEDIATE语句 -199 42601 SQL语句中使用了非法关键词 -203 42702 模糊列引用 -204 42704 没有定义的对象名 -205 42703 指定的表的列名无效 -206 42703 列名没有在FROM语句所引用的任何表中，或者没有在定义触发器所在的表中 -208 42707 不能ORDER BY指定列，应为该列不在选择列表中 -212 42712 指定的表名在触发器中不允许多次使用，只能使用一次 -214 42822 DISTINCT、ORDER BY 引起的无效表达式 -219 42704 因为PLAN_TABLE不存在，EXPLAIN无法执行 -220 55002 遇到无效的PLAN_TABLE列 -221 55002 如果为PLAN_TABLE定义了可供选择的列，那么，必须定义所有的列 -229 42708 指定的现场找不到 -240 428B4 LOCK TABLE语句的PART子句无效 -250 42718 没有定义本地位置名 -251 42602 记号无效 -300 22024 宿主变量或参数中的字符串不是以NULL为终止 -301 42895 无效的宿主变量数据类型 -302 22001 输入的变量值对指定的列无效，可能传的参数字段类型与数据库中的不匹配 -302 22003 输入的变量值对指定的列而言太大 -303 42806 因为数据类型不兼容，不能分配数值 -304 22003 因为数据超出了范围，不能分配数值 -305 22002 没有NULL指示符变量 -309 22512 因为引用的宿主变量被设置成NULL，所以谓词无效 -310 22501 十进制的宿主变量或参数包含非十进制数据 -311 22501 输入的宿主变量长度无效，或者时负值或者太大 -312 42618 没有定义宿主变量或者宿主变量不可用 -313 07001 宿主变量的个数不等于参数标识的个数 -314 42714 模糊的宿主变量引用 -327 22525 在最后分区的关键字范围内，不能插入行 -330 22021 不能成功的翻译字符串 -331 22021 字符串不能分配到宿主变量，因为其不能成功的被翻译 -332 57017 不能为两个命名的编码字符集的ID定义翻译规则 -333 56010 子类型无效导致翻译失败 -338 42972 ON语句无效，必须引用连接的列 -339 56082 访问DB2 2.2版本的子系统被拒绝，原因时ASCII到EBCDIC翻译不能进行 -350 42962 无效的大对象规范 -351 56084 SELECT列表中有不支持的数据类型 -352 56084 输入列表中有不支持的数据类型 -355 42993 LOB列太大，以至不能被记录在日志中 -372 428C1 每个表只允许有一个ROWID列 -390 42887 在上下文中指定的函数无效 -392 42855 自从前一次FETCH以来，指定游标的SQLDA已被不恰当的改变 -396 38505 在最后的访问过程中，视图执行SQL语句 -397 428D3 在某一列上不恰当的指定了GENERATED因为该列不是ROWID数据类型 -398 428D2 为某一个宿主变量请求LOCATOR，但是该宿主变量不是一个LOB -399 22511 在INSERT语句中为ROWID列指定的值无效 -400 54027 在DB2编目中定义的用户自定义索引不能超过100个 -401 42818 算术操作符或比较操作符的操作对象不是兼容的 -402 42819 算术函数不能用于字符或日期时间数据 -404 22001 SQL语句指定的字符串太长 -405 42820 数值文字超出了范围 -406 22003 计算出的或者倒出的数值超出了范围 -407 23502 不能把NULL值插到定义为NOT NULL的列中 解决方法：其中对于DB2数据库错误信息的说明：SQLSTATE: 23502 插入或更新值为空，但该列不能包含空值。分析DB2报出的错误信息，主要从六个方面进行分析：SQLCODE, SQLSTATE, ,SQLERRMC, TBSPACEID, TABLEID, COLNO1、先从SQLCODE和SQLSTATE两方面的数字确认是什么原因（见网址：http://www.knowsky.com/538581.html）2、在根据TBSPACEID和TABLEID两方面确认是哪个表 SQL语句：select * from syscat.tables where tbspaceid=&quot;&quot; and tableid=&quot;&quot;3、根据COLNO确认是哪个列出问题 上面三步可以汇总成一个SQL语句 SELECT tabschema, tabname, colnameFROM syscat.columnsWHERE colno = 4 AND( tabschema, tabname ) IN( SELECT tabschema, tabnameFROM syscat.tablesWHERE tbspaceid = 4 ANDtableid = 47 ) -408 42821 数值不能被更新或插入，因为他与列的数据类型不兼容 -409 42607 COUNT函数指定的运算对象无效 -410 42820 浮点文字笔30个字符的最大允许长度长 -411 56040 CURRENT SQLID使用无效 -412 42823 在子查询的选择列表中遇到了多个列 -413 22003 当转换为一个数字型数据类型时，数据溢出 -414 42824 LIKE谓词不能运行于用数字或日期时间类型定义的列 -415 42825 为UNION操作指定的选择列表不是联合兼容的 -416 42907 包含UNION操作符的SQL语句不允许有长的字符串列 -417 42609 两参数标识符作为运算对象被指定在同一谓词的两边 -418 42610 参数标识符使用无效 -419 42911 十进制除法无效 -420 22018 字符串自变量值不符合函数的要求 -421 42826 UNION操作的选择列表中没有提供相同数目的列 -423 0F001 为LOB或结果集定位器指定的值无效 -426 2D528 在不允许更新的应用服务器不允许执行COMMIT语句 -427 2D529 在不允许更新的应用服务器不允许执行ROLLBACK语句 -430 38503 在用户自定义的函数或存储过程中遇到了错误 -433 22001 指定的值太长 -435 428B3 无效的应用定义的SQLSTATE -438 xxxxx 使用了RAISE_ERROR函数的应用发出了一个错误 -440 42884 存储过程或用户自定义函数的参数列表参数个数于预期的个数不匹配 -441 42601 与标量函数一起使用DISTINCT或ALL是不正确的用法 -443 42601 指定的外部函数返回错误的SQLSTATE -444 42724 与被称为存储过程或用户自定义函数有关的程序不能找到 -449 42878 对存储过程或用户自定义的函数，CREATE或ALTER语句不正确（缺失EXTERNAL NAME 子句) -450 39501 存储过程或用户自定义函数写入存储器的值超过了参数声明的长度 -451 42815 CREATE FUNCTION中指定了不正确的数据类型 -453 42880 用户自定义函数中的RETURNS语句无效 -454 42723 指定的函数识别标记与已存在的另一函数的识别标记冲突 -455 42882 模式名不比配 -456 42710 为用户自定义函数指定的函数名已经存在 -457 42939 用户自定义函数或用户自定义类型正试图使用系统中定义的函数或者类型所用的名称 -458 42883 没有找到函数 -463 39001 特定的外部例程返回无效的SQLSTATE -469 42886 参数定义为OUT或INOUT的CALL语句必须提供宿主变量 -470 39002 指定了NULL参数，但是该例程却不支持NULL -471 55023 存储过程或用户自定义函数失败：提供原因代码 -472 24517 外部的函数程序使游标处于打开状态 -473 42918 用户自定义数据类型命名不能和系统定义的数据类型一样 -475 42866 结果类型不能被转换成RETURNS类型 -476 42725 在其模式中该函数不是独一无二的 -478 42893 不能DROP或REVOKE特定的对象，因为其他对象依赖于该对象 -480 51030 直到存储过程已经被CALL后，DESCRIBE PROCEDURE和ASSOCIATE LOCATORS才能被发布 -482 51030 存储过程不返回到任何一个定位器 -483 42885 CREATE FUNCTION语句中的参数个数与源函数中的参数个数不匹配 -487 38001 选择了NO SQL选项建立指定的存储过程或用户自定义函数，但却视图发布SQL语句 -491 42601 CREATE FUNCTION语句无效，因为该语句没有RETURNS语句或者因为该语句没有指定有效的SOURCE或者EXTERNAL语句 -492 42879 指定函数的指定参数的个数有错误 -495 57051 语句的估计处理器成本超出了资源限制 -496 51033 语句无法执行，因为当前服务器与调用存储过程的服务器不同 -497 54041 指定的数据库超过了32767 OBID的上限，或者CREATE DATABASE语句使之达到了32511DBID的上限 -499 24516 指定的游标已被分配到结果集，该结果集来自已经指定的存储过程 -500 24501 因为连接被破坏，WITH HOLD游标被关闭 -501 24501 在试图获取数据或关闭一个游标前必须打开一个游标 -502 24502 在没有关闭游标前不能再次打开游标 -503 42912 因为列在游标的FOR UPDATE OF语句中没有被指定，该游标用于获取该列，所以不能更新该列 -504 34000 不能引用一个游标，因为他不是定义到程序里的 -507 24501 在试图更新或者删除WHERE CURRENT OF前，必须打开游标 -508 24504 因为被引用的游标当前不是处于数据行上，所以不能被更新或删除 -509 42827 除了在游标上指定的那个表（该表由WHERE CURRENT OF语句引用的）以外，再也不能从别的表上更新数据 -510 42828 表或视图不能被修改 -511 42829 对不可修改的表或视图，FOR UPDATE OF语句无效 -512 56023 对远程对象的无效引用 -513 42924 一个别名不能再被定义成另外的别名 -514 26501 游标尚没有被准备 -516 26501 试图描述未准备好的SQL语句 -517 07005 因为SQL语句尚没有准备好，游标无效 -518 07003 试图执行尚没有准备好的SQL语句 -519 24506 当为游标的SQL语句发布一个准备语句是，游标不能是打开的 -525 51015 不能在已指定的程序包中执行SQL语句，因为在绑定时间内该程序包无效 -526 42995 在给定的上下文中，不能使用全局的临时表 -530 23503 对特定的约束名指定了无效的外健值 -531 23504 从版本5开始，父关键字的多行更新将试图删除一个外关键字依赖的父关键字值，在版本5以前，当引用主关键值外健值当前 存在时，试图更新该主健值 -532 23504 删除操作违反了已指定的参照约束 -533 21501 多行插入无效，试图将多行插到自我引用的表中 -534 21502 可改变主健列值的更新语句不能在同一时刻用于更新多行 -535 21502 当从自我引用表中删除数据或者更新主健列时，不能指定WHERE CURRENT OF。不是版本5的子系统才调用该代码 -536 42914 因为某一特定表的参照约束存在，所以删除语句无效 -537 42709 在外健语句或主健语句的规范中，每个列的出现不能多于一次 -538 42830 无效的外健；不符合引用的表没有主健 -539 42888 不能定义外健，因为被引用的表没有主健 -540 57001 表定义不完整，直到为主健建立了唯一索引或UNIQUE语句、或者包含GENERATED BYDEFAULT属性的ROWID列 -542 42831 可以为空的列不允许作为主健的一部分包含在内 -543 23511 因为该表是指定了SET NULL删除规则的参照约束的父表而且检查约束不允许NULL，所以DELETE不能发生 -544 23512 不能用ALTER添加检查约束，因为已存在的某行与该检查约束冲突 -545 23513 INSERT或者UPDATE导致检查约束冲突 -546 42621 在CREATE或ALTER TABLE中指定的检查约束无效 -548 42621 因为指定的列而引起的检查约束无效 -549 42509 DYNAMICRULES（BIND）计划或程序包的无效SQL语句 -551 42501 用户试图对不拥有权限的特定的对象进行操作，或者表不存在 -552 42502 用户试图执行未被授权的操作 -553 42503 不能指定CURRENT SQLID，因为用户尚没有被允许改变那个ID -554 42502 不能对你本身赋予一个权限 -555 42502 不能对你本身撤销一个权限 -556 42504 不能撤销用户没有拥有的权限 -557 42852 指定了不一致的授予或撤销关键词 -558 56025 为授予或撤销语句指定了无效的语句（一个或一组） -559 57002 DB2权限机制已经禁用，授予或者撤销不能被发布 -567 42501 指定的权限ID缺少对指定的程序包的绑定权限 -571 25000 不允许多点更新 -573 42890 不能定义参照约束，因为已指定的父表中在指定的列上没有唯一健 -574 42864 指定的缺省与列定义冲突 -577 38002 试图修改用户自定义函数中的数据或者存储过程中的数据，但这些对象的建立没有选择MODIFIES SQL DATA选项 -579 38004 试图修改用户自定义函数中的数据或者存储过程中的数据，但这些对象的建立没有选择READ SQL DATA选项，也没有选择 MODIFIES SQL DATA选项 -580 42625 CASE表达式中的结果表达式不能都是空的 -581 42804 CASE表达式中的结果表达式为不兼容的数据类型 -582 42625 SEARCHED－WHEN－CLAUSE中的查找条件指定了一个限定的、IN或EXISTS谓词 -583 42845 指定的函数失败，因为他不是决定性的，或者可能有外部动作 -585 42732 在当前路径中模式名不止一次出现 -586 42907 CURRENT PATH专用寄存器在长度上不能超过254字符 -587 428C6 项目引用的列表必须是同一个家族 -590 42734 在命名的存储过程或用户自定义的函数中的参数必须是独一无二的 -592 42510 没有授权权限，让你在WLM环境中建立的存储过程或者用户自定义函数 -601 42710 试图创建（或重命名）已经存在的对象 -602 54008 CREATE INDEX语句中指定的列太多 -603 23515 因为发现有重复值，所以不能建立唯一的索引 -604 42611 在CREATE或ALTER TABLE语句中的为数据类型指定的长度、精度以及标度无效 -607 42832 指定的INSERT、UPDATE或DELETE语句不能被发布，应为这些语句对DB2 CATLOG表执行写操作 -611 53088 当LOCKSIZE是TABLE或者TABLESPACE时，LOCKMAX必须为0 -612 42711 在同一个表、索引或试图中不允许有重复列名 -613 54008 主健或UNIQUE约束太长或者包含了太多的列 -614 54008 已经超过了索引的内部健长度的最大长度（255）限制 -615 55006 不能删除这个程序包，因为该程序包目前正在执行 -616 42893 指定的对象不能被删除，因为其他对象依赖于该对象 -617 56089 对于DB2版本6，1型索引无效。对于以前的版本，1型索引不能用LOCKSIZE ROW或LARGE表空间定义 -618 42832 对DB2 CATALOG表的请求操作时不允许的 -619 55011 DSNDB07不能修改，除非他先被停止了 -620 53001 对在DSNDB07中的表空间不允许指定该关键词 -621 58001 遇到了重复的DBID，遇到了系统问题 -622 56031 不能指定FOR MIXED DATA因为没有安装混合数据选项 -623 55012 不能为单一的表定义多个族索引 -624 42889 不能为单一的表定义多个主健 -625 55014 用主健定义的表要求唯一索引 -626 55015 不能发布ALTER语句来改变PRIQTY SECQTY或ERASE，除非先停止了表空间 -627 55016 不能发布ALTER语句来改变PRIQTY SECQTY或ERASE，除非先把表空间定义为使用存储器组的表空间 -628 42613 指定语句时相互排斥的（例如，不能分区一个分段的表空间） -629 42834 因为该外健不能包含空值，所以SET NULL无效 -630 56089 不能为1型索引指定WHERE NOT NULL -631 54008 无效的外健；要么是比254个字节长，要么包含的列数多于40 -632 42915 指定的删除规则禁止把这个表定义为已制定表的从属表 -633 42915 无效删除规则；必须使用特定的强制删除规则 -634 42915 在这种情况下，DELETE CASCADE不允许 -635 42915 删除规则不能有差异或者不能为SET NULL -636 56016 在分区索引健的升序或降序规范中，分区所以必须与该规范一致 -637 42614 遇到重复的关键词 -638 42601 在CREATE TABLE语句中缺少列定义 -639 56027 带有SET NULL的删除规则的外健的可空列不能是分区索引的列 -640 56089 不能为这个表空间指定LOCKSIZE ROW，因为在该表空间中的表上定义了1型索引 -642 54021 唯一约束包含太多的列 -643 54024 检查约束超出了3800个字符的最大长度 -644 42615 在SQL语句中为关键词指定的值无效 -646 55017 在指定的分区表空间或者缺省表空间中不能创建表，因为指定的表空间已经包含了一个表 -647 57003 指定的缓冲池无效，因为他没有被激活 -650 56090 ALTER INDEX不能被执行；提供了原因代码 -651 54025 如果CREARE或ALTER TABLE被允许，表对象的描述词（object descriptor,OBD）将超过最大值（32KB） -652 23506 遇到了EDITRPROC或VALIDPROC冲突 -653 57004 在分区表空间中的表不可用，因为分区索引尚未被创建 -655 56036 在卷的列表中，STOGROUP不能指定为特定的或不特定（&quot;*&quot;）的卷 -658 42917 当试图删除指定的对象时，无法删除该对象，该对象的删除必须通过删除与之相关联的对象完成 -660 53035 不正确的分区索引规范，必须为族索引定义有限制的关键字 -661 53036 分区索引没有指定恰当的分区数目 -662 53037 试图在未分区的表空间（分段的或简单的）上建立分区索引 -663 53038 为分区索引指定的关键字限制值是一个无效数字 -665 53039 为ALTER TABLESOACE语句指定了无效的PART语句 -666 57005 SQL语句不能被处理，因为指定的函数当前正处于进行过程中 -667 42917 不能明确的删除分区表空间的族索引，必须除去分区表空间来去掉分区索引 -668 56018 不能向用EDITPROC定义的表中添加列 解决：CALL SYSPROC.ADMIN_CMD(&apos;reorg table FININCCALDTLHIST&apos;); -669 42917 不能显式的删除分区表空间中的表，必须删除分区表空间来删除表 -670 54010 表的记录长度超过了页面的大小 -671 53040 不能更改指定的表空间的缓冲池，因为这将改变表空间的页面大小 -672 55035 在命名的表上不允许DROP -676 53041 只有4KB的缓冲池可被用于一个索引 -677 57011 缓冲池扩展失败，由于可用的虚拟内存的大小不足 -678 53045 为才分区索引中指定的限制健提供的值与数据类型不符 -679 57006 不能创建某一个特定对象，因为该对象的一个drop目前正在挂起 -680 54011 对DB2表不能超过750列 -681 23507 列违反了指定的FIELDPROC -682 57010 不能载入FIELDPROC -683 42842 列、单值类型、函数或者过程无效，因为不兼容语句。例如，指定的INTEGER具有FORBITDATA选项 -684 54012 指定的文字列表不能超过254个字节 -685 58002 FIELDPROC返回一个无效的域描述 -686 53043 用FIELDPROC定义的一个列不能与一个使用不同的FIELDPROC定义的列作比较 -687 53044 列不能与一个非兼容字段类型的列比较 -688 58002 返回不正确的数据 -689 54011 从属表定义了太多的列 -690 23508 数据定义的控制支持拒绝这个语句 -691 57018 命名的注册表不存在 -692 57018 命名的索引不存在，但命名的注册表需要该索引 -693 55003 命名的注册表/索引的命名列无效 -694 57023 DROP正在命名的注册表上挂起 -696 42898 由于相关的名字或者转换表的名字使用不正确，指定的触发器无效 -697 42899 FOR EACH语句被指定，因此与OLD合NEW相关的名字是不允许的，或者不能为一个BEFORE触发器指定OLD_TABLE和NEW_TABLE -713 42815 指定的专用寄存器是无效的 -715 56064 命名的程序不能被运行，因为他依赖与你所安装的DB2版本的部件，但是你的数据中心没有安装这个部件 -716 56065 命名的程序使用这个版本的不正确的发行版本做了预编译 -717 56066 BIND失败，因为他依赖与你所安装的DB2版本的部件，但是你的数据中心没有安装这个部件 -718 56067 REBIND失败，因为IBMREQD列无效 -719 42710 不能BIND ADD一个已经存在的程序包 -720 42710 不能BIND REPLACE一个已经存在的程序包版本 -721 42710 程序包的一致性记号必须是独一无二的 -722 42704 绑定错误，因为指定的程序包不存在 -723 09000 一个触发的SQL语句接受到一个错误 -724 54038 达到了（16）级联间接的SQL语句的最大项目 -725 42721 对专门指定的寄存器提供了一个无效值 -726 55030 因为SYSPKSYSTEM条目，不能绑定这个程序包 -728 56080 指定的数据类型不能与私有协议发布一起使用 -729 429B1 用COMMIT ON RETURN定义的存储过程不能用作嵌套的CALL过程的目标 -730 56053 在只读的共享数据库中为表定义的参照完整性无效 -731 56054 VSAM数据集必须用SHAREOPTION（1.3）定义 -732 56055 被定义为只读型数据库却拥有没有定义空间或者索引空间的DB2子系统 -733 56056 只读共享数据库的定义不一致 -734 56057 一旦一个数据库被定义为ROSHARE READ，他将不能被更改为其他不同的ROSHARE状态 -735 55004 用DBID名称标识的数据库不再是一个只读共享数据库 -736 53014 命名的DBID无效 -737 53056 在这种状况下，不能建立一个隐含的表空间 -739 56088 因为同时指定了ALLOW PARALLEL和MODIELES SQL DATA这两个语句，因此已设定的函数将不能再被更改 -740 51034 在这种方式下不能用MODIELES SQL DATA定义指定的函数 -741 55030 已经为命名的共享组成员的数据定义了工作文件数据库 -742 53004 DSNDB07是隐含的工作文件数据库 -746 57053 在特定的触发器、存储过程或函数中的SQL语句违反嵌套SQL限制 -747 57054 指定的表是不可用的除非为LOB数据列建立起必须的辅助表 -748 54042 在指定的辅助表上已经有一个索引 -750 42986 不能对已指定的表重新命名,因为他至少在一个现存的视图或触发器中被引用 -751 42987 存储过程或用户自定义的函数试图执行一个不允许执行的SQL语句。DB2的线程被置于MUST_ROLLBACK状态 -752 0A001 无效CONNECT语句 -763 560A1 无效的表空间名 -764 560A2 LOB表空间必须与其相关的基表空间同在一个数据库中 -765 560A3 表和数据库不兼容 -766 560A4 不能对辅助表进行请求的操作 -767 42626 CREATE INDEX失败，因为在辅助表中为索引指定了列，或者因为没有为非辅助表的索引指定列 -768 560A50 不能为指定的列或者指定的分区建立辅助表，因为其辅助表已经存在 -769 53096 CREATE AUX TABLE的规格与基表不匹配 -770 530A6 指定的表必须有一个ROWID列，那么该表才可以包含一个LOB列 -771 428C7 无效的ROWID列规范 -797 42987 CREATE TRIGGER包含不被支持的语法 -798 428C9 不能把一个值插入到用GENERATED ALWAYS定义的ROWID列 -802 22012 某一特定操作发生了异常错误。被零除 22003 某一特定操作发生了异常错误。但不是被零除 -803 23505 不能插入行，因为这将违反唯一索引的约束 -804 07002 SQLDA的调用参数列表有误 -805 51002 在计划中没有发现DBRM或程序包名 -807 23509 对已指定的环境和连接，该程序包不可用 -808 08001 CONECT语句与程序中的第一个CONNECT语句不一致 -811 21000 当多行作为一内嵌的选择语句的返回结果时，必须使用游标 -812 22508 在CURRENT PACKAGESET中的ID集合是空白的，语句不能被执行 -815 42920 在一个内置选择语句或者一个基本谓词的子查询中，显式的或隐含的指定了GROUP BY或HAVING语句 -817 25000 执行SQL语句将可能导致禁止更新用户数据或DB2编目 -818 5103 计划&lt;－&gt;载入组件的时间戳不匹配，在执行计划中没有从同一个预编译中建立DBRM，该预编译是作为组件载入的 -819 58004 视图不能重建，因为在DB2编目中存储的分析树长度为0 -820 58004 在这个DB2版本的DB2编目中遇到了无效值 -822 51004 在SQLDA中遇到了无效地址 -840 54004 在选择列表或插入列表中返回的项目太多 -842 08002 到指定位置的连接已经存在 -843 08003 SET CONNECTION或RELEASE语句无法执行，因为连接不存在 -870 58026 宿主变量描述符的个数不等于语句中宿主变量的个数 -872 51302 这个子系统已指定了有效的CCSID -873 53090 同一SQL语句中，不能同时引用EBCDIC表中的定义的列和ASCII表中定义的列 -874 53901 指定对象的编码方案与其表空间的编码方案不匹配 -875 42988 指定的操作符不能用于ASCII数据 -876 53092 不能为指定的原因创建对象：提供了原因代码 -877 53093 数据库或表空间不允许用ASCII，必须使用EBCDIC -878 53094 该PLAN——TABLE不能是ASCII，必须使用EBCDIC -879 53095 指定对象的CREATE或ALTER语句不能将列、单值类型，某个存储过程或用户自定义函数的参数定义为以下类型：MAXED DATA， GRAPHIC，VARGRAPHIC，LONGVARGRAPHIC，因为系统没有为指定的编码方案定义相应的CCSID -900 08003 应用处理没有连接到应用服务器，语句不能被执行 -901 58004 遇到时断时续的系统错误，该错误不能抑制后继的SQL语句的执行 -902 58005 内部控制块的指针错误，要求重新绑定 -904 57011 指定的资源不可用 -905 57014 超出了资源上限 -906 51005 因为重大错误，SQL语句无法执行 -908 23510 当前资源限制设施的规范或者自动重绑定的系统参数不允许BIND，REBIND，AUTOREBIND -909 57007 对象已被删除 -910 57007 因为在该对象上挂起DROP，所以不能访问该对象 -911 40001 当前工作单元已被回滚 -913 57033 因为死锁或超时导致不成功执行 -917 42969 绑定程序包已经失败 -918 51021 SQL语句不能被执行，因为连接丢失 -919 56045 需要一个ROLLBACK -922 42505 连接权限失败。试图从TSO、CICS或IMS访问DB2，同时相应的连接设施处于非活动的状态 -923 57015 因为DB2不可用，所以不能建立连接 -924 58006 遇到了DB2内部的连接错误：提供了原因代码 -925 2D521 SQL的COMMIT语句不能从CICS或IMS/TM发布 -926 2D521 SQL的ROLLBACK语句不能从CICS或IMS/TM发布 -927 51006 当正在连接的环境没有建立时，语言接口被调用。利用DSN命令激发该程序 -929 58002 数据获取退出已经失败（DPROP） -939 51021 由于远程服务器的未请求的回滚，要求一个回滚 -947 56038 SQL语句失败，因为更新不能被传播（DPROP） -948 56062 DDF没有启动，分布式操作无效 -950 42705 在SQL语句中指定的位置在SYSIBM.LOCATIONS中没有定义 -965 51021 存储过程非正常终止（在DB2 6之前的版本） -981 57015 当前不是处于允许SQL的状态时，试图在RRSAF中执行SQL -991 57015 调用连接不能建立一个到DB2的隐含或开放连接 -2001 53089 为储存过程指定的宿主变量参数的个数不等于预期的参数个数 -20003 560A7 不能为GRECP中的表空间或索引指定GBPCACHE NONE -20004 560A8 对于WORKFILE对象。8KB或16Kb的缓冲池页面大小无效 -20005 54035 指定的对象类型超出了内部的ID极限 -20006 53097 当没有指定WLM环境时，LOB不能被指定为参数 -20070 53098 不能非LOB列建立一个辅助表 -20071 53099 必须指定WLM环境名 -20072 56052 指定的权限ID不拥有在触发器程序包上执行BIND所需的权限 -20073 42927 不能按照指定的要求更改命名的函数，因为在现存的视图定义中引用了该函数 -20074 42939 不能建立指定的对象，因为&quot;SYS&quot;是一个保留的前缀 -20100 56059 在被触发的SQL语句中有BIND错误，指定了错误的SQLCODE和SQLSTATE -20101 56059 由于指定的原因代码，该函数失败 -20102 42849 在CREATE或ALTER FUNCTION语句中不能使用指定的选项 -20104 42856 更改一个CCSID失败 -20106 42945 不能改变表空间或数据库的CCSID，因为现存的试图引用 -30000 58008 DRDA分布协议错误；处理可以继续 -30002 57057 使用DRDA的分布式客户把OPEN语句连接到PREPARE，但PREPARE接受到一个SQLCODE为+495的警告 -30020 58009 DRDA分布协议错误；对话被解除 -30021 58010 DRDA分布协议错误；处理不能继续 -30030 58013 违反分布协议：COMMIT不成功，对话被解除（AS） -30040 57012 因为不能得到资源，执行失败，处理可以继续（AS） -30041 57013 因为不能得到资源，执行失败，处理不能成功的继续（AS） -30050 58011 执行不成功，在BIND过程中不能执行语句 -30051 58012 特定的BIND过程不是处于活动状态（远程BIND），从而导致失败 -30052 42932 程序准备的假设错误 -30053 42506 程序包的拥有者遭遇授权失败 -30060 08004 RBD遭遇授权失败 -30061 08004 指定了无效或者没有存在的RDB -30070 58014 目标子系统不支持这个命令 -30071 58015 目标子系统不支持这个对象 -30072 58016 目标子系统不支持这个参数 -30073 58017 目标子系统不支持这个参数值 -30074 58018 应答信息不被支持 -30080 08001 SNA通信错误 -30081 58019 TCP/IP通信错误 -30082 08001 由于安全冲突、通信失败：提供了原因代码 -30090 25000 指定的操作对远程执行失败 -30104 56095 在绑定选项与绑定值中有错误 -30105 56096 指定的绑定选项不兼容","categories":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://tfssweb.github.io/tags/数据库/"},{"name":"db2","slug":"db2","permalink":"https://tfssweb.github.io/tags/db2/"}]},{"title":"Linux安装java环境","slug":"Linux安装java环境","date":"2016-04-02T03:11:33.000Z","updated":"2019-09-03T03:15:14.012Z","comments":true,"path":"2016/04/02/Linux安装java环境/","link":"","permalink":"https://tfssweb.github.io/2016/04/02/Linux安装java环境/","excerpt":"Linux安装java环境","text":"Linux安装java环境 第一步：首先网上下载tgz包，如本人用的jdk-7u79-linux-x64.tar.gz包，将其放到linux服务器上某一位置：如/usr/local;第二步：解压12cd /usr/localtar xvf jdk-7u79-linux-x64.tar.gz 第三步：修改/etc/profile文件12345vim /etc/profileexport JAVA_HOME=/usr/local/jdk1.7.0_79export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 第四步：保存，并执行以下命令，使之生效：1source /etc/profile 第五步：验证1java -version 至此，Linux成功安装java环境。","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"}]},{"title":"JDBC","slug":"JDBC","date":"2016-03-03T03:20:33.000Z","updated":"2019-09-03T03:15:14.006Z","comments":true,"path":"2016/03/03/JDBC/","link":"","permalink":"https://tfssweb.github.io/2016/03/03/JDBC/","excerpt":"JDBC","text":"JDBC 1234567891011121314151617181920212223242526272829//数据库连接地址public final static String URL = &quot;jdbc:mysql://localhost:3306/test&quot;;//用户名public final static String USERNAME = &quot;root&quot;;//密码public final static String PASSWORD = &quot;root&quot;;//插入操作public static void insert()&#123; try &#123; //1.加载数据库驱动 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //2.获取数据库连接 Connection conn = DriverManager.getConnection(URL, USERNAME, PASSWORD); //3.构造SQL语句 String sql = &quot;insert into person(name,age,description)values(&apos;小白&apos;,18,&apos;猥琐的人&apos;)&quot;; //4.构造Statement实例（用来发送SQL语句的载体） Statement state = conn.createStatement(); //5.执行SQL语句 state.executeUpdate(sql); //6.关闭连接(释放资源) state.close(); conn.close(); System.out.println(&quot;SUCCESS&quot;); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"},{"name":"jdbc","slug":"jdbc","permalink":"https://tfssweb.github.io/tags/jdbc/"}]},{"title":"Java片段","slug":"Java片段","date":"2016-03-02T10:10:23.000Z","updated":"2019-09-03T03:15:14.009Z","comments":true,"path":"2016/03/02/Java片段/","link":"","permalink":"https://tfssweb.github.io/2016/03/02/Java片段/","excerpt":"Java片段","text":"Java片段 12345678910&lt;select id=&quot;dynamicForeachTest&quot; resultType=&quot;Blog&quot;&gt; select * from t_blog where id in &lt;if test=&quot;list != null&quot; and list.size()&gt;0 &gt; &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/if&gt;&lt;/select&gt;注意：非空的判断，加上红色判断！ 123MediacctExample example = new MediacctExample();example.createCriteria().andMediidEqualTo(mediId).andMainacctynEqualTo(Const.YN_Y).andInactivedateIsNull();example.or().andMediidEqualTo(mediId).andMainacctynEqualTo(Const.YN_Y).andInactivedateGreaterThan(effDate);","categories":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://tfssweb.github.io/tags/java/"}]},{"title":"杂项-算法","slug":"杂项-算法","date":"2016-02-04T14:14:44.000Z","updated":"2019-09-03T03:15:14.063Z","comments":true,"path":"2016/02/04/杂项-算法/","link":"","permalink":"https://tfssweb.github.io/2016/02/04/杂项-算法/","excerpt":"四舍六入五成双规则如下：123456789101112131415161. 被修约的数字小于5时，该数字舍去；2. 被修约的数字大于5时，则进位；3. 被修约的数字等于5时，要看5前面的数字，若是奇数则进位，若是偶数则将5舍掉，即修约后末尾数字都成为偶数；若5的后面还有不为“0”的任何数，则此时无论5的前面是奇数还是偶数，均应进位。举例，用上述规则对下列数据保留小数点后两位数据：9.8249=9.82, 9.82671=9.839.8350=9.84, 9.8351 =9.849.8250=9.82, 9.82501=9.83mysql算法-四舍六入五成双SET @Val = 9.8250; -- 参数 SET @MinusValue = (@Val * 100 - FLOOR(@Val * 100) = 0.5) / 100; --判断是否需要减去0.01SET @PlusValue = FLOOR(@Val * 100) % 2 / 100; -- 判断，如果是奇数，那么加0.01SELECT ROUND(ROUND(@Val, 2) - @MinusValue + @PlusValue, 2) --打印出最终结果","text":"四舍六入五成双规则如下：123456789101112131415161. 被修约的数字小于5时，该数字舍去；2. 被修约的数字大于5时，则进位；3. 被修约的数字等于5时，要看5前面的数字，若是奇数则进位，若是偶数则将5舍掉，即修约后末尾数字都成为偶数；若5的后面还有不为“0”的任何数，则此时无论5的前面是奇数还是偶数，均应进位。举例，用上述规则对下列数据保留小数点后两位数据：9.8249=9.82, 9.82671=9.839.8350=9.84, 9.8351 =9.849.8250=9.82, 9.82501=9.83mysql算法-四舍六入五成双SET @Val = 9.8250; -- 参数 SET @MinusValue = (@Val * 100 - FLOOR(@Val * 100) = 0.5) / 100; --判断是否需要减去0.01SET @PlusValue = FLOOR(@Val * 100) % 2 / 100; -- 判断，如果是奇数，那么加0.01SELECT ROUND(ROUND(@Val, 2) - @MinusValue + @PlusValue, 2) --打印出最终结果","categories":[{"name":"算法","slug":"算法","permalink":"https://tfssweb.github.io/categories/算法/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://tfssweb.github.io/tags/mysql/"}]},{"title":"杂项-linux","slug":"杂项-linux","date":"2016-01-04T14:14:44.000Z","updated":"2019-09-03T03:15:14.062Z","comments":true,"path":"2016/01/04/杂项-linux/","link":"","permalink":"https://tfssweb.github.io/2016/01/04/杂项-linux/","excerpt":"有关linux个别命令的汇总","text":"有关linux个别命令的汇总 用户监控12345678910111213141516171819202122export HISTTIMEFORMAT=&quot;[%Y.%m.%d %H:%M:%S]&quot;USER_IP=`who -u am i 2&gt;/dev/null| awk &apos;&#123;print $NF&#125;&apos;|sed -e &apos;s/[()]//g&apos;`HISTDIR=/var/log/.histif [ -z $USER_IP ]thenUSER_IP=`hostname`fiif [ ! -d $HISTDIR ]then mkdir -p $HISTDIR chmod 777 $HISTDIRfiif [ ! -d $HISTDIR/$&#123;LOGNAME&#125; ]then mkdir -p $HISTDIR/$&#123;LOGNAME&#125; chmod 300 $HISTDIR/$&#123;LOGNAME&#125; fiexport HISTSIZE=4096DT=`date &quot;+%Y%m%d_%H%M%S&quot;`export HISTFILE=&quot;$HISTDIR/$&#123;LOGNAME&#125;/$&#123;USER_IP&#125;.hist.$DT&quot; 获取访问ip1ip=`who -u am i 2&gt;/dev/null| awk &apos;&#123;print $NF&#125;&apos;|sed -e &apos;s/[()]//g&apos;` 环境变量配置123export JAVA_HOME=/home/application/jdk1.8.0_201export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 全部替换1sed -i &quot;s/127.0.0.1/localhost/g&quot; `grep 127.0.0.1 -rl` 僵尸进程12[root@hyper /]# ps -A -ostat,ppid,pid,cmd | grep -e &apos;^[Zz]&apos;Z 89769 89877 [create-topics.s] &lt;defunct&gt; 停jar应用123456789#!/bin/bashPID=$(ps -ef | grep xxx.jar | grep -v grep | awk &apos;&#123; print $2 &#125;&apos;)if [ -z &quot;$&#123;PID&#125;&quot; ]thenecho Application is already stoppedelseecho kill $&#123;PID&#125;kill $&#123;PID&#125;fi 启动jar应用(springboot)123456789101112131415161718192021#!/bin/bash# app configSERVER_PORT=&quot;-Dserver.port=8080&quot;# databases configCK_IP=&quot;localhost&quot;CK_PORT=&quot;8123&quot;CK_USERNAME=&quot;default&quot;CK_PASSWORD=&quot;password&quot;DB_SERVER_URL=&quot;-Dclickhouse.jdbc.url=jdbc:clickhouse://$&#123;CK_IP&#125;:$&#123;CK_PORT&#125;/default -Dclickhouse.username=$&#123;CK_USERNAME&#125; -Dclickhouse.password=$&#123;CK_PASSWORD&#125;&quot;# info、debug、error、warn、traneLOG_LEVEL=&quot;-Dlogging.level.org.springframework.web=debug&quot;LOG_FILE=&quot;-Dlogging.file=./my.log&quot;# jar nameJAR_FILE=&quot;xxx.jar&quot;# startjava $&#123;SERVER_PORT&#125; $&#123;LOG_LEVEL&#125; $&#123;DB_SERVER_URL&#125; $&#123;LOG_FILE&#125; -jar $&#123;JAR_FILE&#125; &amp;","categories":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://tfssweb.github.io/tags/linux/"}]},{"title":"标题","slug":"模板","date":"1969-12-31T16:00:00.000Z","updated":"2019-09-03T03:15:14.064Z","comments":true,"path":"1970/01/01/模板/","link":"","permalink":"https://tfssweb.github.io/1970/01/01/模板/","excerpt":"概要","text":"概要 正文 图片引入","categories":[{"name":"分类","slug":"分类","permalink":"https://tfssweb.github.io/categories/分类/"}],"tags":[{"name":"tag1","slug":"tag1","permalink":"https://tfssweb.github.io/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"https://tfssweb.github.io/tags/tag2/"}]}]}